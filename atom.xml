<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Meulta&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-16T00:19:12.853Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Etienne Margraff</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Experimenting with Windows Machine Learning and Mixed Reality</title>
    <link href="http://yoursite.com/2018/05/18/experimenting-with-windows-machine-learning-and-mixed-reality/"/>
    <id>http://yoursite.com/2018/05/18/experimenting-with-windows-machine-learning-and-mixed-reality/</id>
    <published>2018-05-18T07:27:52.000Z</published>
    <updated>2019-01-16T00:19:12.853Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>If you have any question about this blog article, feel free to contact me on twitter: <a href="https://twitter.com/meulta" target="_blank" rel="noopener">@meulta</a></p></blockquote><p>I have an awesome job at Microsoft: I get to work on mixing AI, Cloud and <a href="https://www.microsoft.com/en-us/windows/windows-mixed-reality" target="_blank" rel="noopener">Mixed Reality</a> experiences with partners and other companies. This enables me to work on cool new stuff and see what companies really want to do. Form all of the Microsoft <a href="https://azure.microsoft.com/en-us/services/cognitive-services/" target="_blank" rel="noopener">Cognitive Services</a> : Computer Vision is one that bring a lot to Augmented reality experiences . We&#8217;ve already helped a lot of companies using the <a href="https://customvision.ai/" target="_blank" rel="noopener">Custom Vision online service</a> which you can access via a REST API. The service tells you what’s in the image by providing a list of tags along with their probability ratio. A new feature was added more recently to show you <em>where</em> these objects are located in the image, thanks to the new Object Detection model with bounding boxes.</p><p>The only piece which was missing is offline support. When you don’t have any internet connectivity, these services are not very useful anymore. When detecting that the device you have is offline, you have two possibilities:</p><ul><li>Disabling the features that require this REST API.</li><li>Trying to perform object recognition locally, on the device.</li></ul><p>We recently announced <a href="https://docs.microsoft.com/en-us/windows/uwp/machine-learning" target="_blank" rel="noopener">Windows Machine Learning</a>. It is a service in Windows accessible through a set of APIs when you are building Universal Windows Platform (UWP) applications. This service was released at the end of April 2018 in the brand-new Windows update. The good news is: this Windows update is also available on <a href="https://www.microsoft.com/en-us/hololens" target="_blank" rel="noopener">HoloLens</a>!</p><p>This Windows ML feature requires a trained model in the <a href="https://onnx.ai/" target="_blank" rel="noopener">ONNX format</a>. ONNX is an initiative from companies such as AWS, Facebook and Microsoft to create an open format to represent deep learning models. One way to create an ONNX model today is to convert it from one that already exists. Guess what? Custom Vision gives you the feature of exporting a trained model in ONNX (for some of the model types available).</p><p>I recently worked with a company to try and mix all of this and be able to run a Custom Vision model on HoloLens.</p><p><strong>It worked! Here is how we did it</strong> (using a demo project as an example. You can get the full code here: <a href="https://aka.ms/mr-winml-code" target="_blank" rel="noopener">https://aka.ms/mr-winml-code</a>).</p><div style="width: 640px;" class="wp-video"><br>  <video class="wp-video-shortcode" id="video-310-7" width="640" height="200" loop="1" autoplay="1" preload="auto" controls="controls"><source type="video/mp4" src="/media/winml.mp4?_=7"><a href="/media/winml.mp4">winml.mp4</a></video><br></div><h2 id="Use-Custom-Vision-to-create-an-ONNX-model"><a href="#Use-Custom-Vision-to-create-an-ONNX-model" class="headerlink" title="Use Custom Vision to create an ONNX model"></a>Use Custom Vision to create an ONNX model</h2><p>Custom Vision (<a href="http://www.customvision.ai/" target="_blank" rel="noopener">customvision.ai</a>) is one of the Cognitive Services. These are a set of Machine Learning ready-to-use models. The idea is simple: you get the power of Deep Learning and other algorithms without even having to go through the challenge of creating and training the model yourself. If you know how to call a REST API, you know how to use Cognitive Services. Some of these services are customizable. In the Vision API, we have a “Custom” version that you can train by uploading pictures and tagging them.</p><p style="text-align: left;"><br>  <em><strong>Note: </strong>We also recently released a preview of the Object Detection model. It brings you a customizable Vision service WITH bounding boxes! So now not only do you know what is in the picture, you can also know where it is. It is very helpful in Augmented Reality apps as it enables a way to display data on top of objects.</em><br></p><p>There is a very comprehensive guide <a href="https://docs.microsoft.com/en-us/azure/cognitive-services/custom-vision-service/getting-started-build-a-classifier" target="_blank" rel="noopener">available here</a> explaining how to create a classifier so I am not going to go through it here in detail. Here are some interesting things for you to consider:</p><p>First, pick a compact model. If you want to export as ONNX, the model as to be marked as <strong>(compact)</strong>, otherwise you won’t be able to. This makes sense in a way that these models are designed to run offline on devices that do not have a lot of power. It is a good way to insure you have usable exported models.</p><p><img class="alignnone wp-image-319" src="/media/createvisionproject.png" alt="" width="644" height="487" sizes="(max-width: 644px) 100vw, 644px"></p><p>Once you’ve picked the model you need, you just have to train it. In my examples, I am training it using photos of a Rubik’s cube and a Seahawks football (for no particular reason, these were just the first things that I found in my office when writing this sample &#x1f60a; ).</p><p><img class="alignnone wp-image-324" src="/media/training.png" alt="" width="887" height="489" sizes="(max-width: 887px) 100vw, 887px"></p><p>You can start with as few as 10 pictures for each tag and the service will surprise you with its ability to recognize these very accurately. Of course, you can refine the model by adding more pictures with different lightnings, coloring, etc.</p><p>Exporting is very easy, go in the <strong>Performance</strong> tab and click on the <strong>Export</strong> button. You can choose the format you want and in this case, we need ONNX.</p><p><img class="alignnone wp-image-325" src="/media/export.png" alt="" width="634" height="434" sizes="(max-width: 634px) 100vw, 634px"></p><p>That’s it. We now have a model we can use offline!</p><h2 id="Generate-the-Windows-ML-wrapper"><a href="#Generate-the-Windows-ML-wrapper" class="headerlink" title="Generate the Windows ML wrapper"></a>Generate the Windows ML wrapper</h2><p>Now that we have a model, we need to write some code that is going to make use of it. You can find everything you need about Windows Machine Learning in the <a href="https://docs.microsoft.com/en-us/windows/uwp/machine-learning/" target="_blank" rel="noopener">documentation</a> but let’s get through the main actions you need to perform.</p><p>When I say that we need to write some code, it is not completely accurate. We will <em>generate</em> a wrapper to use the ONNX model in UWP. The only code we need to write ourselves is the one that gets the image from the webcam and pass it to the wrapper.</p><p>The Windows ML SDK comes with a tool named MLGen.exe. This command line tool helps you generate a wrapper for an ONNX file. It is located where you installed the Windows SDK. On my computer, which has a standard install, here where it is:</p><pre>C:\Program Files (x86)\Windows Kits\10\bin\10.0.17125.0\x86\mlgen.exe</pre><p>The command line to run is straightforward:</p><pre>mlgen -i INPUT-FILE -l LANGUAGE -n NAMESPACE [-o OUTPUT-FILE]</pre><ul><li><strong>INPUT-FILE</strong> is the ONNX file.</li><li><strong>LANGUAGE</strong> is the programming language (CS in this case).</li><li><strong>NAMESPACE</strong> is the namespace used in the CSharp file. This should be something usable in your project, but you can change it later.</li><li><strong>OUTPUT-FILE</strong> is the file that is going to be created (a .cs one, in this case).</li></ul><p>A generated wrapper contains 3 classes (considering that “ModelName” is the name of your model):</p><ul><li><strong>ModelName</strong>_<strong>Input</strong>: a structure to hold the input data. In Vision related model, it is a <strong>VideoFrame</strong> which is easy to get from the Camera in UWP.</li><li><strong>ModelName</strong>_<strong>Ouput</strong>: a structure used by the wrapper to give you the output.</li><li><strong>ModelName</strong>: a class responsible for running the model evaluation. It contains a static constructor and an asynchronous method to evaluate  the model prediction.</li></ul><p>Here is an example of generated code:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Windows.Media;</span><br><span class="line"><span class="keyword">using</span> Windows.Storage;</span><br><span class="line"><span class="keyword">using</span> Windows.AI.MachineLearning.Preview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyNamespace</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">MyModelInput</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">public</span> VideoFrame data &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">MyModelOutput</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> IList&lt;<span class="keyword">string</span>&gt; classLabel &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="keyword">public</span> IDictionary&lt;<span class="keyword">string</span>, <span class="keyword">float</span>&gt; loss &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyModelOutput</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">this</span>.classLabel = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">    <span class="keyword">this</span>.loss = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">float</span>&gt;();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">MyModel</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">private</span> LearningModelPreview learningModel;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task&lt;MyModel&gt; <span class="title">CreateMyModel</span>(<span class="params">StorageFile file</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">      LearningModelPreview learningModel = <span class="keyword">await</span> LearningModelPreview.LoadModelFromStorageFileAsync(file);</span><br><span class="line">      MyModel model = <span class="keyword">new</span> MyModel();</span><br><span class="line">      model.learningModel = learningModel;</span><br><span class="line">      <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;MyModelOutput&gt; <span class="title">EvaluateAsync</span>(<span class="params">MyModelInput input</span>)</span> &#123;</span><br><span class="line">      MyModelOutput output = <span class="keyword">new</span> MyModelOutput();</span><br><span class="line">      LearningModelBindingPreview binding = <span class="keyword">new</span> LearningModelBindingPreview(learningModel);</span><br><span class="line">      binding.Bind(“data“, input.data);</span><br><span class="line">      binding.Bind(“classLabel“, output.classLabel);</span><br><span class="line">      binding.Bind(“loss“, output.loss);</span><br><span class="line">      LearningModelEvaluationResultPreview evalResult = <span class="keyword">await</span> learningModel.EvaluateAsync(binding, <span class="keyword">string</span>.Empty);</span><br><span class="line">      <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p style="text-align: left;"><br>  <em><strong>Note</strong>: When exporting from the Custom Vision service, the name of the model is a generated one. You might have to change it to something that is more human readable.</em><br></p><p>As you can see in this example, the generation tool created an output structure with 2 parameters:</p><ul><li><strong>classLabel</strong>: the labels with the highest probability.</li><li><strong>loss</strong>: a dictionary with all labels and their respective probability.</li></ul><p>The dictionary is not initialized. If you leave it this way you will get an Exception when running the code. You have to initialize it using the labels you set in the Custom Vision portal. Here is how it looks like for mine:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.loss = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">float</span>&gt;()</span><br><span class="line">&#123;</span><br><span class="line">  &#123; <span class="string">"football"</span>, <span class="number">0f</span> &#125;,</span><br><span class="line">  &#123; <span class="string">"rubikscube"</span>, <span class="number">0f</span> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Awesome, we now have a usable wrapper. Let see how we can integrate this in a Mixed Reality app.</p><h2 id="Integrate-in-your-Mixed-Reality-app"><a href="#Integrate-in-your-Mixed-Reality-app" class="headerlink" title="Integrate in your Mixed Reality app"></a><strong>Integrate in your Mixed Reality app</strong></h2><p>The best way to start integrating your wrapper and ONNX model in an application is to look at the <a href="https://docs.microsoft.com/en-us/windows/uwp/machine-learning/samples" target="_blank" rel="noopener">samples</a> that the team is providing. They will guide you through everything you need: starting the Camera, collecting <strong>VideoFrames</strong>, sending these to the wrapper and getting the result.</p><p>When you are creating a Windows Mixed Reality application and, more specifically, a HoloLens app, you use Unity to setup your scene with 3D objects as needed along with C# scripts. This Unity project is then built (or “exported”) as a Visual Studio solution containing a Universal Windows Platform (UWP) project.</p><p style="text-align: left;"><br>  <em><strong>Note</strong>: In theory, a Unity project is meant to be exported to different platforms. We usually try to keep the code as portable as possible. In this specific case we are going to use APIs that are specific to Windows to run the evaluation of the ONNX model. To make sure this platform specific code does not generate errors in Unity, we will wrap it inside conditional compilation keyword. This will tell Unity and Visual Studio: “don’t try to parse / compile this unless you are in UWP”. If you want to run this code on another environment you will have to (at least) add another conditional compilation switch to add the code specific to this platform.</em><br></p><p><span style="display: inline !important; float: none; background-color: transparent; color: #333333; cursor: text; font-family: 'Roboto',Helvetica,sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-decoration: none; text-indent: 0px; text-transform: none; -webkit-text-stroke-width: 0px; white-space: normal; word-spacing: 0px;">You can get the full code for this sample here: <a href="https://aka.ms/mr-winml-code" target="_blank" rel="noopener">https://aka.ms/mr-winml-code</a> </span></p><p>In the sample project, there is a Game Object with no graphical representation. It is called <strong>ScriptHolder</strong> and its only role is to have some scripts attached to run code at specific moments during execution. This object has a script named <strong>Scene Startup</strong> attached to it. This script contains all the code needed to create the ONNX wrapper, get the <strong>VideoFrames</strong> and display the result of prediction.</p><p>The <strong>Start</strong> method in the standard Unity MonoBehaviour is called automatically when the object appears in the scene (i.e. when the application is starting). This will:</p><ul><li>Get an instance to the label where we are going to display results to.</li><li>Create and initialize the <strong>MediaCapture</strong> object to start collecting frames from the camera.</li><li>Initialize the wrapper for the ONNX model.</li></ul><p>Initializing the model is pretty easy, you just load the file from the local storage and call the static constructor for the wrapper:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">InitializeModel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  StorageFile imageRecoModelFile = <span class="keyword">await</span> StorageFile.GetFileFromApplicationUriAsync(<span class="keyword">new</span> Uri($”ms-appx:<span class="comment"><span class="doctag">///</span>Data/StreamingAssets/model.onnx“));</span></span><br><span class="line">  imageRecoModel = <span class="keyword">await</span> Image_RecoModel.CreateImage_RecoModel(imageRecoModelFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To be able to use the ONNX model file in the app, you will need to create a specific folder in Unity called exactly <strong>StreamingAssets</strong> and add the .onnx file there. When you generated the UWP project it will be added in it under <em>/Data/StreaminAssets</em> and its <strong>Build Action</strong> property will be set to <strong>Content</strong>. This way you can access it using the Storage API.</p><p><img class="alignnone wp-image-331" src="/media/streamingassets.png" alt="" width="483" height="205" sizes="(max-width: 483px) 100vw, 483px"></p><p>Initializing the process of getting Video Frames is straightforward. You can take a look at the code in <strong>CreateFrameReader()</strong>. It involves some parameter initialization and a call to the static method: <strong>MediaCapture.CreateFrameReaderAsync</strong>.</p><p>Once this is done, we call the <strong>StartPullFrames</strong> method which does all the interesting work.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">StartPullFrames</span>(<span class="params">MediaFrameReader sender</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Task.Run(<span class="keyword">async</span> () =&gt;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">var</span> frameReference = sender.TryAcquireLatestFrame();</span><br><span class="line">      <span class="keyword">var</span> videoFrame = frameReference?.VideoMediaFrame?.GetVideoFrame();</span><br><span class="line">      <span class="keyword">if</span> (videoFrame == <span class="literal">null</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">continue</span>; <span class="comment">//ignoring frame</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> input = <span class="keyword">new</span> Image_RecoModelInput();</span><br><span class="line">      input.data = videoFrame;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(videoFrame.Direct3DSurface == <span class="literal">null</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">continue</span>; <span class="comment">//ignoring frame</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">        Image_RecoModelOutput prediction = <span class="keyword">await</span> imageRecoModel.EvaluateAsync(input).ConfigureAwait(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">var</span> classWithHighestProb = prediction.classLabel[];</span><br><span class="line">        <span class="keyword">if</span> (prediction.loss[classWithHighestProb] &gt; <span class="number">0.5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          DisplayText(“I see a “ + classWithHighestProb);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          DisplayText(“I see nothing“);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">//Log errors</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">await</span> Task.Delay(predictEvery);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Note: There are a lot of different ways to do this and keep in mind that this is only an example. You should find out the best way to integrate this into your product, which might be different than this approach.</em></p><p>This method starts an infinite loop on a separate thread. This loop tries to get the latest frame that was captured by the camera and after a few tests (is the frame null? Is the <strong>Direct3DSurface</strong> null?) It is given to the <strong>EvaluateAsync</strong> method of the wrapper.</p><p>Note that in this case, we ask for it to be run synchronously (with <strong>ConfigureAwait(false)</strong>) so we don’t flood the device with a ton of parallel evaluations.</p><p>Once we get the result from the model evaluation, we get the name of the class with the highest probability using <strong>classLabel[0]</strong>. And we check to see if the probability is over 0.5. It is an arbitrary number I picked to not consider detected classes with a too low probability.</p><p>If you take a look at the wrapper code in <a href="https://github.com/Microsoft/mixedreality-azure-samples/blob/42289b5c9b49aed5c1e5e6194ad6aa41a66d5ba7/Standalone-Samples/WindowsML-CustomVision-Hololens/Assets/Scripts/Vision.cs#L26" target="_blank" rel="noopener"><strong>Vision.cs</strong></a>, you will notice that the <strong>Input</strong> and <strong>Output</strong> classes are the ones that were generated by the command line tool. The only additions I made were initializing the <strong>Dictionary</strong> with the 2 types of objects available in my custom vision model.</p><p>I tried to optimize the <strong>EvaluateAsync</strong> method by pre-initializing objects in the static constructor and only binding the output once. It improved a little bit but not significantly enough to say that this is worth it.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">DisplayText(<span class="string">"Does not work in player."</span>);</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DisplayText</span>(<span class="params"><span class="keyword">string</span> text</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  textToDisplay = text;</span><br><span class="line">  textToDisplayChanged = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> UNITY_WSA &amp;&amp; !UNITY_EDITOR</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">InitializeModel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  StorageFile imageRecoModelFile = <span class="keyword">await</span> StorageFile.GetFileFromApplicationUriAsync(<span class="keyword">new</span> Uri(<span class="string">$"ms-appx:///Data/StreamingAssets/model.onnx"</span>));</span><br><span class="line">  imageRecoModel = <span class="keyword">await</span> Image_RecoModel.CreateImage_RecoModel(imageRecoModelFile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">CreateMediaCapture</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  MediaCapture = <span class="keyword">new</span> MediaCapture();</span><br><span class="line">  MediaCaptureInitializationSettings settings = <span class="keyword">new</span> MediaCaptureInitializationSettings();</span><br><span class="line">  settings.StreamingCaptureMode = StreamingCaptureMode.Video;</span><br><span class="line">  <span class="keyword">await</span> MediaCapture.InitializeAsync(settings);</span><br><span class="line"></span><br><span class="line">  CreateFrameReader();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That’s it! Only a few lines of code using an out of the box feature from Windows and you get an offline Custom Vision model on HoloLens.</p><h2 id="Moving-forward"><a href="#Moving-forward" class="headerlink" title="Moving forward"></a>Moving forward</h2><p>Running this on a HoloLens is pretty fun: you look at a football, it says “I see a football” then you look at a Rubik’s cube and it says that is it a Rubik’s cube. Ok… maybe it is not the most exciting app but I can tell you that this will help a lot of developers handling offline scenarios! 🙂</p><p>Windows Machine Learning is still new and in preview. We can expect that this will improve a lot in the future. When using a Machine that supports it, Windows ML uses the GPU to do model evaluation. Keep in mind that on HoloLens, it’s only using the CPU.  This means that you must be very cautious about what model you use on this kind of device. Whether it’s a HoloLens, a phone or a tablet, you’ll want to test it and make sure it is fast enough for your scenario. A good idea might be to use the <a href="https://docs.unity3d.com/Manual/Profiler.html" target="_blank" rel="noopener">Unity Profiler</a> to understand usage of the CPU and the GPU in your app. Right now, I have no idea if using the GPU will ever be possible on HoloLens for this kind of processing.</p><p>Deep Learning and tools from this big AI family are really the next frontier for AR and VR. In the coming years they are going to be the key component to evolve from good apps to magical experiences.</p><h2 id="Credits"><a href="#Credits" class="headerlink" title="Credits"></a><strong>Credits</strong></h2><p>Huge thanks to <a href="https://twitter.com/JasonGFox" target="_blank" rel="noopener">Jason Fox</a>, <a href="https://twitter.com/jbienz" target="_blank" rel="noopener">Jared Bienz</a>, <a href="https://twitter.com/ActiveNick" target="_blank" rel="noopener">Nick Landry</a> and <a href="https://twitter.com/sferquel" target="_blank" rel="noopener">Simon Ferquel</a> for the help on reviewing this article and the sample code.</p><blockquote><p>If you have any question about this blog article, feel free to contact me on twitter: <a href="https://twitter.com/meulta" target="_blank" rel="noopener">@meulta</a></p></blockquote><p>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;If you have any question about this blog article, feel free to contact me on twitter: &lt;a href=&quot;https://twitter.com/meulta&quot; t
      
    
    </summary>
    
      <category term="Uncategorized" scheme="http://yoursite.com/categories/Uncategorized/"/>
    
    
      <category term="AI" scheme="http://yoursite.com/tags/AI/"/>
    
      <category term="HoloLens" scheme="http://yoursite.com/tags/HoloLens/"/>
    
      <category term="Mixed Reality" scheme="http://yoursite.com/tags/Mixed-Reality/"/>
    
  </entry>
  
  <entry>
    <title>Bot framework, web chat and push notifications</title>
    <link href="http://yoursite.com/2017/04/17/bot-framework-web-chat-and-push-notifications/"/>
    <id>http://yoursite.com/2017/04/17/bot-framework-web-chat-and-push-notifications/</id>
    <published>2017-04-17T23:18:26.000Z</published>
    <updated>2019-01-16T00:19:01.695Z</updated>
    
    <content type="html"><![CDATA[<p><em>This blog article is explaining how to setup web push notifications on a bot framework web chat control. For this, we will use service workers and VAPID. All the code shown here is available in this <a href="https://github.com/meulta/webchat-pushnotifications" target="_blank" rel="noopener">Github repository</a> containing the full version of it. You can also try <a href="https://webchatpush.azurewebsites.net/web/index.html" target="_blank" rel="noopener">this live sample</a> or watch the video below.</em></p><div style="width: 640px;" class="wp-video"><br>  <video class="wp-video-shortcode" id="video-255-6" width="640" height="480" loop="1" autoplay="1" preload="metadata" controls="controls"><source type="video/mp4" src="/media/push-notifications.mp4"><a href="/media/push-notifications.mp4">push-notifications.mp4</a></video><br></div><blockquote><p>If you have any question about this blog article, feel free to contact me on twitter: <a href="https://twitter.com/meulta" target="_blank" rel="noopener">@meulta</a></p></blockquote><h1 id="Progressive-web-apps"><a href="#Progressive-web-apps" class="headerlink" title="Progressive web apps"></a><strong>Progressive web apps</strong></h1><p>The web is in a perpetual evolution. The advantage that apps have over it on mobile platforms is slowly fading away as more and more features are available from the browser. The web community and web browsers team like Microsoft Edge, Google Chrome and Mozilla Firefox are working on enabling the next wave of native-like web experiences, where web content can have the essential capabilities and user experience of native desktop or mobile apps. These web apps can start up instantly, can run in the background and have additional APIs available for developers. We call them: <a href="https://medium.com/web-on-the-edge/progressive-web-apps-on-windows-8d8eb68d524e" target="_blank" rel="noopener">Progressive Web Apps</a> (PWAs).</p><p>PWAs are safe, connectivity independent, installable and responsive websites. There is a great chance that you already used one, even without knowing it. Did you already received notifications from Facebook even if the website is not opened in your browser? It is because Facebook is starting to use some of the underlining technology in PWAs. The heart of these new technologies are <a href="https://www.w3.org/TR/service-workers/" target="_blank" rel="noopener"><strong>service workers</strong>.</a></p><p>Service workers are slowly being implemented in every browser to help web developers create web apps that are connectivity independent. You can see them as a proxy that goes between the local webpage and your server. It is used to handle caching, push notifications, and even temporary disconnection with background sync.</p><h1 id="Bot-framework-web-chat-and-the-need-of-push-notifications"><a href="#Bot-framework-web-chat-and-the-need-of-push-notifications" class="headerlink" title="Bot framework, web chat and the need of push notifications"></a><strong>Bot framework, web chat and the need of push notifications</strong></h1><p>The <a href="https://dev.botframework.com/" target="_blank" rel="noopener">Microsoft Bot Framework</a> is a platform that helps developers create a bot which works across multiple channels. You use the Node.js or C# botbuilder SDK to create the bot backend and you can almost automatically make is available on Skype, Slack, Facebook, and a lot more. The combinaison of the <a href="https://github.com/Microsoft/BotFramework-WebChat" target="_blank" rel="noopener"><strong>web chat</strong></a> and Direct Line is one of these channels. Its name is pretty explicit: it is a web chat control that you can embed in any web page. It is very useful when, for example, you want to embed a support bot chat window directly in your website. Web clients have always been inferior to native clients in one way: background.  Your native client can be granted privileges to run in the background and engage users even when the app isn’t running.  We want to provide that same functionality for the web client</p><p>As you might be using at least one instant messaging app on a day to day basis, you should be familiar with the fact that if someone talks to you when the app is closed or reduced you will receive a notification. You can click or tap on it to view the new message and the previous conversation. Having this is important to make the chat UI usable in the long term. It is the same if you are talking with a bot. Usually it will give you an answer pretty quickly as there is no concept of a bot being “away from keyboard” or “not connected”. This said, you might get a message from a bot which:</p><ul><li>Took some time to compute or get so did not arrive instantly</li><li>Is a proactive message from the bot at a random time</li><li>Is a human which took over the conversation and “replaced” the bot</li><li>Your network doesn’t allow for immediate communication</li></ul><p><strong>Push notifications</strong> help the user not missing an important message from you. By enabling them to the web client we will fix the gap between native and web clients.</p><h1 id="Push-notifications"><a href="#Push-notifications" class="headerlink" title="Push notifications"></a><strong>Push notifications</strong></h1><p>If you never handled push notifications in an app it is important to understand how it works.</p><p>When you receive a push notification from an app or a website, even if it looks like they sent it to you directly: it is not technically true. They used a <strong>push notification service</strong>. This push notification service is linked to the platform you are using. Android uses a push server and Windows another one. It is the same for push notification on a browser: Chrome has its own server, Firefox too, etc.</p><p>When you want to be able to send push to a client, you globally have to follow these steps:</p><ul><li><strong>Step 1</strong>: Setup an account on every platform you want to be able to send push to. The push service creates a push sender key that you will need later.</li><li><strong>Step 2</strong>: Subscribe a client to push: this is done and handled by the platform. You do not call directly the push server but you ask the platform to do it. For it to work and for the push server to be able to identify yourself, you have to provide the key it gave you.</li><li><strong>Step 3</strong>: The client get information related to the new subscription: an endpoint on the push server to call to send a new notification and keys for authentication</li><li><strong>Step 4</strong>: Usually, your client code then sends that to your server code to store this subscription information</li><li><strong>Step 5+</strong>: each time you want to send a notification to this client, you use the endpoint and keys that you got from it. The push server will then send that notification to the system which registered (a browser, a mobile, a desktop, etc.). Finally, the system displays it to the user who can see it and click on it.</li></ul><p><img class="alignnone size-full wp-image-300" src="/media/push.png" alt="" width="1896" height="1046" sizes="(max-width: 1896px) 100vw, 1896px"></p><p>This is identical for native apps and web apps. However, web notifications are a newer and more progressive spec.  They allow for developers to set up push without all the overhead of accounts on each platform. Your web app will still use the push server associated with each platform but you will generate your own keys. This is done by using <a href="https://tools.ietf.org/html/draft-ietf-webpush-vapid-02" target="_blank" rel="noopener">VAPID (Voluntary Application Server Identification)</a>.</p><p>For example, if you setup classic push notifications on chrome, you will have to give a GCM_SENDER_ID you got from a Firebase account. Using VAPID, chrome will still be using Firebase to register and get push events but you will give it your own key, which will also work with other browsers.</p><p>In this scenario, your server code is responsible for creating private and public keys. This is a one-time creation process. In your web client code, you use the public key to register to the push server associated with the current browser. The push service understand that you are using VAPID and you get an endpoint and an auth token. This basically only replace <strong>step 3</strong> and you can do everything else the same way.  VAPIDs represent the modern approach to push.</p><p>To get a deeper understanding of how VAPIDs work, you can check out any of these resources:</p><ul><li><a href="https://rossta.net/blog/using-the-web-push-api-with-vapid.html" target="_blank" rel="noopener">https://rossta.net/blog/using-the-web-push-api-with-vapid.html</a></li><li><a href="https://developers.google.com/web/updates/2016/07/web-push-interop-wins" target="_blank" rel="noopener">https://developers.google.com/web/updates/2016/07/web-push-interop-wins</a></li><li><a href="https://blog.mozilla.org/services/2016/04/04/using-vapid-with-webpush/" target="_blank" rel="noopener">https://blog.mozilla.org/services/2016/04/04/using-vapid-with-webpush/</a></li></ul><p>When you setup push on a website, you have to do it through a service worker. A service worker is a piece of code which is running side by side with your website client code. The 2 main differences are:</p><ul><li>It can run even if the website is not open in a tab</li><li>It is dedicated to network related work such as… push!</li></ul><p>In a push scenario, the service worker registers specifically to a “push” event. Its code will be running in the background to get and display what is pushed, and your client code will be responsible for the rest:</p><ul><li>registering the service worker JavaScript file using <strong>serviceWorker.register(…)</strong></li><li>registering to the push service and getting back the endpoint, key and secret for this push subscription</li><li>sending the endpoint, key and secret to your server code so it can send a push notification later</li></ul><p><em>Note: when you register for push in your client code, the browser will automatically ask for the user’s permission to enable push notifications.</em></p><p><strong>Ok, enough talking, let’s implement that!</strong></p><p><em>Disclaimer 1: The code I am going to talk about here is from a fully working sample which is available here:</em> <a href="https://github.com/meulta/webchat-pushnotifications" target="_blank" rel="noopener"><em>https://github.com/meulta/webchat-pushnotifications</em></a> <em>You can go and have a look at the whole implementation. I will only talk about interesting pieces here.</em> </p><p><em>Disclaimer 2: If you do not know anything about the Bot Framework I highly recommend reading the documentation:</em> <a href="https://docs.botframework.com/en-us/" target="_blank" rel="noopener">https://docs.botframework.com/en-us/</a></p><p>_Disclaimer 3: concepts I talk about here will work for any website even if you are not using bot framework _</p><p><em>Disclaimer 4: sorry about all these disclaimers!</em> <em>&#x1f609;</em></p><h1 id="Adding-push-notification-to-an-existing-bot"><a href="#Adding-push-notification-to-an-existing-bot" class="headerlink" title="Adding push notification to an existing bot"></a><strong>Adding push notification to an existing bot</strong></h1><blockquote><p>You can try a live version of this sample here: <a href="https://webchatpush.azurewebsites.net/web/index.html" target="_blank" rel="noopener">https://webchatpush.azurewebsites.net/web/index.html</a></p></blockquote><p>The bot we are using in this sample is a really simple one. If you say anything to it, it will start sending one message every 5 seconds. You can stop it by saying “stop”.</p><p>You can have a look at the code doing this (<a href="https://github.com/meulta/webchat-pushnotifications/blob/master/bot.js#L84-L103" target="_blank" rel="noopener">https://github.com/meulta/webchat-pushnotifications/blob/master/bot.js#L84-L103</a>) but please do not take it as a reference to send messages proactively to a user from a bot. I tried to keep it as simple as possible as this is not the important part here. You can read more about how to send a message proactively to a user here: <a href="https://docs.botframework.com/en-us/azure-bot-service/templates/proactive/" target="_blank" rel="noopener">https://docs.botframework.com/en-us/azure-bot-service/templates/proactive/</a></p><p>This server code is responsible for creating VAPID keys and send push notification to clients.</p><ul><li><strong>Creating Vapid keys</strong></li></ul><p>If you create your server code in Node.js then you can use a very cool module created by Mozilla which will do almost all the work for you: web-push : <a href="https://github.com/web-push-libs/web-push" target="_blank" rel="noopener">https://github.com/web-push-libs/web-push</a></p><p>You will have to first generated Vapid keys using the <strong>webPush.generateVapidKeys()</strong> function. You only have to do this once or when you want to reset your keys. In our sample, we generate them and store them in a local JSON file. You might want to store this somewhere more secure.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vapidKeyFilePath = <span class="string">"./vapidKey.json"</span>;</span><br><span class="line"><span class="keyword">var</span> vapidKeys = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fs.existsSync(vapidKeyFilePath)) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//if the vapid file exists, then we try to parse its content </span></span><br><span class="line">  <span class="comment">//to retrieve the public and private key</span></span><br><span class="line">  <span class="comment">//more tests might be necessary here</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    vapidKeys = <span class="built_in">JSON</span>.parse(fs.readFileSync(vapidKeyFilePath));</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"There is an error with the vapid key file. Log: "</span> + e.message);</span><br><span class="line">    process.exit(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//if the file did not exists, we use the web-push module to create keys</span></span><br><span class="line">  <span class="comment">//and store them in the file for future use</span></span><br><span class="line">  <span class="comment">//you should copy the public key in the index.js file</span></span><br><span class="line"></span><br><span class="line">  vapidKeys = webPush.generateVAPIDKeys();</span><br><span class="line">  fs.writeFileSync(vapidKeyFilePath, <span class="built_in">JSON</span>.stringify(vapidKeys));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"No vapid key file found. One was generated. Here is the public key: "</span> + vapidKeys.publicKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You then have to call the <strong>setVapidDetails()</strong> function to configure the web push module to send push notifications using the vapid private key. This will ensure the push server to be sure it comes from you.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">webPush.setVapidDetails(</span><br><span class="line">  <span class="string">'mailto:example@yourdomain.org'</span>,</span><br><span class="line">  vapidKeys.publicKey,</span><br><span class="line">  vapidKeys.privateKey);</span><br></pre></td></tr></table></figure><ul><li><strong>Handling event to register push</strong></li></ul><p>A bot can receive messages from the user but it can also receive events from the client code. This is very handful to send data to your bot backend code without the user knowing it. In the web chat control it is called the backchannel.</p><p>We are going to use this backchannel for the client code to have a way of sending every user push subscription information. We just listen to incoming activities of type <strong>event</strong> and check that the message name is <strong>pushsubscriptionadded</strong> (which is one I totally imagine myself, you can pass whatever name you want).</p><p>Each time the bot receive a new push subscription, we store it in a local variable associating it to the user internal id in the bot. Note that it might be best to store it in the bot user data.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bot.on(<span class="string">"event"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (message.name === <span class="string">"pushsubscriptionadded"</span>) &#123;</span><br><span class="line">    pushPerUser[message.user.id] = message.value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>Catching messages going out and sending push notifications</strong></li></ul><p>In our current scenario, we want to send a push notification to the user each time there is a message sent by the bot. This can easily be done with an event called <strong>outgoing</strong>. You subscribe to this event then check to see if there is a push notification associated with the user the outgoing message is sent to. If we do, then we use the <strong>webPush.sendNotification()</strong> function from the web-push module. It will use the VAPID private key and the information from the push subscription to ask the appropriate web push server to send a notification to the browser. It knows which server to talk to thanks to the endpoint property we got from the client in the <strong>pushsubscriptionadded</strong> event call.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bot.on(<span class="string">"outgoing"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (pushPerUser &amp;&amp; pushPerUser[message.address.user.id]) &#123;</span><br><span class="line">    <span class="keyword">var</span> pushsub = pushPerUser[message.address.user.id];</span><br><span class="line"></span><br><span class="line">    webPush.sendNotification(&#123;</span><br><span class="line">        endpoint: pushsub.endpoint,</span><br><span class="line">        TTL: <span class="string">"1"</span>,</span><br><span class="line">        keys: &#123;</span><br><span class="line">        p256dh: pushsub.key,</span><br><span class="line">        auth: pushsub.authSecret</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, message.text);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Setting-up-push-in-the-client"><a href="#Setting-up-push-in-the-client" class="headerlink" title="Setting up push in the client"></a><strong>Setting up push in the client</strong></h1><p>This is the most interesting part. The first role of the client code is to register the service worker in the browser. To do this, we use the <strong>navigator.serviceWorker.register()</strong> function by giving it the service worker file name. This function return a Promise so you can chain a <strong>.then()</strong> function to execute some code once the service worker is registered. If the service worker is already registered, it will return the current one.</p><p>In our case, we take this opportunity to try to get the existing push notification manager subscription using <strong>registration.pushManager.getSubscription()</strong> (where registration is the service worker instance). If it does not exist, we will just have to create and return a new one create using <strong>registration.pushManager.subscribe()</strong> giving it an <strong>applicationServerKey</strong>. This applicationServerKey is the public key your server generated.</p><p>The subscription object we get from this is containing everything the server will need to send a notification to the client: the endpoint, the key and a secret.</p><p>In the current sample, all this is done in the <strong>setupPush</strong> function which takes a callback as a parameter and calls it back with the subscription information.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> setupPush = <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//first step is registering the service worker file</span></span><br><span class="line">  navigator.serviceWorker.register(<span class="string">'service-worker.js'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">registration</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//once the sw is registered, we try to get an existing push subscription </span></span><br><span class="line">    <span class="keyword">return</span> registration.pushManager.getSubscription()</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">subscription</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//if the subscription exists, then we pass is to the next chained .then function using return</span></span><br><span class="line">    <span class="keyword">if</span> (subscription) &#123;</span><br><span class="line">      <span class="keyword">return</span> subscription;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//if the subscription does not exists, we wrap the VAPID public key and create a new one</span></span><br><span class="line">  <span class="comment">//we pass this new once to the next chaind .then function using return</span></span><br><span class="line">  <span class="keyword">const</span> convertedVapidKey = urlBase64ToUint8Array(VAPID_PUBLICKEY);</span><br><span class="line">    <span class="keyword">return</span> registration.pushManager.subscribe(&#123;</span><br><span class="line">      userVisibleOnly: <span class="literal">true</span>,</span><br><span class="line">        applicationServerKey: convertedVapidKey</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">subscription</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//wrapping the key and secret</span></span><br><span class="line">  <span class="keyword">const</span> rawKey = subscription.getKey ? subscription.getKey(<span class="string">'p256dh'</span>) : <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">const</span> key = rawKey ? btoa(<span class="built_in">String</span>.fromCharCode.apply(<span class="literal">null</span>, <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(rawKey))) : <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">const</span> rawAuthSecret = subscription.getKey ? subscription.getKey(<span class="string">'auth'</span>) : <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">const</span> authSecret = rawAuthSecret ? btoa(<span class="built_in">String</span>.fromCharCode.apply(<span class="literal">null</span>, <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(rawAuthSecret))) : <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">const</span> endpoint = subscription.endpoint;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//we call back the code that asked to register push notification with the subscription information</span></span><br><span class="line"></span><br><span class="line">  done(&#123;</span><br><span class="line">    endpoint: subscription.endpoint,</span><br><span class="line">      key: key,</span><br><span class="line">      authSecret: authSecret</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This <strong>setupPush</strong> function is called right after we setup the Web Chat control. In the callback function we give to it, we use the Direct Line SDK to send an event of type <strong>pushsubscriptionadded</strong> to the bot, through the back channel.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">setupPush(<span class="function">(<span class="params">subscriptionInfo</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//once push notifications are setup, we get the subscription info back in this callback</span></span><br><span class="line">  <span class="comment">//we use the backchannel to send this info back to the bot using an 'event’ activity</span></span><br><span class="line">  botConnection</span><br><span class="line">    .postActivity(&#123;</span><br><span class="line">      type: <span class="string">"event"</span>,</span><br><span class="line">      name: <span class="string">"pushsubscriptionadded"</span>,</span><br><span class="line">      value: subscriptionInfo,</span><br><span class="line">      <span class="keyword">from</span>: &#123; <span class="attr">id</span>: botConnection.conversationId &#125; <span class="comment">//you could define your own userId here</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(<span class="function"><span class="params">id</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//we store the conversation id which we get back from postActivity(…) in the LocalStorage</span></span><br><span class="line">    <span class="comment">//we will need this in case of conversation resuming</span></span><br><span class="line">    localStorage.setItem(<span class="string">"pushsample.botConnection.conversationId"</span>, botConnection.conversationId);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>As you can see in the code above, we also store the <strong>conversationid</strong> in the browser <strong>localStorage</strong> so it will persist. We need this to be able to resume the conversation when the user clicks on a notification after the tab was closed. We handle this by adding a get parameter to the webpage url: <strong>?isBack=y</strong>. To resume a conversation using Direct Line, you just have to give back the <strong>conversationid</strong> as we do here:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (getParameterByName(<span class="string">"isback"</span>) === <span class="string">'y'</span>) &#123;</span><br><span class="line">  <span class="comment">//if we are resuming an existing conversation, we get back the conversationid from LocalStorage</span></span><br><span class="line">  botConnection = <span class="keyword">new</span> DirectLine.DirectLine(&#123;</span><br><span class="line">  secret: DIRECTLINE_SECRET,</span><br><span class="line">  conversationId: localStorage.getItem(<span class="string">"pushsample.botConnection.conversationId"</span>),</span><br><span class="line">  webSocket: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Listening-to-push-notification-in-the-background-with-the-service-worker"><a href="#Listening-to-push-notification-in-the-background-with-the-service-worker" class="headerlink" title="Listening to push notification in the background with the service worker"></a><strong>Listening to push notification in the background with the service worker</strong></h1><p>Last but not least, we need to write the code that will sit in the browser and handle push notification event even if the website is not opened.</p><ul><li><strong>Registering to push</strong></li></ul><p>The first piece of code is the one handling the push events.  To do this we use the self.addEventListener() function. It takes an event name (here “push”) and a callback. Each time a new push notification is received, this callback is going to be called. Here, we just call <strong>registration.showNotification()</strong> which displays it using a nice image and some text. The payload variable is built using the event data (which is the notification text we send from the server).</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'push'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line"><span class="comment">//creating the notification message (we should never be in the "no message” case)</span></span><br><span class="line"><span class="keyword">var</span> payload = event.data ? event.data.text() : <span class="string">'No message…'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//we show a notification to the user with the text message</span></span><br><span class="line"><span class="comment">//and an icon which is hosted as a resource on the website</span></span><br><span class="line">event.waitUntil(</span><br><span class="line">    self.registration.showNotification(<span class="string">'Chat bot!'</span>, &#123;</span><br><span class="line">      body: payload,</span><br><span class="line">      icon: <span class="string">'/web/img/thinking_morphi.png'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>Handling click on notifications</strong></li></ul><p>By default, clicking on a browser notification does nothing. You can add a custom behavior using the ‘notificationclick’ event in the service worker code. Its code is pretty straightforward as we list all the clients (a tab being also seen as a client), we look if one is displaying our web page. If yes and the focus is on another one, we switch to it. If yes and the focus is on it, we do nothing. And finally, if no, we reopen the page adding the <strong>?isBack=y</strong> parameter.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'notificationclick'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Android doesn’t close the notification when you click on it </span></span><br><span class="line">  <span class="comment">// See: http://crbug.com/463146 </span></span><br><span class="line">  event.notification.close();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This looks to see if the current is already open and </span></span><br><span class="line">  <span class="comment">// focuses if it is </span></span><br><span class="line"></span><br><span class="line">  event.waitUntil(</span><br><span class="line"></span><br><span class="line">    <span class="comment">//searching for all clients / tab opened in the browser</span></span><br><span class="line">    clients.matchAll(&#123;</span><br><span class="line">      type: <span class="string">"window"</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">clientList</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//going through the list of clients/tab and trying to find our website</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = ; i &lt; clientList.length; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> client = clientList[i];</span><br><span class="line"></span><br><span class="line">      <span class="comment">//if we find it, we put focus back on the tab</span></span><br><span class="line">      <span class="keyword">if</span> ((client.url.toLowerCase() == baseurl + <span class="string">'/web/index.html'</span> || client.url.toLowerCase() == baseurl + <span class="string">'/web/index.html?isback=y'</span>) &amp;&amp; <span class="string">'focus'</span> <span class="keyword">in</span> client)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> client.focus();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (clients.openWindow) &#123;</span><br><span class="line">      <span class="comment">//if we did not find it, then we re-open it with the isback=y parameter</span></span><br><span class="line">      <span class="comment">//to ensure that we resume the conversation using the conversationid</span></span><br><span class="line">      <span class="keyword">return</span> clients.openWindow(<span class="string">'/web/index.html?isback=y'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="What’s-next"><a href="#What’s-next" class="headerlink" title="What’s next?"></a><strong>What’s next?</strong></h1><p>Using <strong>web push notifications</strong> in a web chat control is obvious. There are a lot of other cases in which it can be really helpful. It can help you notify someone about a trending news, an update on your website or a new friend connection.</p><p>Understanding how web notifications are working and adding them to one of your projects is a great first step. Implementing more PWAs’ features can be simpler than you think. At Microsoft, we have recently introduced <a href="http://preview.pwabuilder.com/generator" target="_blank" rel="noopener">PWA Builder</a>, which simplifies and automates building a manifest so it’s as easy as providing resources and a description for your app. It will also help you in the process of adding service workers features to your app, such as cache management. In a future version, it will certainly also help you create the service worker code needed to handle push notifications.</p><p>In a very near future, service workers will be available in <a href="https://developer.microsoft.com/en-us/microsoft-edge/platform/status/serviceworker/?q=service%20workers" target="_blank" rel="noopener">every modern browser</a>: <strong>take this opportunity and be part of the Progressive Web Apps world!</strong></p><blockquote><p>If you have any question about this blog article, feel free to contact me on twitter: <a href="https://twitter.com/meulta" target="_blank" rel="noopener">@meulta</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;This blog article is explaining how to setup web push notifications on a bot framework web chat control. For this, we will use servic
      
    
    </summary>
    
      <category term="Bots" scheme="http://yoursite.com/categories/Bots/"/>
    
      <category term="Progressive web apps" scheme="http://yoursite.com/categories/Bots/Progressive-web-apps/"/>
    
      <category term="Web" scheme="http://yoursite.com/categories/Bots/Progressive-web-apps/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>How to debug your bot with Vorlon.js</title>
    <link href="http://yoursite.com/2017/01/25/how-to-debug-your-bot-with-vorlon-js/"/>
    <id>http://yoursite.com/2017/01/25/how-to-debug-your-bot-with-vorlon-js/</id>
    <published>2017-01-26T03:15:39.000Z</published>
    <updated>2019-01-15T23:23:56.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bots"><a href="#Bots" class="headerlink" title="Bots."></a><strong>Bots.</strong></h1><p>They are everywhere. Everyone talks about it and everyone wants to have one.</p><p>And <strong>you</strong>, developer, always dreamt of creating your own. An artificial intelligence that you could shape and which could rule the web and, later, even the world.</p><p>Well not so fast. It is not that easy. It is getting easiER but still requires work and knowledge in various areas.</p><p>A bot (or Conversational Agent) is basically a <strong>web API</strong>. This web API is plugged to a conversation channel such as Skype, Facebook or Kik and do 2 things:</p><ul><li>Receiving messages from the user</li><li>Doing stuff and sending a message to the user</li></ul><p>Receiving and sending messages is not really the complex part. The hard piece of code is the one that is going to make your <strong>bot look intelligent</strong>. And there are a lot of challenges here, from <strong>understanding</strong> what the user wants, to managing the data and the <strong>conversation flow</strong> and history.</p><p>At Microsoft, we are working on solutions to help you on all those aspects:</p><ul><li>The <a href="https://dev.botframework.com/" target="_blank" rel="noopener">bot framework</a> helps you <ul><li>Create and maintain a conversation state with the Bot Builder sdk</li><li>Expose your bot to multiple conversation channel with no or little configuration</li></ul></li><li><a href="http://luis.ai" target="_blank" rel="noopener">LUIS.ai</a> is here to help understanding the structure of a sentence. It is using NLP (<a href="https://en.wikipedia.org/wiki/Natural_language_processing" target="_blank" rel="noopener">Natural Language Processing</a>) to give you a hint about what the human user intent is. This way, you can try and answer something appropriate and go to one or another path of your conversation.</li><li><a href="https://azure.microsoft.com/en-us" target="_blank" rel="noopener">Microsoft Azure</a> contains a huge list of services that are helpful here. Obviously you can think of <a href="https://docs.microsoft.com/en-us/azure/app-service-web/" target="_blank" rel="noopener">web apps</a> or <a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-overview" target="_blank" rel="noopener">functions</a> to host your bot API but there also is <a href="https://www.microsoft.com/cognitive-services/en-us/apis" target="_blank" rel="noopener">Cognitive Services</a> for image analysis, emotion analysis, face recognition and so on. <a href="https://docs.microsoft.com/en-us/azure/search/" target="_blank" rel="noopener">Azure Search</a> is a component that has proven to be a great ally in organizing and finding data for bots.</li></ul><p>I am sure you get it, creating a bot involves a lot of tools, languages and features. The goal in this post is not to go deep into details on how you create a bot so I will stop here. You can find a lot of great content here :  <a href="https://docs.botframework.com" target="_blank" rel="noopener">https://docs.botframework.com</a></p><h1 id="Bot-Builder"><a href="#Bot-Builder" class="headerlink" title="Bot Builder"></a>Bot Builder</h1><p>The <a href="https://docs.botframework.com/en-us/" target="_blank" rel="noopener">bot builder</a> is an <strong>SDK</strong> that is available for<strong> <a href="https://docs.botframework.com/en-us/csharp/builder/sdkreference/" target="_blank" rel="noopener">.NET</a> and <a href="https://docs.botframework.com/en-us/node/builder/overview/#navtitle" target="_blank" rel="noopener">Node.js</a></strong>. It is helping you creating and maintaining the conversation state. You have to think of a bot as a list of paths that the conversation can take. If you create a IMDB bot for instance, it might be able to talk about movies or  actors. When you talk about actors with it, you also can have various sub-subjects like the actor&#8217;s list of movies or other stuff that he or she did. The way we design conversations today is by creating hierarchical dialogs: &#8220;<em>First the user can ask for an actor and get his description, then from there the user can ask for the actors&#8217; age, or movies</em>&#8220;. Usually you will have a small dialog trees but even there it can be complicated to understand. (Even if you are its initial coder 😉</p><p>In your bot, dialogs are going to start other dialogs and this is going to create a <strong>dialog stack</strong>. It is basically a way for the Bot Builder SDK to remember the state of the conversation and what to do next.</p><p>When I first started to code bots, I did not really pay attention to what this dialog stack was and how it worked. Sometimes i was trying to fix issues and understand what was happening using step by step debugging. That is useful and can help to a limit where you need to have a more visual way of seeing this stack.</p><p>We realized that with <a href="http://twitter.com/davrous" target="_blank" rel="noopener">David</a> and that is why we worked with the <strong>Microsoft bot framework team</strong> to create a plugin in Vorlon.js that will <strong>help bot developers understand what is happening in their code</strong>.</p><h1 id="The-Bot-Framework-Inspector-plugin-in-Vorlon-js"><a href="#The-Bot-Framework-Inspector-plugin-in-Vorlon-js" class="headerlink" title="The Bot Framework Inspector plugin in Vorlon.js"></a>The Bot Framework Inspector plugin in Vorlon.js</h1><blockquote><p>You do not know how to setup Vorlon.js? It is really easy. Here is a step by step guide: <a href="https://github.com/meulta/VorlonBotLab" target="_blank" rel="noopener">https://github.com/meulta/VorlonBotLab</a></p></blockquote><p>Vorlon.js is a tool designed to remote inspect JavaScript code. You can use it for front websites when it is hard to get F12 tools working (on a mobile, a tablet, a Tesla car, a connected fridge or whatever). You can also use it to inspect Node.js processes. Of course you can debug Node.js code step by step using tools like Visual Studio Code but Vorlon.js purpose is to help you using <strong>dedicated plugins</strong>. We have one for NodeJS, another one for XHR requests, one for Express.js, and now: One for the bot builder SDK.</p><p>This only work for the node.js version of the SDK for now.</p><p><em><strong>Note</strong>: The current version is in Beta, so please do not pay too much attention to the design. We will fix that when we are sure we implemented useful features for you, bot devs! 🙂</em></p><div style="width: 640px;" class="wp-video"><br>  <video class="wp-video-shortcode" id="video-220-5" width="640" height="248" loop="1" autoplay="1" preload="metadata" controls="controls"><source type="video/mp4" src="/media/BotInspector-1.mp4?_=5"><a href="/media/BotInspector-1.mp4">BotInspector-1.mp4</a></video><br></div><p>&nbsp;</p><p>The plugin is splitted into 3 parts. The upper left one is showing you the list of dialogs that are declared in your bot. Each line is a dialog and its id is composed of the library name (* if you do not have any library) and the actual dialog name.</p><p><img class="alignnone wp-image-222" src="/media/plugin-botframeworkinspector-1.jpg" alt="" width="619" height="193" sizes="(max-width: 619px) 100vw, 619px"></p><p>On the right you can see the list of steps you have in each dialog. If you let your mouse over one of them you will have a quick view of its code.</p><p><img class="alignnone wp-image-223" src="/media/plugin-botframeworkinspector-2.jpg" alt="" width="606" height="217" sizes="(max-width: 606px) 100vw, 606px"></p><p>On the lower left part of the plugin, you can see the live view of events happening inside your bot. You have to actually start interacting with it to see things here 🙂</p><p>In the botbuilder, each <strong>user entry</strong> generates one or more <strong>events</strong>. These events are linked to your bot code. For instance, each time a dialog start, there is a <strong>BeginDialog</strong> event happening. You can see all these in this view. When the bot builder is done with all the events generated by one user entry, it automatically <strong>save the state</strong>. This end up launching a FinalSate event.</p><p>For each event, you can see the current <strong>dialog stack</strong>. The dialog stack is the list of dialogs that are currently started. One dialog starts another on, which starts another one, and so on. The dialog usually only ends when EndDialog is called. The dialog stack state is memorized between 2 user entries.</p><p><img class="alignnone wp-image-224" src="/media/plugin-botframeworkinspector-3.jpg" alt="" width="607" height="346" sizes="(max-width: 607px) 100vw, 607px"></p><p>The last part of the plugin is the <strong>live graph</strong>. It is generated by the bot execution and it thightly coupled with the event view. It is built live while you are using the bot. It is interesting to have a graphical overview of what is happening inside your bot and can help you discover and fix dialog stack issues.</p><p>Whenever you have 0 dialogs in the stack or you call endConversation, a new graph is created on the right.</p><p><img class="alignnone wp-image-225" src="/media/plugin-botframeworkinspector-4.jpg" alt="" width="632" height="261" sizes="(max-width: 632px) 100vw, 632px"></p><h1 id="What-8217-s-next"><a href="#What-8217-s-next" class="headerlink" title="What&#8217;s next"></a>What&#8217;s next</h1><p>The next features we have in mind are mainly:</p><ul><li>Being able to save a specific state at a given moment in time and restore it</li><li>Making data editable from the dashboard</li><li>Making it work for .NET</li><li>Design improvements</li><li>Handling more events from the bot builder</li></ul><p>The only way to make this tool great is to test it accross a huge number of developers.</p><p>That is where you can help!</p><p><strong>Try it out today</strong> and send feedbacks to either <a href="http://twitter.com/meulta" target="_blank" rel="noopener">me</a> or <a href="http://twitter.com/davrous" target="_blank" rel="noopener">davrous</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Bots&quot;&gt;&lt;a href=&quot;#Bots&quot; class=&quot;headerlink&quot; title=&quot;Bots.&quot;&gt;&lt;/a&gt;&lt;strong&gt;Bots.&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;They are everywhere. Everyone talks about i
      
    
    </summary>
    
      <category term="Bots" scheme="http://yoursite.com/categories/Bots/"/>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Bots/Node-js/"/>
    
      <category term="Vorlon.js" scheme="http://yoursite.com/categories/Bots/Node-js/Vorlon-js/"/>
    
    
      <category term="Bots" scheme="http://yoursite.com/tags/Bots/"/>
    
  </entry>
  
  <entry>
    <title>Debug your dom history using Vorlon.js</title>
    <link href="http://yoursite.com/2016/11/15/debug-your-dom-history-using-vorlon-js/"/>
    <id>http://yoursite.com/2016/11/15/debug-your-dom-history-using-vorlon-js/</id>
    <published>2016-11-16T00:53:05.000Z</published>
    <updated>2019-01-15T23:22:35.439Z</updated>
    
    <content type="html"><![CDATA[<p>Last version of Vorlon.js was focused on debugging JavaScript on the server thanks to the <a href="https://meulta.github.io/2016/07/05/remote-inspect-node-js-and-express-with-vorlon-js/" target="_blank" rel="noopener">Node.js and Express.js plugins</a>.</p><p>We have been busy since then working tightly with <a href="https://twitter.com/fremycompany" target="_blank" rel="noopener">Francois Remy</a> to help you debug DOM even easier than it already is. And it is now available in <a href="https://www.npmjs.com/package/vorlon" target="_blank" rel="noopener">Vorlon.js 0.4</a> !</p><p><strong>Introducing the DOM Timeline plugin</strong></p><p>Modern web interfaces are more and more complex. JavaScript enables you to do a lot of changes in your DOM. How many times you hide, show or change an HTML element? And how many times you have hard time to debug these changes when something is not going well?</p><p>The goal of the DOM Timeline is to let you track the history of DOM events. You can record and then have a look at every change, add or removal that happened while you used the debugged website.</p><div style="width: 640px;" class="wp-video"><br>  <video class="wp-video-shortcode" id="video-208-4" width="640" height="285" preload="metadata" controls="controls"><source type="video/mp4" src="/media/Vorlon-Domtimeline.mp4?_=4"><a href="/media/Vorlon-Domtimeline.mp4">Vorlon-Domtimeline.mp4</a></video><br></div><p>As you can see on the video, you are also able to go back in history and the website is going to be exactly as it was at that specific point in time.</p><p><strong>Next steps</strong></p><p>We are now in the process of getting more stuff done on the server debugging side.</p><p>Our next goal is to simplify <strong>bots developpers</strong> life!</p><ul><li>Vorlon.js <strong>website</strong>: <a href="http://vorlonjs.io" target="_blank" rel="noopener">http://vorlonjs.io</a></li><li>Vorlon.js <strong>github</strong> repo: <a href="http://github.com/microsoftdx/vorlonjs" target="_blank" rel="noopener">http://github.com/microsoftdx/vorlonjs</a></li><li>Vorlonjs <strong>npm</strong> package: <a href="https://www.npmjs.com/package/vorlon" target="_blank" rel="noopener">https://www.npmjs.com/package/vorlon</a></li></ul><p>Thanks to <a href="http://www.techsmith.fr/camtasia.html" target="_blank" rel="noopener">Camtasia</a> for their help on the video!</p><blockquote><p>If you have any question about Vorlon.js or this article, feel free to contact me on twitter : <a href="http://twitter.com/meulta" target="_blank" rel="noopener">http://twitter.com/meulta</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Last version of Vorlon.js was focused on debugging JavaScript on the server thanks to the &lt;a href=&quot;https://meulta.github.io/2016/07/05/re
      
    
    </summary>
    
      <category term="Vorlon.js" scheme="http://yoursite.com/categories/Vorlon-js/"/>
    
      <category term="Web" scheme="http://yoursite.com/categories/Vorlon-js/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>Remote inspect Node.js and Express with Vorlon.js</title>
    <link href="http://yoursite.com/2016/07/05/remote-inspect-node-js-and-express-with-vorlon-js/"/>
    <id>http://yoursite.com/2016/07/05/remote-inspect-node-js-and-express-with-vorlon-js/</id>
    <published>2016-07-06T05:44:39.000Z</published>
    <updated>2019-01-15T23:21:26.211Z</updated>
    
    <content type="html"><![CDATA[<p>Here we are !</p><p>A few weeks after the last release we are excited to ship Vorlon.js 0.3 to the world. 🙂</p><p>In this version we focused to make node.js inspection better with Vorlon.js. Special thanks to <a href="https://twitter.com/totose_" target="_blank" rel="noopener">Sofiene Djebali</a> who is doing an awesome contribution to Vorlon.js!</p><p>We already added a preview of this capability in the 0.2 version, you can read more about it here : <a href="http://meulta.com/en/2016/02/01/vorlon-js-0-2-1-is-out/" target="_blank" rel="noopener">http://meulta.com/en/2016/02/01/vorlon-js-0-2-1-is-out/</a></p><p>&nbsp;</p><p><strong>Why would I want to use Vorlon.js to inspect my node.js app ?</strong></p><p>The idea behind this is to make you capable of getting all the information you need to debug a node.js app remotely.</p><p>We all know Tools to debug locally and we also know some of them that work remotely. What we are aiming is to create an easy-to-use set of Tools specialized on various node.js modules:</p><ol><li>In version 0.2 we added the possibilty to inspect a node.js app with Vorlon.js. To do this you only have to <strong>npm install</strong> and <strong>require</strong> the vorlonjs-node-wrapper npm module. Then you can start the client part of Vorlon.js Inside your node app as documented here : <a href="http://vorlonjs.io/documentation/#debugging-nodejs-applications" target="_blank" rel="noopener">http://vorlonjs.io/documentation/#debugging-nodejs-applications</a>. Thanks to this, you can use Vorlon.js plugins</li><li>Still in version 0.2 we made the standard <strong>Interactive Console</strong>, <strong>Object Explorer</strong> and <strong>XHR</strong> plugins working in node.js inspection scenarios</li><li>In version 0.3 we are bringing you 2 new plugins specifically crafted for node.js debugging <ol><li>Node.js</li><li>Express.js</li></ol></li></ol><p>We plan to add more of these specialized plugin to help you going through your worst debugging cases! 🙂</p><p>To activate these, you just have to go in the settings from the Vorlon.js Dashboard page.</p><div style="width: 640px;" class="wp-video"><br>  <!--[if lt IE 9]><![endif]--><video class="wp-video-shortcode" id="video-197-1" width="640" height="384" loop="1" autoplay="1" preload="metadata" controls="controls"><source type="video/mp4" src="/media/settings.mp4?_=1"><br><br>  <a href="/media/settings.mp4">settings.mp4</a></video><br></div><p>&nbsp;</p><p><strong>The Node.js plugin</strong></p><p>This one is the main that you want to use in a remote node debug scenario. As the Console, XHR and Object Explorer one it can be use for any node.js apps.</p><p>It is composed of 3 panes:</p><ul><li>One displaying the hierarchy of modules you required inside your app</li><li>One showing a graph of your app memory usage</li><li>One giving you information about the node process</li></ul><div style="width: 640px;" class="wp-video"><br>  <video class="wp-video-shortcode" id="video-197-2" width="640" height="384" loop="1" autoplay="1" preload="metadata" controls="controls"><source type="video/mp4" src="/media/nodejsdebugging.mp4?_=2"><a href="/media/nodejsdebugging.mp4">nodejsdebugging.mp4</a></video><br></div><p>&nbsp;</p><p><strong>The Express.js plugin</strong></p><p>To be able to use this plugin, you obviously have to use Express.js in your node app. You also have to declare a variable so that Vorlon.js is able to access the Express informations:</p><p>_EXPRESS_VORLONJS = app;_</p><p>Once this is done, you will have access to :</p><ul><li>The list of routes configured in your express app</li><li>The requests that has been made and that hit your routes</li><li>Your session variables</li><li>And the express local configuration</li></ul><div style="width: 640px;" class="wp-video"><br>  <video class="wp-video-shortcode" id="video-197-3" width="640" height="384" loop="1" autoplay="1" preload="metadata" controls="controls"><source type="video/mp4" src="/media/expressjsdebug.mp4?_=3"><a href="/media/expressjsdebug.mp4">expressjsdebug.mp4</a></video><br></div><p>&nbsp;</p><p><strong>Next steps</strong></p><p>We are now going to start a huge refactoring process to be sure that the server part catches up with our plugin ambitions. We have a lot of great stuff in our roadmap. We will share this soon, stay tuned ! 🙂</p><p>If you have any idea of improvements or ideas of plugins that might be useful in Node.js remote inspection scenario, reach out with the team via twitter or slack 🙂</p><p>To get this version you can:</p><ul><li>Clone our <a href="https://github.com/MicrosoftDX/Vorlonjs" target="_blank" rel="noopener">github repo</a></li><li>run: npm install vorlon (<a href="https://www.npmjs.com/package/vorlon" target="_blank" rel="noopener">https://www.npmjs.com/package/vorlon</a>)</li><li>Clic on the <a href="https://github.com/MicrosoftDX/Vorlonjs#deploy-on-azure" target="_blank" rel="noopener">Deploy on azure button</a> on the Github repo readme page</li><li>Use the <a href="https://hub.docker.com/r/vorlonjs/dashboard/" target="_blank" rel="noopener">Docker image</a> brought to you by <a href="http://twitter.com/jcorioland" target="_blank" rel="noopener">Julien Corioland</a></li></ul><blockquote><p>If you have any question about Vorlon.js or this article, feel free to contact me on twitter : <a href="http://twitter.com/meulta" target="_blank" rel="noopener">http://twitter.com/meulta</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Here we are !&lt;/p&gt;
&lt;p&gt;A few weeks after the last release we are excited to ship Vorlon.js 0.3 to the world. 🙂&lt;/p&gt;
&lt;p&gt;In this version we f
      
    
    </summary>
    
      <category term="Express.js" scheme="http://yoursite.com/categories/Express-js/"/>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Express-js/Node-js/"/>
    
      <category term="Vorlon.js" scheme="http://yoursite.com/categories/Express-js/Node-js/Vorlon-js/"/>
    
    
  </entry>
  
  <entry>
    <title>One year of Vorlon.js</title>
    <link href="http://yoursite.com/2016/06/04/one-year-of-vorlon-js/"/>
    <id>http://yoursite.com/2016/06/04/one-year-of-vorlon-js/</id>
    <published>2016-06-05T00:40:26.000Z</published>
    <updated>2019-01-15T23:16:08.021Z</updated>
    
    <content type="html"><![CDATA[<p>It has already been one year that we started Vorlon.js. One year full of feedbacks, new features, a lot of talks in meetups and conferences. It is really a pleasure to talk with devs and Vorlon.js users to understand what they like about it or what they would like to have there! 🙂</p><p><img class="wp-image-184 aligncenter" src="/media/vorlon.gif" alt="vorlon ultra quick demo" width="450" height="316"></p><p>As David explained <a href="https://www.eternalcoding.com/?p=1894" target="_blank" rel="noopener">here</a> we ended up creating Vorlon.js to help web front devs in their remote debug scenarios, particularly on <strong>phones and tablets</strong>. When we released the first version, it only contained 4 plugins.</p><p>Today, we have more than 10 of them. They debug various things like <strong>Angular.js, Office Addins</strong>, and more. What is really interesting is that we have different features than classic F12 tools more specialized to some languages or rendering frameworks. Vorlon.js is easy to extend and a lot of people are doing it and contributing!</p><p>In only a few month, we managed to create a good F12 like experience. <strong>I am proud of that, and I am proud of the team </strong>🙂</p><p>At the beginning of this year, we thought that front web debugging was not enough. Server development with Node.js obviously uses JavaScript. And we were already able to inspect and debug JavaScript. This is why we decided to add support for <a href="http://vorlonjs.com/documentation/#debugging-nodejs-applications" target="_blank" rel="noopener">node.js debugging</a>. Now, you can use a node module inside your server apps and get the Interactive Console, the <strong>XHR Panel</strong> and the <strong>Object Explorer</strong> to inspect and debug your running code.</p><p><img class="wp-image-189 aligncenter" src="/media/4846.image_5178F222.png" alt="4846.image_5178F222" width="539" height="303" sizes="(max-width: 539px) 100vw, 539px"></p><p><strong>Where are we going ?</strong></p><p>In the next few months we are going to improve the support for <strong>Node.js debugging</strong>. A lot is coming in this area. We are working on Node.js and Express.js dedicated plugins. We still need to improve the stability of node.js debugging: this is pretty new and some things are not identical to front debugging and inspection.</p><p>We want to get an <strong>hosted Vorlon.js platform</strong>. Right now you have to locally install the server to use it (or install it somewhere in the cloud). It is not a hard task but us developers are lazy folks: the more is done for us the better ;). You can simply picture this as a webpage where you can click on a &#8220;I want an online Vorlon.js server&#8221; button and get it instantly, ready to use. I really hope we will be ready to release this soon!</p><p>We are going to do a lot of refactoring on the server side. We barely changed this since the first version to focus on the plugins and user experience part. We want to clean it to make it easier to change in the future.</p><p>We also have some awesome projects we will be able to talk about soon! 🙂</p><p><strong>What is new in the last version?</strong></p><p>A couple of weeks ago, we released the 0.2.2 version. It contains some great features and mainly 2 new plugins.</p><ul><li><strong>The Universal Windows Platform plugin</strong></li></ul><p>It is possible to create a first class Windows application using HTML and JavaScript. You have direct access to the WinRT API and your app gets native performances by design. It is not running as a webview, but really by Windows core. This Vorlon.js plugin helps you understand better your code behavior. You have access to the CPU and Memory usage and more usefull infos.</p><p><img class="size-full wp-image-186 aligncenter" src="/media/sans-titre.png" alt="sans-titre" width="630" height="332" sizes="(max-width: 630px) 100vw, 630px"></p><ul><li><strong>Office Addins plugin</strong></li></ul><p><strong>Office is everywhere</strong>. You can get it on your <strong>iPhone</strong>, your <strong>Android</strong>, your <strong>iPad</strong>, your <strong>Mac</strong>, your <strong>PC</strong>, your [<em>put whatever you want here</em>]. And you are not alone. A lot of us have office on our devices. Office 365 is a plateform behind the Office apps and softwares. It is a mail, file, contact, calendar, app server for enterprises.</p><p>And it matters. A <strong>lot</strong>.</p><p>A recent study showed that Office 365 is the Software as a Service app the most used in the world. If you never consider creating apps for it, you should. By creating app I mean an addin: it can be a pane inside the email composition interface or a tool inside Excel, or something inside Word. To create it you use web front tools that you already know. The addin is hosted somewhere and displayed inside every version of office you want (on ipad, android, etc.).</p><p>So, why am I talking to you about this? Because when it comes to debugging Office addins on tablets or phone, there are no great options. Or at least, there WAS! 😉</p><p>You can use all the features from Vorlon.js to debug the DOM, understand an issue using the console or the object explorer, improve performances thanks to the Network monitor, etc. You can also use the new Office Addin plugin. It helps you get access to the whole office addin API (which is JavaScript of course) and call some of them, get configuration values and more!</p><p><img class="size-full wp-image-187 aligncenter" src="/media/2313.image_099DC3E5.png" alt="2313.image_099DC3E5" width="800" height="493" sizes="(max-width: 800px) 100vw, 800px"></p><p>You can read more about this and how to use it here: <a href="https://blogs.msdn.microsoft.com/mim/2016/02/18/vorlonjs-plugin-for-debugging-office-addin" target="_blank" rel="noopener">https://blogs.msdn.microsoft.com/mim/2016/02/18/vorlonjs-plugin-for-debugging-office-addin</a></p><ul><li><strong>User interface for Config editing !</strong></li></ul><p>All the Vorlon.js configuration is done through the config.json file. It is not always handy to change it when you installed Vorlon from the <strong>npm</strong> package or if you deployed it on a remote server. We now have a user interface to be able to edit the plugins list. You can <strong>activate / deactivate a plugin</strong>, change its <strong>name</strong> or choose on which <strong>pane</strong> it will be displayed. You can also see an icon indicating you if you can use it in Node.js debug scenarios.</p><p><img class="wp-image-188 aligncenter" src="/media/CiFYYPHW0AAGl9X.jpg" alt="CiFYYPHW0AAGl9X" width="799" height="379" sizes="(max-width: 799px) 100vw, 799px"></p><p>You can read more about this in the readme file here : <a href="https://github.com/MicrosoftDX/Vorlonjs/blob/master/whatsnew.md" target="_blank" rel="noopener">https://github.com/MicrosoftDX/Vorlonjs/blob/master/whatsnew.md</a></p><p><strong>You want to help ?</strong></p><p>The more people we are the better! If you have an idea of plugin, or if you want to chat with us about Vorlon, feel free to join us on slack.</p><blockquote><p><span style="text-align: center;">If you have any question about this article, feel free to contact me on <a href="http://twitter.com/meulta" target="_blank" rel="noopener">http://twitter.com/meulta</a> 🙂</span></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;It has already been one year that we started Vorlon.js. One year full of feedbacks, new features, a lot of talks in meetups and conferenc
      
    
    </summary>
    
      <category term="Vorlon.js" scheme="http://yoursite.com/categories/Vorlon-js/"/>
    
      <category term="Web" scheme="http://yoursite.com/categories/Vorlon-js/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>Vorlon.js 0.2.1 is out !</title>
    <link href="http://yoursite.com/2016/02/01/vorlon-js-0-2-1-is-out/"/>
    <id>http://yoursite.com/2016/02/01/vorlon-js-0-2-1-is-out/</id>
    <published>2016-02-01T22:12:08.000Z</published>
    <updated>2019-01-15T19:28:32.059Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>If you have any question about this article or Vorlon.js, feel free to contact me on twitter: <a href="http://twitter.com/meulta" target="_blank" rel="noopener">http://twitter.com/meulta</a></em> </p></blockquote><p>3 month ago, we released the <a href="http://blogs.msdn.com/b/emargraff/archive/2015/10/29/vorlon-js-0-1-0-is-out.aspx" target="_blank" rel="noopener">0.1 version of</a> <a href="http://vorlonjs.io" target="_blank" rel="noopener">Vorlon.js</a>. We added a lot of great new features such as the Unit Test, the Device Info and the Best Practices plugin. One main improvement for this version was certainly the HTTP proxy which helps you debug a website using Vorlon.js without having to change its source code (<a href="http://vorlonjs.io/documentation/#vorlon-proxy" title="http://vorlonjs.io/documentation/#vorlon-proxy" target="_blank" rel="noopener">http://vorlonjs.io/documentation/#vorlon-proxy</a>).</p><p align="center"><br>  <strong>Today we are thrilled to tell you that 0.2.1 is out !</strong><br></p><p align="center"><br>  <img src="http://ekladata.com/WN5Rhx9M1LOKiQYTgbhSTuVC5gQ.jpg" alt="Afficher l'image d'origine" width="288" height="267"><br></p><p><em>Note: if you (still? ;-)) don’t know what Vorlon.js is, you must</em> <a href="https://blogs.msdn.microsoft.com/eternalcoding/2015/04/29/why-we-made-vorlon-js-and-how-to-use-it-to-debug-your-javascript-remotely/" target="_blank" rel="noopener"><em>read this</em></a><em>, or</em> <a href="https://channel9.msdn.com/Shows/codechat/046" target="_blank" rel="noopener"><em>watch this</em></a>_._</p><p align="left"><br>  What makes open source projects so interesting is as much the product itself as the strong community built around it. The 0.1 version has been created by a lot of people around the world and so did the new release we are announcing in this blog post.<br></p><p align="center"><br>  <strong>We really want to thank you all</strong>. Sharing and working together is what makes the web so amazing!<br></p><p>Amoung a lot of improvements, the 4 main new features in 0.2.1 are :</p><ul><li><strong>Accessibility rules</strong> added in the Best Practice Analyser (thanks to Deque and their wonderful project : aXe)</li><li><a href="http://mcnextpost.com/2015/12/01/how-to-use-vorlon-js-desktop/" target="_blank" rel="noopener">Vorlon.js Desktop : a new way to install Vorlon</a></li><li><strong>Node.js</strong> process debugging !</li><li>We setup some <a href="http://blogs.technet.com/b/devops/archive/2016/01/12/vorlonjs-a-journey-to-devops-introducing-the-blog-post-series.aspx" target="_blank" rel="noopener">DevOps practices</a> to help us test and deploy our staging environments</li></ul><p>I will go through a quick description of all the improvements made to Vorlon.js in this article. Other blog posts will come later this week about these features.</p><p># </p><h1 id="Node-js-debugging-Vorlon-js-server-side"><a href="#Node-js-debugging-Vorlon-js-server-side" class="headerlink" title="Node.js debugging: Vorlon.js server side !"></a>Node.js debugging: Vorlon.js server side !</h1><p>We first made Vorlon.js for a specific task: <strong>helping web developers</strong> to debug their JavaScript, HTML and CSS code running on a <strong>mobile</strong>. It was first like an F12 alternative for remote debugging.</p><p>We quickly understood that it could be <strong>more than that</strong>. The great work made by the community brought us specialized plugins like <strong>Angular.js inspector</strong> or <strong>QUnit runner</strong>. At this time, Vorlon.js was more and more a relevant tool for web (remote) desktop debugging, bringing additionnal features to classics F12 tools.</p><p>As Vorlon.js is built on top of JavaScript, we start wondering if it could be a good idea to use it to also debug <strong>Node.js apps</strong>. Obviously some plugins such as DOM Explorer or Modernizr might not be relevant in this case but what about the Console or the Object Explorer? In a world where Node.js processes are running <strong>everywhere in the cloud and on IOT objects</strong>, remote debugging could really be helpful, right? 🙂</p><p>Guess what ? It is now possible!</p><p>All you have to do is requiring a new NPM package we created:</p><p><strong>npm install vorlon-node-wrapper</strong></p><p>Requiring it in your project:</p><p><strong>var vorlonWrapper = require(&#8220;vorlon-node-wrapper&#8221;);</strong></p><p>Starting the Vorlon for Node client by giving it your Vorlon.js instance:</p><p><strong>vorlonWrapper.start(serverUrl, dashboardSession, false);</strong></p><p>And voila! Each time you will start your node.js process, you will have remotely access to the Console, the Object Explorer, and the XHRPanel.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/4846.image_5178F222.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/3414.image_thumb_62EBE3AB.png" alt="image" width="712" height="401" border="0"></a></p><p>Here is the documentation for this: <a href="http://vorlonjs.io/documentation/#debugging-nodejs-applications" title="http://vorlonjs.io/documentation/#debugging-nodejs-applications" target="_blank" rel="noopener">http://vorlonjs.io/documentation/#debugging-nodejs-applications</a></p><h1 id="Vorlon-js-Desktop-another-way-to-get-our-tool"><a href="#Vorlon-js-Desktop-another-way-to-get-our-tool" class="headerlink" title="Vorlon.js Desktop: another way to get our tool"></a>Vorlon.js Desktop: another way to get our tool</h1><p>As you can read on our <a href="http://vorlonjs.io/documentation/" target="_blank" rel="noopener">documentation web site</a>, Vorlon can be installed in many different ways. You can install it as an <strong>npm</strong> package, clone our GitHub repo or even auto deploy to Microsoft Azure. In the web community these are the common ways to get new tools on your dev box. Some people don’t know or don’t want to learn about these. Some of them don’t want to mess with command lines (yep, it happens ! :)).</p><p>We want Vorlon to be accessible to the most people we can. This is why we (and more precisely <a href="https://twitter.com/gleborgne" target="_blank" rel="noopener">Guillaume Leborgne</a> and <a href="https://twitter.com/Mehdi_La" target="_blank" rel="noopener">Mehdi Lahlou</a>, kudos to them!) decided to work on a standalone installer. It currently works on Mac and Windows.</p><p>Guillaume wrote a great article about this, feel free to take a look at it : <a href="http://mcnextpost.com/2015/12/01/how-to-use-vorlon-js-desktop/" title="http://mcnextpost.com/2015/12/01/how-to-use-vorlon-js-desktop/" target="_blank" rel="noopener">http://mcnextpost.com/2015/12/01/how-to-use-vorlon-js-desktop/</a></p><p><img src="https://mcnextpost.files.wordpress.com/2015/12/screen.png?w=945" alt="screen.PNG" width="677" height="603"></p><h1 id="Vorlon-js-team-went-DevOps"><a href="#Vorlon-js-team-went-DevOps" class="headerlink" title="Vorlon.js team went DevOps"></a>Vorlon.js team went DevOps</h1><p>Well. DevOps means a lot of stuff.</p><p>It is about organization, people, tools, practices. As every team on the planet, we always need to improve what we do to release better code, faster and more efficiently. None of us are full time on this project, a lot of the work is done on our free (and passionate!) time. That’s why we love to optimize what we do to be able to achieve more.</p><p>This first iteration we did on DevOps covers the basics:</p><ul><li>We organized better into clear releases using Issues</li><li>We activated automated checks on commits and pull requests</li><li>We enabled automated deployment of our internal staging environment</li><li>We automated the creation of a ready to use Docker Vorlon.js image</li><li>And more !</li></ul><p>A lot of this is using <strong>Visual Studio Team Services</strong> and its integration capabilities with GitHub:</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/7144.image_69A17DDF.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/5123.image_thumb_769B5DF0.png" alt="image" width="639" height="125" border="0"></a></p><p>DevOps is about <strong>continuous improvement.</strong> This is why it is a work in progress. <a href="https://twitter.com/jcorioland" target="_blank" rel="noopener">Julien Corioland</a> did a great work on that and is sharing all of it with you in a blog posts series. It is a must read!</p><p>You can start from here: <a href="http://blogs.technet.com/b/devops/archive/2016/01/12/vorlonjs-a-journey-to-devops-introducing-the-blog-post-series.aspx" title="http://blogs.technet.com/b/devops/archive/2016/01/12/vorlonjs-a-journey-to-devops-introducing-the-blog-post-series.aspx" target="_blank" rel="noopener">http://blogs.technet.com/b/devops/archive/2016/01/12/vorlonjs-a-journey-to-devops-introducing-the-blog-post-series.aspx</a></p><h1 id="What-else"><a href="#What-else" class="headerlink" title="What else?"></a>What else?</h1><p>We did a lot of other improvements to this release :</p><ul><li>Added new accessibility rule in the best practices plugin</li><li>Updated Modernizr to 3.0 and integrated more rules</li><li>Various bug fixes</li><li>Added click to URI on a resource in the DOM Explorer (kudos to <a href="https://twitter.com/paulfasola" target="_blank" rel="noopener">Paul Fasola</a>)</li><li>Stability improvements on the dashboard</li><li>Generating source map to be able to debug using Typescript files (thanks <a href="https://twitter.com/ramisayar" target="_blank" rel="noopener">Rami Sayar</a>)</li><li>Merged the two gulp files to only one (really… I cannot remember why we thought 2 of them was a good idea in the first place… 😉</li><li>Moved samples to the <strong>client samples</strong> folder. (Containing now a sample for Node.js debugging)</li></ul><p>&nbsp;</p><p>I also want to notice that <a href="https://twitter.com/ramisayar" target="_blank" rel="noopener">Rami</a> did a huge work porting our Web Standard analyzer to a <strong>Grunt</strong> and <strong>Gulp</strong> extension. You can now check your web code quality during your build workflow:</p><ul><li>Here is the grunt task: <a href="https://www.npmjs.com/package/grunt-webstandards" title="https://www.npmjs.com/package/grunt-webstandards" target="_blank" rel="noopener">https://www.npmjs.com/package/grunt-webstandards</a></li><li>Here is the gulp task: <a href="https://www.npmjs.com/package/gulp-webstandards" title="https://www.npmjs.com/package/gulp-webstandards" target="_blank" rel="noopener">https://www.npmjs.com/package/gulp-webstandards</a></li><li>Here is a blog article talking about this : <a href="http://www.sitepoint.com/three-plugins-every-gruntfile-gulpfile-needs-make-website-great/" title="http://www.sitepoint.com/three-plugins-every-gruntfile-gulpfile-needs-make-website-great/" target="_blank" rel="noopener">http://www.sitepoint.com/three-plugins-every-gruntfile-gulpfile-needs-make-website-great/</a></li></ul><p>&nbsp;</p><h1 id="What’s-next"><a href="#What’s-next" class="headerlink" title="What’s next ?"></a>What’s next ?</h1><p>We have multiple plans for the next version of Vorlon.js. The main focus now is certainly the Node.js debugging capability. Right now you can connect your node process to Vorlon and debug it but we want to create more specialized plugins. We have 3 of them in mind:</p><ul><li><strong>Node.js info</strong> (what you required, which version, and stuff like this)</li><li><strong>Express.js</strong> (what view are loaded, automatic logs when a route is called, etc.)</li><li><strong>Mocha</strong> (advanced remote test monitor)</li></ul><p>&nbsp;</p><p><a href="https://twitter.com/sebastienpertus" target="_blank" rel="noopener">Sebastien Pertus</a> is also working on a plugin to help Office addin developers to debug their JavaScript code inside Vorlon. That should be released soon!</p><p>If you have other ideas for the Node.js area or for Vorlon.js in general, do not hesitate to do some <a href="https://github.com/MicrosoftDX/Vorlonjs/pulls" target="_blank" rel="noopener">pull requests</a> or to <a href="https://github.com/MicrosoftDX/Vorlonjs/issues" target="_blank" rel="noopener">add issues to our backlog</a>!</p><p>We also now have a <strong>Slack account</strong>. If you want to join and chat about Vorlon, feel free to contact me on twitter 😉</p><p>Happy debugging! 🙂</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you have any question about this article or Vorlon.js, feel free to contact me on twitter: &lt;a href=&quot;http://twitter.co
      
    
    </summary>
    
      <category term="Vorlon.js" scheme="http://yoursite.com/categories/Vorlon-js/"/>
    
    
      <category term="Vorlon.js" scheme="http://yoursite.com/tags/Vorlon-js/"/>
    
      <category term="Accessibility" scheme="http://yoursite.com/tags/Accessibility/"/>
    
      <category term="Debug" scheme="http://yoursite.com/tags/Debug/"/>
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Une liste de bonnes pratiques pour le web moderne !</title>
    <link href="http://yoursite.com/2015/12/11/une-liste-de-bonnes-pratiques-pour-le-web-moderne/"/>
    <id>http://yoursite.com/2015/12/11/une-liste-de-bonnes-pratiques-pour-le-web-moderne/</id>
    <published>2015-12-11T17:09:00.000Z</published>
    <updated>2019-01-15T19:28:48.187Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>Si vous avez une question à propos de cet article, n&#8217;hésitez pas à me contacter via Twitter:</em> <a href="http://twitter.com/meulta" target="_blank" rel="noopener"><em>http://twitter.com/meulta</em></a></p></blockquote><p>Le web est parti d&#8217;un rêve simple : partager. Partager de l&#8217;information, du contenu, des images, et plus tard des vidéos et des contenus plus riches. C&#8217;est pour cela que les langages du web ont toujours permis d&#8217;écrire du code une seule fois et le voir affiché agréablement sur tous les écrans du monde.</p><p><img src="http://geekcommunicant.com/blog/wp-content/uploads/2014/04/logo_html5.png" alt="Afficher l'image d'origine" width="668" height="391"></p><p>HTML, CSS, JavaScript et tous les langages et outils qui gravitent autour permettent de créer ce code qui fonctionnera sur tous les navigateurs de la planète.</p><p>La manière dont on écrit ce code a beaucoup évolué à travers le temps. A une certaine époque, tout le monde trouvait normal de faire de la mise en page en utilisant des tableaux. C&#8217;est une hérésie aujourd&#8217;hui, de nombreuses fonctionnalités HTML et CSS nous permettent de gérer la mise en page et la mise en forme d&#8217;un contenu de façon plus souple. Et pour JavaScript, on est passé en quelques années de code écrit exclusivement pas le développeur du site à une liste interminable de frameworks qu&#8217;il faut connaître, sélectionner et mettre à jour.</p><p>Depuis les années 90 le W3C est là pour définir les standards. Sa mission est principalement de permettre l&#8217;accès de l&#8217;information à tous. Il faut d&#8217;ailleurs voir ces standards comme des recommandations que l&#8217;on choisit de suivre ou pas. Cela a un côté parfois gênant puisqu&#8217;il est possible d&#8217;écrire du code pour le web qui fonctionnera parfaitement sans pour autant suivre toutes les recommandations d&#8217;accessibilité par exemple. On peut également créer un site web qui s&#8217;exécute correctement alors qu&#8217;il utilise une librairie JavaScript obsolète. Pire, on peut ne tester que sur un seul navigateur, et ne pas considérer les autres…</p><p>Un développeur web d&#8217;aujourd&#8217;hui doit avoir en tête un ensemble de bonne pratiques, qui lui permettent de façonner ses créations web comme un artisan cherche un juste équilibre entre le l&#8217;art et le côté pratique.</p><p>Nous avons essayé de regrouper un ensemble de bonnes pratiques à suivre comme une sorte de checklist. Pour cela, nous avons identifié 5 points distincts. Cette liste n&#8217;est évidemment pas exhaustive et n&#8217;hésitez pas à proposer des modifications ou ajout !</p><p>Pour vous éviter de devoir tout vérifier à la main, vous pouvez utiliser l&#8217;outil de scan disponible en ligne :</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/2043.image_0652E47B.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/1004.image_thumb_1C3C56CB.png" alt="image" width="716" height="409" border="0"></a></p><p><a href="https://dev.windows.com/fr-fr/microsoft-edge/tools/staticscan/" title="https://dev.windows.com/fr-fr/microsoft-edge/tools/staticscan/" target="_blank" rel="noopener">https://dev.windows.com/fr-fr/microsoft-edge/tools/staticscan/</a></p><p>Notez que si vous scannez mon blog vous allez trouver quelques erreurs 😉 La plateforme que nous utilisons est en cours de migration ça ne devrait plus être long ! 🙂</p><h1 id="Verification-1-Est-ce-que-vous-utilisez-correctement-les-prefixes-CSS"><a href="#Verification-1-Est-ce-que-vous-utilisez-correctement-les-prefixes-CSS" class="headerlink" title="Vérification 1 : Est-ce que vous utilisez correctement les préfixes CSS ?"></a>Vérification 1 : Est-ce que vous utilisez correctement les préfixes CSS ?</h1><p>Le principe de CSS est très simple: on sélectionne un élément HTML et on y applique un style et des effets particuliers grâce à une liste de propriétés. Ces propriétés ne sont pas toujours finalisées et parfois, elle ne sont pas disponibles dans tous les navigateurs.</p><p>Généralement, elle sont implémentées dans un navigateur en premier et pour ne pas perturber les autres, un préfixe vendeur est utilisé. Par exemple, si Mozilla ajoute une propriété qui n&#8217;est pas encore standardisée, la mettre en oeuvre nécessitera d&#8217;utiliser le préfixe -moz-NOMDELAPROPRIETE. En faisant cela, le dev a conscience que ça ne fonctionnera que dans Firefox et qu&#8217;il faudra ajouter par la suite les propriétés -ms, -webkist, -o (pour Opéra), et finalement la version standardisée non préfixée quand chacun d&#8217;entre eux seront disponibles. Il faut toujours conserver l&#8217;intégralité des préfixes pour être certain que la propriété est appliquée dans le cas d&#8217;un navigateur un peu ancien qui ne supporterait pas encore la version non préfixée.</p><p>Le problème, c&#8217;est que bien souvent les développeurs ne précisent pas l&#8217;intégralité des préfixes. Ils se contentent souvent de -webkit. Et un navigateur a beau gérer une fonctionnalité, si on ne lui demande pas de l&#8217;utiliser, il ne l&#8217;utilisera pas. Et dans ce cas le site ne s&#8217;affichera pas correctement.</p><p>Même si nous continuons à expliquer cela à l&#8217;ensemble des développeurs dès que nous en avons l&#8217;occasion, nous avons décidé de corriger automatiquement ces erreurs dans Microsoft Edge dès que possible. Si on constate qu&#8217;une version préfixée est précisée mais que la version -ms n&#8217;est pas présente, nous l&#8217;ajoutons automatiquement avant d&#8217;interpréter la page. De cette manière, oublier un préfixe est moins gênant.</p><p>Essayez d&#8217;y faire attention quand même 😉</p><h1 id="Verification-2-Generez-vous-un-contenu-different-pour-chaque-navigateur"><a href="#Verification-2-Generez-vous-un-contenu-different-pour-chaque-navigateur" class="headerlink" title="Vérification 2 : Générez-vous un contenu différent pour chaque navigateur ?"></a>Vérification 2 : Générez-vous un contenu différent pour chaque navigateur ?</h1><p>C&#8217;est un point très important. Par le passé il était fréquent de vérifier le navigateur qui demande d&#8217;afficher notre site web et de potentiellement réagir à cela en envoyer un balisage HTML (ou pire: un contenu) différent. C&#8217;est une pratique très peu adaptée dans le cadre du web moderne. Il vaut mieux envoyer le même code et le même contenu et tester la présence des fonctionnalités qu’on souhaite utiliser.</p><p>C&#8217;est un sujet très important car la détection de navigateur ne permet pas d&#8217;avoir un site web pérenne. Cela part d&#8217;une bonne idée: essayer de deviner les fonctionnalités qu&#8217;on peut utiliser en fonction de l&#8217;environnement dans lequel on est rendu. Mais comment gérer l&#8217;évolution des navigateurs ? Comment faire en sorte que dès qu&#8217;ils supportent ce qu&#8217;il ne supportaient pas avant, la version qui lui est dédiée l&#8217;utilise bien?</p><p>C&#8217;est exactement pour cela que l&#8217;on choisit maintenant de détecter la présence de la fonctionnalité plutôt que d&#8217;essayer de le deviner. A l&#8217;aide de JavaScript, on peut par exemple détecter dynamiquement que le stockage local est supporté. Si c&#8217;est le cas, parfait, utilisons-le ! Sinon, il faut trouver une alternative ou prévenir l&#8217;utilisateur qu&#8217;il n&#8217;aura pas accès à cette fonctionnalité.</p><p>Pour vous simplifier la vie et détecter facilement ce que le navigateur gère en termes de fonctionnalités web, vous pouvez utiliser une librairie telle que Modernizr.</p><h1 id="Verification-3-utilisez-vous-des-plugins"><a href="#Verification-3-utilisez-vous-des-plugins" class="headerlink" title="Vérification 3: utilisez-vous des plugins ?"></a>Vérification 3: utilisez-vous des plugins ?</h1><p>Le web est crossplateformes. C&#8217;est même certainement la technologie la plus crossplateformes au monde. Grâce à ça, un site web que vous écrivez pourra être exécuté sur une quantité incroyable de navigateurs et de périphériques.</p><p>Les plugins (activex, applet Java, etc.) ont été imaginées dans un monde ou accéder à un site web ne se faisait que sur desktop. Cela permettait notamment de combler facilement certains manques de la plateforme web. Quelque chose est impossible à faire en HTML ? Faisons un activeX ! JavaScript n&#8217;est pas assez performant ? Créons un applet Java !</p><p>Nous vivons désormais dans un monde ou HTML couplé à CSS est un langage extrêmement puissant, ou tout ou presque est possible. Nous vivons également dans un monde ou V8, le moteur JavaScript de Chrome ou Chakra, celui de Microsoft Edge atteignent des performances excellentes.</p><p>Plus de raisons dans ce cas d&#8217;utiliser des plugins. D&#8217;autant que ceux-ci ne sont pas accessibles et que leur contenu est très complexe à référencer.</p><p>C&#8217;est pour cette raison que le web moderne, dans notre esprit, est un web ne contenant aucun de ces plugins.</p><h1 id="Verification-4-Est-ce-que-vous-avez-mis-a-jour-vos-frameworks"><a href="#Verification-4-Est-ce-que-vous-avez-mis-a-jour-vos-frameworks" class="headerlink" title="Vérification 4: Est-ce que vous avez mis à jour vos frameworks?"></a>Vérification 4: Est-ce que vous avez mis à jour vos frameworks?</h1><p>Le web est génial pour une raison simple: si vous voulez faire quelque chose il y a de fortes chances que quelqu&#8217;un l&#8217;a déjà fait avant vous. Et il y a même une probabilité qu&#8217;il ou elle ait packagé son code sous forme d&#8217;un framework réutilisable simplement.</p><p>Quand ces frameworks sont complexes comme par exemple jQuery, Angular.js ou React, ils sont mis à jour fréquemment. Au fil des versions, certaines fonctionnalités peuvent ne plus être supportées. Chaque framework a une liste de versions qui sont obsolètes.</p><p>C&#8217;est très important de s&#8217;assurer que l&#8217;on utilise bien des versions à jour de ces différents frameworks.</p><h1 id="Verification-5-Est-ce-que-vous-forcez-une-version-particuliere-du-moteur-de-rendu"><a href="#Verification-5-Est-ce-que-vous-forcez-une-version-particuliere-du-moteur-de-rendu" class="headerlink" title="Vérification 5 : Est-ce que vous forcez une version particulière du moteur de rendu?"></a>Vérification 5 : Est-ce que vous forcez une version particulière du moteur de rendu?</h1><p>Depuis Internet Explorer 8 il est possible de choisir le mode de rendu de son site dans le navigateur. Le principe est très simple: vous ajoutez la balise x-ua-compatible et vous pouvez indiquer quel moteur doit être utilisé. Cela par d&#8217;une bonne intention : permettre à un développeur de ne pas avoir à changer son code à chaque fois qu&#8217;il y a une nouvelle version du navigateur.</p><p>Avec les versions modernes des navigateurs, il vaut mieux cependant ne pas fonctionner comme ça. Il est préférable de partir du principe que le navigateur va gérer correctement l&#8217;affichage du site et de lui faire confiance.</p><p>Pour pouvoir gérer la transition correctement, dans Microsoft Edge il y a désormais une valeur à ajouter au tag x-ua-compatible. Elle s&#8217;appelle &#8220;Edge&#8221; et elle permet de faire en sorte que dans le cas d&#8217;un navigateur moderne, le moteur utilisé soit le dernier. Vous pouvez temporairement conserver vos tags pour les anciens navigateurs si cela est vraiment nécessaire. Pensez à mettre à jour votre code rapidement cependant !</p><blockquote><p><em>Si vous avez une question à propos de cet article, n&#8217;hésitez pas à me contacter via Twitter:</em> <a href="http://twitter.com/meulta" target="_blank" rel="noopener"><em>http://twitter.com/meulta</em></a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Si vous avez une question à propos de cet article, n&amp;#8217;hésitez pas à me contacter via Twitter:&lt;/em&gt; &lt;a href=&quot;http://
      
    
    </summary>
    
      <category term="Uncategorized" scheme="http://yoursite.com/categories/Uncategorized/"/>
    
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
      <category term="Accessibility" scheme="http://yoursite.com/tags/Accessibility/"/>
    
  </entry>
  
  <entry>
    <title>How Vorlon.js helps you improve your web code</title>
    <link href="http://yoursite.com/2015/11/27/how-vorlon-js-helps-you-improve-your-web-code/"/>
    <id>http://yoursite.com/2015/11/27/how-vorlon-js-helps-you-improve-your-web-code/</id>
    <published>2015-11-27T16:36:11.000Z</published>
    <updated>2019-01-15T19:29:01.103Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>If you have any question about this article or Vorlon.js, feel free to contact me on twitter: <a href="http://twitter.com/meulta" target="_blank" rel="noopener">http://twitter.com/meulta</a></em> </p></blockquote><p>When it comes to writing good code in web development it is easy to get lost in the quantity of resources you find online. There are some basics that everyone knows or should know and there are some more specific ones.</p><p>Are you able to tell me right now that you sure you follow these practices ? Probably not. You probably have the intuition that you do and you are certainly writing your code with them in mind but you cannot be sure you always respect them.</p><p>As I said, there are a <a href="http://thenextweb.com/dd/2015/10/19/10-rules-of-best-practice-for-responsive-design/" target="_blank">lot</a> <a href="http://thenextweb.com/dd/2015/10/19/10-rules-of-best-practice-for-responsive-design/" target="_blank">of</a> <a href="http://www.webaxe.org/" target="_blank">different</a> <a href="http://webuilddesign.com/10-css-best-practices-for-2015/" target="_blank">resources</a> <a href="http://jstherightway.org/" target="_blank">on the web</a>. It is not easy to know all of them. It is not easy to follow all of them. And it is <strong>sure</strong> not easy to be sure you did it correctly.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/1513.image_316750DD.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0027.image_thumb_5A9D8B9A.png" alt="image" width="673" height="154" border="0"></a></p><p>This is why we decided to create the <strong><a href="http://vorlonjs.com/documentation/#best-practices" target="_blank">Best Practices</a></strong> plugin in Vorlon.js. It is a way for you to automatically get hints and recommandations about how you could improve your code. The current list of practices and scans have been created from our own experience. It is extensible and you can add your own rules to contribute to this plugin and make it more accurate and comprehensive. 🙂</p><blockquote><p><em>A <strong>great thanks</strong> to</em> <a href="https://twitter.com/gleborgne" target="_blank"><em>Guillaume Leborgne</em></a> <em>and</em> <a href="https://twitter.com/Mehdi_La" target="_blank"><em>Mehdi Lahlou</em></a> <em>for their strong work on this!</em></p></blockquote><h2 id="How-to-use-the-best-practices-plugin"><a href="#How-to-use-the-best-practices-plugin" class="headerlink" title="How to use the best practices plugin"></a>How to use the best practices plugin</h2><p>First of all, you need to setup a Vorlon.js environment. You can follow the documentation we provide here : <a href="http://vorlonjs.com/documentation/#vorlonjs-server" title="http://vorlonjs.com/documentation/#vorlonjs-server" target="_blank" rel="noopener">http://vorlonjs.com/documentation/#vorlonjs-server</a></p><p>Once you have an up and running vorlon.js server and your website is connected to it, hit the “play” button on the Best Practice tab. It will run dynamic and static tests on the page you are currently debugging and the resources linked to it (JavaScript files, CSS files, etc.)</p><p><span style="color: #333333;">The above video shows you the kind of result you get when using this plugin. All the recommendations are organized into 4 categories, <strong>Web Standards</strong>, <strong>Accessibility</strong>, <strong>Performances</strong>, <strong>Mobile Web</strong>.</span></p><p><span style="color: #333333;">Let’s have a look at some of the rules you get in each of these categories.</span></p><h2 id="1-Web-Standards"><a href="#1-Web-Standards" class="headerlink" title="1. Web Standards"></a>1. Web Standards</h2><p>There are a lot of common mistakes we can do in this area. Sometimes, it is not even a mistakes. Take the JavaScript libraries you use for instance: how frequently do you go and check if the version you are referencing is obsolete or not ? Or consider the CSS prefixes problematic: are you sure you always add all the vendor prefixes? That could be a good idea to make sure your site works correctly on the widest range of computers. Do you have code which does browser detection ? You should change it to feature detection. Etc. etc.</p><p>This section gives your insights about what you can improve in this area:</p><ul><li><strong>Avoid browser detection</strong>: tells you if you have code calling <em>navigator.userAgent</em></li><li><strong>Avoid browser specific content</strong>: is checking whether your website is sending a different content for some browsers</li><li><strong>Avoid conditionnal comment</strong>: Conditional comments are not the best way to adapt your website to target browser, and support is dropped for IE &gt; 9.</li><li><strong>Incorrect use of css fallback</strong>: validates that all the css rules present in the CSS file are really there in the computed styles. This is a dynamic check and the result might be <em>true</em> or <em>false</em> depending on the browser you use.</li><li><strong>Incorrect use of prefixes</strong>: this one is performing a static scan on your CSS files to ensure you are always using all the vendor prefixes</li><li><strong>Object and embed</strong>: the modern web is only about web languages not plugins, activeX and other embeded objects. This validates that your website does not include one</li><li><strong>Update JavaScript libraries</strong>: checks if all the JS files you are using are considered by their creators as not obsolete</li><li><strong>Use modern doctype</strong>: Modern doctype like &lt;!DOCTYPE html&gt; are better for browser compatibility and enable using HTML5 features.</li></ul><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/7635.image_3F67C34A.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6012.image_thumb_6A42B80D.png" alt="image" width="678" height="325" border="0"></a></p><h2 id="2-Accessibility"><a href="#2-Accessibility" class="headerlink" title="2. Accessibility"></a>2. Accessibility</h2><p>Following web standards does not guarantee you that your web page is easily accessible. <strong>Accessibility</strong> is something the Vorlon.js team is really concerned about.</p><p>A lot of work is done currently for sometimes now about this by great people. One exemple is the <a href="http://www.deque.com/products/aXe/" target="_blank">aXe</a> product created by <a href="http://www.deque.com" target="_blank">deque</a>. It is an open source tool which gives you a gigantic list of advices about your website. They go deep in the analysis and can for instance tell you that a specific element has insufficient color contrast for someone visually impaired to see properly. This is really awesome work and we worked with the team at deque to integrate this into this plugin.</p><p>_Note : this integration is not available in the npm version of Vorlon.js yet but you can get it form the <a href="https://github.com/Microsoftdx/vorlonjs/tree/dev" target="_blank">dev branch</a> in the github repository._</p><p>There are too much rules in there for me to be able to list them all but here are the fixed one:</p><ul><li><strong>Form elements must have labels</strong>: for them to be understandable by automated web readers</li><li><strong>Images must have alternate text</strong>: this one is listing you all the <img> tag which does not contain the alt attribute.</li><li><strong>Use aria attributes</strong></li></ul><p>All the <strong>aXe</strong> rules are displayed only if they are in a failed state :</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0830.image_0C2E1A92.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/2273.image_thumb_3BEBC311.png" alt="image" width="697" height="299" border="0"></a></p><h2 id="3-Performances"><a href="#3-Performances" class="headerlink" title="3. Performances"></a>3. Performances</h2><p>You can follow some simple rules to get better performances for your website.</p><ul><li><strong>Encore static content</strong>: tries to determine if you are using gzip or deflate encoding to reduce de network bandwith</li><li><strong>Minify static files</strong>: checks if you used a minification process to reduce the size of your CSS and JavaScript files</li><li><strong>Try bundling your files</strong>: simple algorithm that checks if you created a single file for all your scripts to reduce HTTP requests</li></ul><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6087.image_5DD72595.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/4034.image_thumb_119F1BE7.png" alt="image" width="684" height="239" border="0"></a></p><h2 id="4-Mobile-Web"><a href="#4-Mobile-Web" class="headerlink" title="4. Mobile Web"></a>4. Mobile Web</h2><p>When it comes to mobiles, a lot of web devs forget to add the correct elements and information to take it correctly into account.</p><ul><li><strong>define platform icons</strong>: This is really not mandatory but it gives the user a better experience when they are pinning your websites</li><li><strong>use meta viewport</strong>: Use meta viewport tag to choose how your website will get scaled on smaller devices like phones. Define at least <meta name="&#8221;viewport&#8221;" content="&#8221;width=device-width," initial-scale="1&#8243;"></li><li><strong>use responsive approaches</strong>: Even if your website target only certain devices, you may have users with unexpected devices or screen ratio.</li></ul><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/1731.image_2860F421.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6283.image_thumb_0A163D2B.png" alt="image" width="655" height="304" border="0"></a></p><h2 id="Your-turn"><a href="#Your-turn" class="headerlink" title="Your turn !"></a>Your turn !</h2><p>The plugin provides for now somes basic rules. We really hope this will be completed by new rules that anyone in the community can create. Do not hesitate to add yours and create a pull request in the <a href="https://github.com/Microsoftdx/vorlonjs" target="_blank">Vorlon.js repo</a>.</p><blockquote><p><em>If you have any question about this article or Vorlon.js, feel free to contact me on twitter: <a href="http://twitter.com/meulta" target="_blank" rel="noopener">http://twitter.com/meulta</a></em></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you have any question about this article or Vorlon.js, feel free to contact me on twitter: &lt;a href=&quot;http://twitter.co
      
    
    </summary>
    
      <category term="Vorlon.js" scheme="http://yoursite.com/categories/Vorlon-js/"/>
    
      <category term="Web" scheme="http://yoursite.com/categories/Vorlon-js/Web/"/>
    
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
      <category term="Mobile" scheme="http://yoursite.com/tags/Mobile/"/>
    
      <category term="Vorlon.js" scheme="http://yoursite.com/tags/Vorlon-js/"/>
    
      <category term="Responsive" scheme="http://yoursite.com/tags/Responsive/"/>
    
      <category term="Accessibility" scheme="http://yoursite.com/tags/Accessibility/"/>
    
  </entry>
  
  <entry>
    <title>Débuguer Node.js avec VS Code</title>
    <link href="http://yoursite.com/2015/11/24/dbuguer-node-js-avec-vs-code/"/>
    <id>http://yoursite.com/2015/11/24/dbuguer-node-js-avec-vs-code/</id>
    <published>2015-11-24T08:00:00.000Z</published>
    <updated>2019-01-15T19:29:13.710Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>Si vous avez une question à propos de cet article, n&#8217;hésitez pas à me contacter via Twitter:</em> <a href="http://twitter.com/meulta" target="_blank" rel="noopener"><em>http://twitter.com/meulta</em></a></p></blockquote><p>Quand on se lance dans le développement web, on démarre par une longue phase d’apprentissage des languages. A ce moment-là, on ne se pose pas trop la question du logiciel qu’on utilise pour écrire son code. On prend ce qu’on nous conseille à droite ou à gauche, généralement celui du premier tutoriel qu’on a suivi.</p><p>Dès qu’on progresse et qu’on arrive à un stade on maîtrise le code qu’on écrit, on commence à faire attention aux outils qu’on utilise. On démarre l’utilisation de <strong>Gulp</strong> ou <strong>Grunt</strong> pour minifier ses fichiers automatiquement ou vérifier son code JavaScript avec JSLint. Et dans ce processus d’amélioration de sa propre expérience de développement se pose la question de l’éditeur de code qu’on utilise. SublimeText ? Notepad++ ? Autre chose ? Le choix n’est pas simple et les défenseurs de l’un ou de l’autre vous donnerons leur point de vue un peu partout sur le net. 🙂</p><h2 id="Enter-Visual-Studio-Code"><a href="#Enter-Visual-Studio-Code" class="headerlink" title="Enter Visual Studio Code !"></a>Enter Visual Studio Code !</h2><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0804.image_5D67F028.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/8546.image_thumb_2A2E4770.png" alt="image" width="683" height="389" border="0"></a></p><p><a href="https://www.microsoft.com/france/visual-studio/code/" target="_blank">Visual Studio Code</a> est une alternative très intéressante à ces outils. Il faut le voir comme un éditeur de code idéal pour un développeur web full stack. Parmi ses fonctionnalités les plus intéressantes on peut noter :</p><ul><li>L’auto-complétion et l’intelliSense</li><li>La coloration syntaxique</li><li>Son extensibilité via des plugins accessibles au sein d’<a href="https://code.visualstudio.com/docs/editor/extension-gallery" target="_blank">une gallerie</a></li><li>La gestion de nombreux langages tels que HTML, CSS / Sass / Less, JavaScript, C#, JSON, DockerFile, Markdown, TypeScript</li><li>L’intégration à Git (et donc GitHub)</li><li>L’éxécution de tâches Gulp, Grunt et autres systèmes de workflow</li><li>Le <strong>debug de code côté serveur</strong> tels que ASP.net et <strong>Node.js</strong></li></ul><p>Vous pouvez le télécharger gratuitement ici : <a href="https://www.microsoft.com/france/visual-studio/code/" title="https://www.microsoft.com/france/visual-studio/code/" target="_blank" rel="noopener">https://www.microsoft.com/france/visual-studio/code/</a></p><h2 id="Ne-pas-confondre-avec-Visual-Studio"><a href="#Ne-pas-confondre-avec-Visual-Studio" class="headerlink" title="Ne pas confondre avec Visual Studio"></a>Ne pas confondre avec Visual Studio</h2><p>Visual Studio est un environnement de développement très complet proposé par Microsoft depuis des années. Il permet de faire toutes sortes de dev, que ce soit pour le web, pour le serveur, pour créer des applications Win32, des applications Android, iOS, Windows et développer pour le Cloud.</p><p>Visual Studio <strong>Code</strong> est un logiciel complétement différent. Il fonctionne sur <strong>Linux</strong>, <strong>Mac</strong> et <strong>Windows</strong> et est Open-Source (<a href="https://github.com/Microsoft/vscode" title="https://github.com/Microsoft/vscode" target="_blank" rel="noopener">https://github.com/Microsoft/vscode</a>).</p><p>Et surtout : Il est <strong>extrêmement plus</strong> léger que son cousin historique!</p><p>C’est cet outil que nous utilisons au quotidien pour développer l’outil de débug web open-source Vorlon.js (<a href="http://www.vorlonjs.io" target="_blank" rel="noopener">http://www.vorlonjs.io</a>).</p><h2 id="Developper-avec-VS-Code"><a href="#Developper-avec-VS-Code" class="headerlink" title="Développer avec VS Code"></a>Développer avec VS Code</h2><p>Le fonctionnement de VS Code est très simple. Vous effectuez un clic droit sur un répertoire et demandez <strong>Ouvrir avec Code.</strong> Le répertoire et l’intégralité des fichiers qui s’y trouvent sont alors ouvert dans une instance de VS Code.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/8132.image_300B7BBA.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/8738.image_thumb_2DD183AF.png" alt="image" width="338" height="195" border="0"></a>  <a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/5224.image_0220B9B3.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/2311.image_thumb_1D5912B4.png" alt="image" width="271" height="199" border="0"></a></p><p>Le langage est automatiquement découvert par l’outil et la coloration syntaxique se met en place.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/7140.image_31722F3D.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/8233.image_thumb_1C833D7B.png" alt="image" width="597" height="374" border="0"></a></p><h2 id="Integrer-votre-outil-de-workflow"><a href="#Integrer-votre-outil-de-workflow" class="headerlink" title="Intégrer votre outil de workflow"></a>Intégrer votre outil de workflow</h2><p>Quand on fait du développement web, même dans le cas d’une application Node.js, on a toujours des tâches à exécuter avant chaque test. Généralement, on utilise un outil comme Grunt ou Gulp pour automatiser ces tâches. Ces outils de workflow (ou “ordonnanceurs de tâches”) s’intègrent parfaitement à VS Code.</p><p>Dans l’exemple très basic disponible ici : <a href="https://github.com/meulta/meultasamples/tree/master/debugNodeVSCode" title="https://github.com/meulta/meultasamples/tree/master/debugNodeVSCode" target="_blank" rel="noopener">https://github.com/meulta/meultasamples/tree/master/debugNodeVSCode</a> vous trouverez un fichier gulpfile.js qui execute une tâche JSLint pour vérifier la syntaxe du code JavaScript de mes différents fichiers.</p><p>Vous pouvez l’exécuter en ligne de commande:</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/5164.image_326F407C.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6165.image_thumb_0F41D5CA.png" alt="image" width="699" height="143" border="0"></a></p><p><em>Note : n’oubliez pas d’effectuer un <strong>npm install</strong> dans le répertoire au préalable pour installer les dépendances nécessaires. Et d’effectuer un <strong>npm install –g gulp</strong> si Gulp n’est pas installé sur votre poste.</em></p><p>Pour vous simplifier la vie, vous pourriez évidemment créer une tâche <strong>watch</strong> qui exécuterait tout votre workflow à chaque modification de fichier.</p><p>Une version intermédiaire existe dans Visual Studio Code. L’exécution du workflow se fait avec le raccourci clavier <strong>Ctrl+Maj.+B</strong>. La première fois il n’est pas configuré et VS Code vous propose de le faire pour vous:</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/3365.image_33D5F3FF.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/3225.image_thumb_7C8F6CC3.png" alt="image" width="687" height="114" border="0"></a></p><p>Cela a pour effet de créer le répertoire <strong>.vscode</strong>. Celui-ci contient toute la configuration spécifique à VS Code et notamment le fichier <strong>tasks.json</strong> qui défini vos tâches et comment les exécuter.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6560.image_1E7ACF48.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0726.image_thumb_1B687153.png" alt="image" width="686" height="303" border="0"></a></p><p>Vous n’avez plus qu’à ajouter la configuration décrivant la tâche qui doit être exécutée (ici <strong>default</strong>). Chaque fois que vous ferez le raccourci Ctrl+Shift+B le processus sera exécuté avec un retour direct dans VS Code!</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6471.image_71F43012.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/1108.image_thumb_5F41C70C.png" alt="image" width="690" height="271" border="0"></a></p><h2 id="Debuguer-son-application-Node-js"><a href="#Debuguer-son-application-Node-js" class="headerlink" title="Débuguer son application Node.js"></a>Débuguer son application Node.js</h2><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><p>Vous avez maintenant un environnement simple à utiliser pour créer votre code, pour vérifier sa qualité et effectuer n’importe quel traitement tel que de la minification ou du bundling.</p><p>Un des aspects intéressants de VS Code est que vous pouvez réaliser du debug live et pas à pas de votre code.</p><p>Le debug et toutes les fonctionnalités associées sont regroupées dans le dernier onglet situé dans le bandeau gauche. Lorsque vous cliquez sur le bouton en forme de triangle vert (le bouton “play”) cela aura pour effet de démarrer le debug:</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/5074.image_15B2790F.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/5861.image_thumb_29CB9598.png" alt="image" width="514" height="426" border="0"></a></p><p>Au tout premier lancement VS Code vous demande le type d’application que vous souhaitez débuguer:</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0574.image_46D44460.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0447.image_thumb_36C8065A.png" alt="image" width="524" height="273" border="0"></a></p><p>Peu importe votre choix, cela aura pour effet de créer le fichier .<strong>vscode/launch.json</strong> qui contient tous les paramètres de débug avancés. Vous pouvez y configurer par exemple le type de debug (ici : “node”), le fichier JavaScript à exécuter : ici, je l’ai modifié en <strong>server.js:</strong></p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6710.image_52005F5B.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0118.image_thumb_173DD7E7.png" alt="image" width="757" height="688" border="0"></a></p><p>Dans ce fichier, vous pouvez définir deux configurations.</p><ul><li><strong>Launch :</strong> démarre le processus node et s’y attache</li><li><strong>Attach</strong> : permet de s’attacher à un processus node déjà démarré.</li></ul><p>Pour chacun de ces modes de démarrage, vous pouvez choisir les paramètres associés.</p><p>Quand vous démarrez le débug (en <strong>launch</strong> ou en <strong>attach</strong>), une console apparaît et vous donne les logs générés par votre application Node. Vous avez également accès à un panneau de contrôle en haut de l’outil qui vous permet de naviguer dans l’exécution du code ou d’arrêter le debug avec le bouton stop (carré rouge).<a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0044.image_6A4D966D.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/4048.image_thumb_2B148E32.png" alt="image" width="774" height="368" border="0"></a></p><h3 id="Les-points-d’arret"><a href="#Les-points-d’arret" class="headerlink" title="Les points d’arrêt"></a>Les points d’arrêt</h3><p>Lorsque l’on effectue une session de debug, un des objectifs est de pouvoir jeter un œil à l’exécution du code à un instant T. On évite généralement de parcourir tout le code ligne à ligne, on a plutôt tendance à laisser libre cours et à l’arrêter à la ligne de code choisie. C’est tout l’intérêt des points d’arrêt.</p><p>Pour positionner un point d’arrêt vous pouvez :</p><ul><li>Cliquer dans la marge à la hauteur de la ligne pour laquelle vous souhaitez le définir</li><li>Positionner le curseur dans le code et appuyer sur la touche F9</li></ul><p>Dans tous les cas cela à pour effet d’ajouter une pastille rouge au niveau de votre ligne de code.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6786.image_0F065FF8.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/8204.image_thumb_62E96306.png" alt="image" width="476" height="115" border="0"></a></p><p>Vous pouvez également modifier cette liste de points d’arrêt dans le panneau de débug à gauche de VS Code. Si vous décochez un point d’arrêt, il ne sera temporairement plus pris en compte:</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/7167.image_12A70B86.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0333.image_thumb_2968E3C0.png" alt="image" width="388" height="178" border="0"></a></p><p>Dans notre exemple, il suffit de naviguer sur la page <a href="http://127.0.0.1:8000/" target="_blank" rel="noopener">http://127.0.0.1:8000/</a> et cela appellera le code pour lequel nous avons défini un point d’arrêt. L’exécution de l’application est alors stoppée (la ligne sur laquelle on est arrêté est surlignée en jaune):</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/2804.image_728E8F79.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/4135.image_thumb_02312B3C.png" alt="image" width="708" height="277" border="0"></a></p><p><em>Note : La ligne surlignée n’est pas encore exécutée. C’est la prochaine qui sera lancée.</em></p><p>Vous pouvez alors vous déplacer dans le code et demander l’exécution des lignes suivantes grâce aux boutons situés dans la barre supérieure, de gauche à droite:</p><ul><li><strong>Continue (F5)</strong>: reprend l’exécution du code jusqu’au prochain point d’arrêt ou jusqu’à ce que l’application s’arrête ou soit en standby.</li><li><strong>Step Over (F10)</strong>: Exécute la ligne de code courante mais reste dans le scope de code actuel (si c’est une fonction, le débug exécute toute la fonction dans entrer dans le code en pas à pas).</li><li><strong>Step Into</strong> <strong>(F11)</strong>: Exécute la ligne de code courante et s’il s’agit d’une fonction, arrête l’exécution à la première ligne de code dans cette fonction. Cela permet de parcourir en pas à pas le contenu de la fonction également.</li><li><strong>Step Out</strong> <strong>(Maj.+F11)</strong>: Exécute la ligne courante et toutes les lignes de la fonction actuelle jusqu’à en sortir.</li><li><strong>Stop</strong>: Arrête la session de débug et arrête l’application Node.</li></ul><p>### </p><h3 id="Comprendre-le-contexte-d’execution"><a href="#Comprendre-le-contexte-d’execution" class="headerlink" title="Comprendre le contexte d’exécution"></a>Comprendre le contexte d’exécution</h3><p>L’intérêt du débug ne se limite pas à exécuter les lignes de codes les unes après les autres. L’objectif principal est de consulter l’état des variables au fil de l’eau ainsi que la pile d’appel (i.e. l’enchainement des fonctions les unes dans les autres).</p><p>Pour visualiser une variable, vous avez plusieurs solutions.</p><p><strong>Survoler quelques instants la variable dans le code pour voir apparaître un popup</strong></p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/4606.image_714C874B.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/4705.image_thumb_3C4288CC.png" alt="image" width="608" height="362" border="0"></a></p><p><strong>Parcourir l’intégralité des variables présentes via le volet de débug</strong></p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/1184.image_74EFC38A.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/5706.image_thumb_44C878C7.png" alt="image" width="499" height="443" border="0"></a></p><p><em>Notez que vous pouvez déplier l’arborescence pour découvrir l’ensemble des variables et leurs propriétés/enfants.</em></p><p><strong>Ajouter une variable à l’onglet watch pour en suivre de prêt l’évolution</strong>:</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/5633.image_3A96DE5A.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/5008.image_thumb_4AA5AD11.png" alt="image" width="568" height="331" border="0"></a></p><p>L’onglet <strong>CALL STACK</strong> quand à lui vous permet de connaître l’enchaînement des appels de fonctions qui ont permis d’arriver à la ligne de code à laquelle vous vous trouvez.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0456.image_681A8ECE.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0880.image_thumb_1C4EB815.png" alt="image" width="579" height="251" border="0"></a></p><p>Dans l’exemple ci-dessus, on remarque que la fonction dans laquelle on est arrêtée a en réalité été appelée par la fonction <strong>emitTwo</strong> située dans le fichier <strong>events.js</strong> qui elle-même avait été appelée par <strong>emit</strong> située dans le même fichier.</p><p>Si vous cliquez sur une de ces lignes, un volet s’ouvre sur la droite et vous indique le code exact qui a effectué l’appel :</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0068.image_16FFD164.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/7384.image_thumb_61228E5C.png" alt="image" width="728" height="331" border="0"></a></p><h1 id="Et-pour-finir…"><a href="#Et-pour-finir…" class="headerlink" title="Et pour finir…"></a>Et pour finir…</h1><p>Je vous ai donné ici un premier aperçu de ce que vous pouvez réaliser avec VS Code et surtout son débuguer. C’est maintenant à vous de jouer pour dénicher les bugs les plus tenaces dans votre code.</p><p>Téléchargez Visual Studio Code gratuitement ici : <a href="https://www.microsoft.com/france/visual-studio/code/" title="https://www.microsoft.com/france/visual-studio/code/" target="_blank" rel="noopener">https://www.microsoft.com/france/visual-studio/code/</a> et démarrez votre première session de débug ! 🙂</p><p>Vous pouvez également aller plus loin dans le débug web avec Vorlon.js. C’est un outil qui permet de reproduire l’expérience des outils F12 qu’on trouve dans tous les navigateurs mais à distance et entre tous les navigateurs. C’est un outil open source disponible sur <a href="http://www.vorlonjs.io" target="_blank" rel="noopener">http://www.vorlonjs.io</a> !</p><blockquote><p><em>Si vous avez une question à propos de cet article, n&#8217;hésitez pas à me contacter via Twitter:</em> <a href="http://twitter.com/meulta" target="_blank" rel="noopener"><em>http://twitter.com/meulta</em></a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Si vous avez une question à propos de cet article, n&amp;#8217;hésitez pas à me contacter via Twitter:&lt;/em&gt; &lt;a href=&quot;http://
      
    
    </summary>
    
      <category term="Uncategorized" scheme="http://yoursite.com/categories/Uncategorized/"/>
    
    
      <category term="Debug" scheme="http://yoursite.com/tags/Debug/"/>
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
      <category term="Visual Studio Code" scheme="http://yoursite.com/tags/Visual-Studio-Code/"/>
    
  </entry>
  
  <entry>
    <title>Vorlon.js 0.1.0 is out !</title>
    <link href="http://yoursite.com/2015/10/29/vorlon-js-0-1-0-is-out/"/>
    <id>http://yoursite.com/2015/10/29/vorlon-js-0-1-0-is-out/</id>
    <published>2015-10-29T09:52:06.000Z</published>
    <updated>2019-01-15T23:13:55.508Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>If you have any question about this article or Vorlon.js, feel free to contact me on twitter: <a href="http://twitter.com/meulta" target="_blank" rel="noopener">http://twitter.com/meulta</a></em> </p></blockquote><p>The Vorlon.js core team is split between Paris and Redmond. Last week we decided to ship a new big release and we all took a plane to Redmond and get together for a 2 days intense pair programming session. After multiple hours of bug bashing and last minute features coding we are <strong>happy and proud to announce</strong> that we published the new version of <strong>Vorlon.js : 0.1.0</strong> !</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/8228.vorlon_5629DC6B.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="vorlon" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/4035.vorlon_thumb_11110F35.png" alt="vorlon" width="413" height="265" border="0"></a></p><p>You can get it by running the <strong>npm install –g vorlon</strong> command, clone the GitHub repo: <a href="https://github.com/Microsoftdx/vorlonjs" title="https://github.com/Microsoftdx/vorlonjs" target="_blank" rel="noopener">https://github.com/Microsoftdx/vorlonjs</a> or install it using the new <strong>deploy to Azure</strong> button we added between the last version and the new one (<a href="http://blogs.msdn.com/b/emargraff/archive/2015/09/17/how-to-deploy-an-online-vorlon-js-server-with-authentication.aspx" target="_blank">read more about this</a>).</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/2251.image_70F89328.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0777.image_thumb_5241A93D.png" alt="image" width="482" height="225" border="0"></a></p><p>4 month between the 0.0.15 and the 0.1.0 version and we are now up to almost <strong>1000</strong> commits, <strong>100</strong> pull requests and we closed and fixed <strong>120</strong> issues. Vorlon.js is heading the right direction and this is mainly thanks to the web community: <strong>thanks to you guys</strong> ! 🙂</p><h1 id="What-is-new-in-this-release"><a href="#What-is-new-in-this-release" class="headerlink" title="What is new in this release"></a>What is new in this release</h1><h2 id="Unit-testing-plugin"><a href="#Unit-testing-plugin" class="headerlink" title="Unit testing plugin"></a>Unit testing plugin</h2><p>We now have a unit testing plugin based on qUnit. You can upload you Qunit file or directly type your test on the Vorlon.js dashboard : it will run it on the client side and get you the result summary.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/3441.image_3F872B73.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/7848.image_thumb_2F0EBA78.png" alt="image" width="705" height="412" border="0"></a></p><p>This has been done by <a href="https://github.com/cubitouch" target="_blank">Cubitouch</a>.</p><p>## </p><h2 id="Device-plugin"><a href="#Device-plugin" class="headerlink" title="Device plugin"></a>Device plugin</h2><p>This is inspired from the <a href="http://mydevice.io" target="_blank" rel="noopener">http://mydevice.io</a> website created by <a href="https://twitter.com/goetter" target="_blank">Raphael Goetter</a>. It is giving you information about the device you are running your website on like the pixel ratio, the pixel per points, the meta viewport or even the User Agent.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/3806.image_314B4334.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/7382.image_thumb_059A7938.png" alt="image" width="715" height="369" border="0"></a></p><h2 id="Best-practices-plugin"><a href="#Best-practices-plugin" class="headerlink" title="Best practices plugin"></a>Best practices plugin</h2><p>Creating a web site can be challenging sometimes because you have to follow a lot of rules and best practices to provide the best experience possible. We decided to help you improving your code with Vorlon.js through the Best Practices analyzer. It is performing static and dynamic analytics on your code to tell you what could be better. It is organized into 4 categories:</p><ul><li><strong>Accessibility:</strong> Warn you if you have forgotten thing like <strong>alt</strong> on images or aria attributes</li><li><strong>Mobile Web:</strong> Are you using responsive practices ? do you use the meta viewport tag?</li><li><strong>Performances:</strong> Are your files minified? Did you bundle them do reduce http request count ?</li><li><strong>Web standards:</strong> Are you doing browser detection? Are you correctly using CSS prefixes?</li></ul><p>&nbsp;</p><p>This is only a subset of all the rules we have here, and the two guys who did it (<a href="https://github.com/gleborgne" target="_blank">Guillaume Leborgne</a> and <a href="https://github.com/lahloumehdi" target="_blank">Mehdi Lahlou</a>) made it extensible. You can create your own rules and easily add them to this analyzer.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/5808.image_40EDDEF6.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/5102.image_thumb_3794AA73.png" alt="image" width="787" height="377" border="0"></a></p><h2 id="Improvements-and-other-plugins"><a href="#Improvements-and-other-plugins" class="headerlink" title="Improvements and other plugins :"></a>Improvements and other plugins :</h2><p>Vorlon.js got its first third party plugin : <a href="https://github.com/MicrosoftDX/Vorlonjs/tree/master/plugins%20library" target="_blank">Wappalyzer</a> which is available in the GitHub repo folder <strong>plugins library</strong>.</p><p>The DOM Explorer has been highly improved with :</p><ul><li>All of the nodes displayed (not only body, but head too)</li><li>CSS updates</li><li>A better search UI</li><li>Select a DOM on the client</li></ul><p>&nbsp;</p><p>Object explorer is better integrated in the dashboard and we did some bug fixes.</p><h2 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h2><p>We did a lot of refactoring, performance and stability improvements on the dashboard. You can also refresh the client side from there by clicking on the <strong>reload client</strong> button.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/7282.image_3BA188F6.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6886.image_thumb_38FB5DF6.png" alt="image" width="281" height="357" border="0"></a></p><h2 id="HTTP-Proxy-use-Vorlon-js-without-changing-your-client-code"><a href="#HTTP-Proxy-use-Vorlon-js-without-changing-your-client-code" class="headerlink" title="HTTP Proxy : use Vorlon.js without changing your client code"></a>HTTP Proxy : use Vorlon.js without changing your client code</h2><p>We created a new awesome feature we were able to ship on this version : the <strong>HTTP proxy</strong>. This allows you to inject the <strong>Vorlon.js client code automatically</strong> while browsing your website.</p><p>The way it works is really simple: all the <strong>http requests</strong> you do for your client site are redirected through an http proxy hosted on node.js side by side with the Vorlon.js server. Each time an HTML page goes there we inject the <strong>script</strong> tag you would have had to add yourself.</p><p>To use it: only browse this url : <a href="http://localhost:1337/httpproxy" target="_blank" rel="noopener">http://localhost:1337/httpproxy</a> (or any domain name you are using instead of localhost).</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/4431.image_6205FCF2.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/3542.image_thumb_43BB45FC.png" alt="image" width="610" height="620" border="0"></a></p><p>Enter your url and click on  :</p><ul><li><strong>Open website only</strong> : to open a proxified url for your website</li><li><strong>Open dashboard only</strong>: to open the dashboard plugged to a session according to the proxified version of your website</li><li><strong>Inspect with Vorlon.js</strong>: to open both in one click</li></ul><p>&nbsp;</p><p>You can notice than the URL is different from your original one :</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/8400.image_06795F54.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/4645.image_thumb_47D13562.png" alt="image" width="563" height="223" border="0"></a></p><p>It is composed of multiple parts:</p><p><a href="http://localhost:5050/vorlonproxy/root.html?vorlonproxytarget=[YOURWEBSITEURL]&amp;vorlonsessionid=[DASHBOARDSESSION" target="_blank" rel="noopener">http://localhost:5050/vorlonproxy/root.html?vorlonproxytarget=[YOURWEBSITEURL]&amp;vorlonsessionid=[DASHBOARDSESSION</a>]</p><p>You just have to browse your Vorlon.js instance using the correct session :</p><p><a href="http://localhost:1337/dashboard/[DASHBOARDSESSION]" target="_blank" rel="noopener">http://localhost:1337/dashboard/[DASHBOARDSESSION]</a></p><p>And everything works the same way you already know ! 🙂 Isn’t that awesome ?</p><p>A huge thanks to Guillaume Leborgne who did a really strong work on this one.</p><h2 id="More-improvements"><a href="#More-improvements" class="headerlink" title="More improvements"></a>More improvements</h2><p>We added support for authentication  :</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6237.vorlonauth_333BF3A6.png" target="_blank" rel="noopener"><img title="vorlonauth" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/3858.vorlonauth_thumb_201D57AB.png" alt="vorlonauth" width="665" height="488" border="0"></a></p><p>And automated deployment from GitHub to you Microsoft Azure account:</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6470.image_72111B19.png" target="_blank" rel="noopener"><img title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/8080.image_thumb_713B45E0.png" alt="image" width="644" height="293" border="0"></a></p><p>You can read more about this here : <a href="http://blogs.msdn.com/b/emargraff/archive/2015/09/17/how-to-deploy-an-online-vorlon-js-server-with-authentication.aspx" title="http://blogs.msdn.com/b/emargraff/archive/2015/09/17/how-to-deploy-an-online-vorlon-js-server-with-authentication.aspx" target="_blank" rel="noopener">http://blogs.msdn.com/b/emargraff/archive/2015/09/17/how-to-deploy-an-online-vorlon-js-server-with-authentication.aspx</a></p><p>Do not hesitate to share about this with us on twitter or to create an issue on GitHub: <a href="https://github.com/MicrosoftDX/Vorlonjs" title="https://github.com/MicrosoftDX/Vorlonjs" target="_blank" rel="noopener">https://github.com/MicrosoftDX/Vorlonjs</a></p><p>And if you want to participate, jump in and create new plugins ! Here is something to get you started : <a href="http://blogs.msdn.com/b/emargraff/archive/2015/06/01/how-to-create-a-vorlon-js-plugin.aspx" title="http://blogs.msdn.com/b/emargraff/archive/2015/06/01/how-to-create-a-vorlon-js-plugin.aspx" target="_blank" rel="noopener">http://blogs.msdn.com/b/emargraff/archive/2015/06/01/how-to-create-a-vorlon-js-plugin.aspx</a></p><p>Have fun 🙂</p><blockquote><p><em>If you have any question about this article or Vorlon.js, feel free to contact me on twitter: <a href="http://twitter.com/meulta" target="_blank" rel="noopener">http://twitter.com/meulta</a></em></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you have any question about this article or Vorlon.js, feel free to contact me on twitter: &lt;a href=&quot;http://twitter.co
      
    
    </summary>
    
      <category term="Vorlon.js" scheme="http://yoursite.com/categories/Vorlon-js/"/>
    
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
      <category term="Mobile" scheme="http://yoursite.com/tags/Mobile/"/>
    
      <category term="Vorlon.js" scheme="http://yoursite.com/tags/Vorlon-js/"/>
    
      <category term="Responsive" scheme="http://yoursite.com/tags/Responsive/"/>
    
  </entry>
  
  <entry>
    <title>How to deploy an online Vorlon.js server with authentication</title>
    <link href="http://yoursite.com/2015/09/17/how-to-deploy-an-online-vorlon-js-server-with-authentication/"/>
    <id>http://yoursite.com/2015/09/17/how-to-deploy-an-online-vorlon-js-server-with-authentication/</id>
    <published>2015-09-17T19:35:13.000Z</published>
    <updated>2019-01-15T19:30:04.149Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>If you have any question about this article or Vorlon.js, feel free to contact me on twitter:</em> <a href="http://twitter.com/meulta" target="_blank" rel="noopener"><em>http://twitter.com/meulta</em></a></p></blockquote><p>When we started <a href="http://vorlon.io" target="_blank">Vorlon.js</a> with <a href="http://twitter.com/pierlag" target="_blank">Pierre</a>, <a href="https://twitter.com/deltakosh" target="_blank">David</a> and <a href="https://twitter.com/davrous" target="_blank">David</a> we wanted to keep it as simple as possible. It is our main concern, our mojo. That is why you only have to run <strong>npm install –g vorlon</strong> to get a Vorlon server and that you only have to add <strong>ONE</strong> line of code in your client to connect it to the Vorlon dashboard. This is why in the early version we did not implement any kind of <strong>authentication</strong>.</p><p>In this article I will explain to you why we added this and how to activate it.</p><p>If you never used Vorlon.js, read this first : <a href="http://blogs.msdn.com/b/eternalcoding/archive/2015/04/30/why-we-made-vorlon-js-and-how-to-use-it-to-debug-your-javascript-remotely.aspx" title="http://blogs.msdn.com/b/eternalcoding/archive/2015/04/30/why-we-made-vorlon-js-and-how-to-use-it-to-debug-your-javascript-remotely.aspx" target="_blank" rel="noopener">http://blogs.msdn.com/b/eternalcoding/archive/2015/04/30/why-we-made-vorlon-js-and-how-to-use-it-to-debug-your-javascript-remotely.aspx</a></p><h1 id="Why-we-implemented-authentication"><a href="#Why-we-implemented-authentication" class="headerlink" title="Why we implemented authentication"></a>Why we implemented authentication</h1><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/4274.image_6E59723D.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/7245.image_thumb_673CC676.png" alt="image" width="341" height="179" border="0"></a></p><p>When we did our first demos in public we published our own Vorlon server instance in a Microsoft Azure website. At this time we didn’t have a way to specify a login and password for the dashboard.</p><p><strong>This once led to a huge fail 🙂</strong></p><p>Someone in the public copied the url displayed on my screen and accessed the dashboard from his computer. This messed up with the one displayed on my computer and totally screwed our demo. <strong>YEY ! o/</strong></p><p>From this fail we made the decision to implement a simple authentication. This is obviously helping us for our demos but also you in the case you want to publish a publicly accessible version of the dashboard.</p><h1 id="How-to-deploy-Vorlon-js-online-easily"><a href="#How-to-deploy-Vorlon-js-online-easily" class="headerlink" title="How to deploy Vorlon.js online easily ?"></a>How to deploy Vorlon.js online easily ?</h1><p>Vorlon is really easy to install. All you need to to is having Node.js Package Manager (npm) on you box and run the correct command line. Everything is get to you from the npm platform and you can start you instance typing <strong>vorlon</strong> in your command line.</p><p>From there you need to make your server accessible through the internet and open the correct tcp port etc. etc. This can be a bit complicated and if you do not want to manage that yourself you can use a feature we added for you in our github repository : <a href="https://github.com/microsoftdx/vorlonjs" title="https://github.com/microsoftdx/vorlonjs" target="_blank" rel="noopener">https://github.com/microsoftdx/vorlonjs</a>.</p><p>If you go on the bottom of the repo, in the readme section,  you get access to a <strong>Deploy to Azure</strong> button.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6470.image_72111B19.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/8080.image_thumb_713B45E0.png" alt="image" width="552" height="251" border="0"></a></p><p>By clicking on this, we automatically get you through a 3 steps process which will:</p><ul><li>Create an Azure website on your Azure subscription (*)</li><li>Deploy the latest version of Vorlon on it</li></ul><p>&nbsp;</p><p><strong><em>(*) if you do not have an azure subscription and want to get one you can know more in the last section of this article (with FREE options in it ;-))</em></strong></p><p>All of this is <strong>automated</strong>. You can see a quick video of this here :</p><h1 id="How-to-activate-authentication"><a href="#How-to-activate-authentication" class="headerlink" title="How to activate authentication"></a>How to activate authentication</h1><p><em><strong>PLEASE NOTE:</strong> For now the authentication is only available in the <strong>development-0.0.16</strong> branch on the GitHub repo. To get it, you need to deploy the code from this branch (manually somewhere you want or using Azure deploy). It will be available on the npm package in the 0.0.16 version we should release by the end of september.</em></p><p>We implemented authentication using <a href="http://passportjs.org/" target="_blank">passport.js</a>. We chose to activated a simple mode which you specify a login and password. For now you can only specify one account and we may implemented a more sophisticated version of this later (including <strong>Twitter</strong> and <strong>Facebook</strong> auth and multiple accounts management).</p><p>You can activate a basic authentication on the Vorlon.js dashboard by adding 3 values to the config.json file:</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6254.image_47C704A0.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6675.image_thumb_37BAC69A.png" alt="image" width="692" height="116" border="0"></a></p><p>This file is located in the <strong>/server</strong> folder on your Vorlon.js deployment folder (or in the _node_modules_ folder if you deployed using <strong>npm</strong>).</p><p>Restart your Vorlon instance and <strong>BAM</strong> you are now prompted and asked to give your username and password.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6237.vorlonauth_333BF3A6.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="vorlonauth" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/3858.vorlonauth_thumb_201D57AB.png" alt="vorlonauth" width="662" height="486" border="0"></a></p><p>Easy right? 🙂</p><h1 id="How-to-change-the-config-json-file-when-deployed-on-Azure"><a href="#How-to-change-the-config-json-file-when-deployed-on-Azure" class="headerlink" title="How to change the config.json file when deployed on Azure"></a>How to change the config.json file when deployed on Azure</h1><p>If you chose to deploy Vorlon on an Azure subscription you can access the files hosted on the Azure Web App using Visual Studio Online Monaco. This is a free tool actionable from the <strong>Configure</strong> section of your web app in the Azure Dashboard.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/4382.image_3F6AE15C.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/1033.image_thumb_413B3723.png" alt="image" width="491" height="94" border="0"></a></p><p>You can then get access to the <strong>Edit in Visual Studio Online</strong> button on your web app dashboard page.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/4375.image_37E202A0.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0676.image_thumb_6E52B4A2.png" alt="image" width="298" height="46" border="0"></a></p><p>Navigate to the config.json file and edit it to activate authentication (or add / remove plugins also !):</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/2262.image_521788E6.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/3681.image_thumb_1C35247D.png" alt="image" width="719" height="560" border="0"></a></p><p><em><strong>Note : do not forget to restart the service for this to be taken into account</strong></em>.</p><p>## </p><h1 id="I-want-to-use-an-Azure-Web-App-but-do-not-have-an-account-yet-what-are-my-options"><a href="#I-want-to-use-an-Azure-Web-App-but-do-not-have-an-account-yet-what-are-my-options" class="headerlink" title="I want to use an Azure Web App but do not have an account yet, what are my options ?"></a>I want to use an Azure Web App but do not have an account yet, what are my options ?</h1><p>You can create an account on the <a href="http://azure.microsoft.com" target="_blank" rel="noopener">http://azure.microsoft.com</a> website. This will get you the ability to create free azure web apps. 🙂</p><p>Another way to test it is to get a trial by going here : <a href="https://azure.microsoft.com/en-us/pricing/free-trial/" title="https://azure.microsoft.com/en-us/pricing/free-trial/" target="_blank" rel="noopener">https://azure.microsoft.com/en-us/pricing/free-trial/</a>. You will have a credit card-free account to try azure for one month.</p><p>Finally, if you are a Startup or anything else which matches with the requirements you can create a Bizspark account: <a href="https://www.microsoft.com/bizspark" title="https://www.microsoft.com/bizspark" target="_blank" rel="noopener">https://www.microsoft.com/bizspark</a> this will enable you pretty much the same thing as the trial but going on for 3 years.</p><p>And if you <strong>really</strong> want to host Vorlon elsewhere there are no problems, it will work the same way 🙂</p><blockquote><p><em>If you have any question about this article or Vorlon.js, feel free to contact me on twitter:</em> <a href="http://twitter.com/meulta" target="_blank" rel="noopener"><em>http://twitter.com/meulta</em></a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you have any question about this article or Vorlon.js, feel free to contact me on twitter:&lt;/em&gt; &lt;a href=&quot;http://twitt
      
    
    </summary>
    
      <category term="Vorlon.js" scheme="http://yoursite.com/categories/Vorlon-js/"/>
    
    
      <category term="Vorlon.js" scheme="http://yoursite.com/tags/Vorlon-js/"/>
    
  </entry>
  
  <entry>
    <title>Vorlon.js 0.0.15 is out !</title>
    <link href="http://yoursite.com/2015/06/24/vorlon-js-0-0-15-is-out/"/>
    <id>http://yoursite.com/2015/06/24/vorlon-js-0-0-15-is-out/</id>
    <published>2015-06-24T15:06:48.000Z</published>
    <updated>2019-01-15T23:13:55.499Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>If you have any question about this article or Vorlon.js, feel free to contact me on twitter: <a href="http://twitter.com/meulta" target="_blank" rel="noopener"><em>http://twitter.com/meulta</em></a>__</p></blockquote><p><strong>2 months.</strong> We release Vorlon.js 2 months ago and we cannot tell you how thrilled we are about the response from all of you: the web community.</p><p>When we launched the project during the //BUILD conference keynote, we only had 3 plugins: the DOM Explorer, the Interactive Console and Modernizr. We knew at this time that the key to the success for a project such as Vorlon is the quantity and quality of plugins. When you want to debug your website, you do not want to do much complicated things. You just want to pick the correct plugin and get the correct information.</p><p>This is why we made this project open source. We know you have a lot of ideas to provide great debug experiences to web developers.</p><p><strong>So… 2 months, 66 pull requests, 78 issues and 547 commits later: we are proud to announce that we (YOU and the team) just released Vorlon.js version 0.0.15!</strong></p><p>You can get it by either cloning our GitHub repository (<a href="https://github.com/MicrosoftDX/Vorlonjs" target="_blank" rel="noopener">https://github.com/MicrosoftDX/Vorlonjs</a>) or installing it using <strong>npm</strong> command tool (npm install –g vorlon).</p><p><em><strong>Note</strong>: if you are still wondering what Vorlon.js is, please read this article from David Catuhe first:</em> <a href="http://blogs.msdn.com/b/eternalcoding/archive/2015/04/30/why-we-made-vorlon-js-and-how-to-use-it-to-debug-your-javascript-remotely.aspx" target="_blank" rel="noopener"><em>http://blogs.msdn.com/b/eternalcoding/archive/2015/04/30/why-we-made-vorlon-js-and-how-to-use-it-to-debug-your-javascript-remotely.aspx</em></a>_)._</p><p>Let’s have a look at what is new in this version.</p><h2 id="New-plugins"><a href="#New-plugins" class="headerlink" title="New plugins"></a>New plugins</h2><p><strong>XHR Panel</strong> is here to help you get the list of requests done through XMLHttpRequest. You can choose to enable or disable the recording using the <strong>play</strong> button.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/8712.1_1E06E18A.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="1" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6102.1_thumb_5ABE6A1A.png" alt="1" width="707" height="256" border="0"></a></p><p><strong>Network Monitor</strong> is bringing the ability for you in Vorlon to see all the network exchanges that are done between the browser and the web server. It provides the resource name, the server domain, the type of request, the duration in milliseconds and a nice visual timeline!</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/4807.2_0D24CE4B.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="2" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/3276.2_thumb_50FB9353.png" alt="2" width="723" height="262" border="0"></a></p><p><strong>Resource Explorer</strong> gives you information about what is stored locally on the client browser instance. There is data about <strong>Sessions</strong>, <strong>Cookies</strong>, and <strong>Local Storage</strong>. This can be really useful when you want to debug local cache or login / persistent user data issues.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6874.3_004D08DE.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="3" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/2021.3_thumb_1FFE7357.png" alt="3" width="733" height="467" border="0"></a></p><p><strong>NG Inspector</strong> is a $scope debugger for Angular.js. You have an easy access to all the values stored in each scope. This first version gives you information, a future one will give you the ability to edit your scopes.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/3058.4_16390BDF.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="4" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/2818.4_thumb_7A2ADDA4.png" alt="4" width="738" height="277" border="0"></a></p><h2 id="Plugin-improvements"><a href="#Plugin-improvements" class="headerlink" title="Plugin improvements"></a>Plugin improvements</h2><p><strong>DOM Explorer</strong> has been improved a <strong>LOT</strong>.</p><p>Previously, this plugin was sending all the DOM data from the client to the dashboard each time it changed. This had a huge impact on performances. This is now fixed and you can refresh the DOM from the client either by asking it manually hitting the <strong>refresh</strong> button, or activating the auto-refresh on the <strong>Settings</strong> pane. The autofresh is smarter and uses MutationObserver if available on the client browser.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0638.5_7784B2A4.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="5" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/8105.5_thumb_2FC5BA6E.png" alt="5" width="745" height="307" border="0"></a></p><p>Bonus feature: when the DOM changes on the client side, the round indicator in the refresh button changes to red! 😉</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6567.6_6F9231A4.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="6" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/1682.6_thumb_4F0AF1F2.png" alt="6" width="124" height="53" border="0"></a></p><p>As you can see, the DOM Exploring pane is more beautiful and easier to read.</p><p>You can now edit HTML content and attributes by clicking on it. When hitting ENTER, the changes will be applied on the client side.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/7802.7_384BAA69.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="7" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/7024.7_thumb_680952E8.png" alt="7" width="602" height="38" border="0"></a></p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/1565.8_2A0FC22A.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="8" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0820.8_thumb_3E28DEB3.png" alt="8" width="609" height="33" border="0"></a></p><p>The DOM highlighting feature is easier to access. It happens when your mouse goes over the DOM element on the DOM explorer in the Vorlon dashboard.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6758.9_7910117C.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="9" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6138.9_thumb_5F3E6BFE.png" alt="9" width="715" height="232" border="0"></a></p><p>You can also right click on an element to remove or edit things. This is the best ergonomic way to enable deletion on attributes.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6562.10_7EEFD677.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="10" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/1200.10_thumb_79A0EFC6.png" alt="10" width="384" height="267" border="0"></a></p><p>In the right pane, you have more information that just only the real CSS code now.</p><p>The <strong>layout</strong> tab gives you information that you are used to get in classic F12 tools: the margin, padding, border and size information.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/5852.11_3011A1C9.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="11" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0020.11_thumb_78CB1A8D.png" alt="11" width="416" height="388" border="0"></a></p><p>Same thing for the <strong>computed styles</strong> which contains all the CSS styles applied explicitly and implicitly inherited.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/3386.12_4F56D94D.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="12" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/5857.12_thumb_14060440.png" alt="12" width="418" height="388" border="0"></a></p><p>The <strong>HTML</strong> tab is a better tool to edit text in the DOM. You can do breaklines and apply the change by hitting the save button.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/1588.13_1C89638A.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="13" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/3175.13_thumb_6C6218C6.png" alt="13" width="409" height="382" border="0"></a></p><p>Finally, the <strong>settings</strong> section is where is you can activate the auto refresh for the DOM.</p><p><strong>Interactive Console</strong> have some new features too.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/5287.14_54CA6B53.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="14" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6710.14_thumb_6DC8CC49.png" alt="14" width="707" height="218" border="0"></a></p><p>We have the <strong>windows.onerror</strong>, <strong>console.dir</strong> and complex <strong>object</strong> log support. You can navigate in object properties using a visual tree. Filters are available to only show a subset of logs and you can filter using a search-like text area.</p><h2 id="Other-changes-and-improvements"><a href="#Other-changes-and-improvements" class="headerlink" title="Other changes and improvements"></a>Other changes and improvements</h2><p>We did a lot of other changes in the code organization and structures that are not directly visible in plugins and features.</p><p>For instance, we renamed and moved the catalog.json file which contains the list of plugins and some parameters to the Server folder. It is now called config.json because some parameters are not related to plugins. To avoid copy paste and to simplify debug and usage, we also added an <strong>enabled</strong> boolean parameter in the plugins configuration in config.json. If false for a specific plugin it will not be loaded in the dashboard and not sent to the client in the generated <strong>vorlon.js</strong> file.</p><p>We also split the plugins in 2 separated files. Originally a plugin was composed of only one JavaScript file containing the code for the dashboard and the client side. It was easier when we started the project. Now that more complex plugins are created and for optimization reasons we split this into 2 different files: <strong>yourplugin.client.js</strong> and <strong>yourplugin.dashboard.js</strong>.</p><p>You can read more about the changes we made in the <strong>whatsnew.md</strong> file available on our GitHub repo: <a href="https://github.com/MicrosoftDX/Vorlonjs/blob/master/whatsnew.md" target="_blank" rel="noopener">https://github.com/MicrosoftDX/Vorlonjs/blob/master/whatsnew.md</a></p><h2 id="What’s-next"><a href="#What’s-next" class="headerlink" title="What’s next?"></a>What’s next?</h2><p>We are now working on the next version which will contain new plugins and core improvements. Authentication, webgl, webaudio are part of the list!</p><p>As I said, we want this project to be the web developer’s project. If you have an idea, you can either:</p><ul><li>Submit an issue on GitHub: <a href="https://github.com/MicrosoftDX/Vorlonjs/issues" target="_blank" rel="noopener">https://github.com/MicrosoftDX/Vorlonjs/issues</a></li><li>Create is yourself and submit a pull request (we review this every day!)</li></ul><p><em>Note: to help you learn how to create plugins, I have written this: <a href="http://bit.ly/vorlonplugin" target="_blank" rel="noopener">http://bit.ly/vorlonplugin</a></em></p><p><strong>Let’s work together on Vorlon.js to make debug experiences easier and better.</strong></p><p>Do not forget to follow our team twitter account <a href="http://twitter.com/vorlonjs" target="_blank" rel="noopener">http://twitter.com/vorlonjs</a> !</p><p><em>Written by Etienne Margraff on behalf of all the Vorlon.js core team: David Catuhe, David Rousset, Pierre Lagarde and Justin Garrett.</em></p><blockquote><p><em>If you have any question about this article or Vorlon.js, feel free to contact me on twitter:</em> <a href="http://twitter.com/meulta" target="_blank" rel="noopener"><em>http://twitter.com/meulta</em></a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;If you have any question about this article or Vorlon.js, feel free to contact me on twitter: &lt;a href=&quot;http://twitter.com/me
      
    
    </summary>
    
      <category term="Vorlon.js" scheme="http://yoursite.com/categories/Vorlon-js/"/>
    
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
      <category term="Mobile" scheme="http://yoursite.com/tags/Mobile/"/>
    
      <category term="Vorlon.js" scheme="http://yoursite.com/tags/Vorlon-js/"/>
    
  </entry>
  
  <entry>
    <title>How to create a Vorlon.js plugin</title>
    <link href="http://yoursite.com/2015/06/01/how-to-create-a-vorlon-js-plugin/"/>
    <id>http://yoursite.com/2015/06/01/how-to-create-a-vorlon-js-plugin/</id>
    <published>2015-06-01T07:00:00.000Z</published>
    <updated>2019-01-15T23:13:55.487Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>If you have any question about this article or Vorlon.js, feel free to contact me on twitter:</em> <a href="http://twitter.com/meulta" target="_blank" rel="noopener"><em>http://twitter.com/meulta</em></a></p></blockquote><p>A few weeks ago we released <a href="http://vorlonjs.io/" target="_blank" rel="noopener">Vorlon.js</a> during the keynote of the //BUILD conference.</p><p><strong>Vorlon.js</strong> is a tool which helps you debug your website. You can see it as a remote F12. It is mainly composed of a dashboard which displays data coming from your site.</p><p>To make it working, you only have to reference a script in you site code.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/5287.clip_image002_4CD2F07A.jpg" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="clip_image002" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/7651.clip_image002_thumb_4D4D0447.jpg" alt="clip_image002" width="622" height="504" border="0"></a></p><p>We (<a href="http://twitter.com/pierlag" target="_blank" rel="noopener">Pierre Lagarde</a>, <a href="http://twitter.com/deltakosh" target="_blank" rel="noopener">David Catuhe</a>, <a href="http://twitter.com/davrous" target="_blank" rel="noopener">David Rousset</a> and <a href="http://twitter.com/meulta" target="_blank" rel="noopener">myself</a>) built this primarily to help web developers debugging their websites on <strong>mobile devices</strong>. Of course, proprietary solutions already exist like chrome developer tools to debug chrome mobile, or the equivalent for safari and Visual Studio for Internet Explorer or even Weinre: but none of these is really technology and platform agnostic.</p><p><strong>This is the gap we wanted to fill with Vorlon.js.</strong></p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/3162.clip_image004_600FDED6.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="clip_image004" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/7536.clip_image004_thumb_0080540C.png" alt="clip_image004" width="502" height="316" border="0"></a></p><p>You can install Vorlon.js either from <strong>npm</strong> or by cloning the <strong>GitHub</strong> repository and using gulp to make it ready to use.</p><p>You can find more information about that on our website (<a href="http://vorlonjs.io" target="_blank" rel="noopener">http://vorlonjs.io</a>) or on the blog article my friend David wrote: <a href="http://blogs.msdn.com/b/eternalcoding/archive/2015/04/30/why-we-made-vorlon-js-and-how-to-use-it-to-debug-your-javascript-remotely.aspx" target="_blank" rel="noopener">http://blogs.msdn.com/b/eternalcoding/archive/2015/04/30/why-we-made-vorlon-js-and-how-to-use-it-to-debug-your-javascript-remotely.aspx</a></p><p>To create a plugin for Vorlon, you can use TypeScript or directly JavaScript.</p><p>I will give you the JavaScript and TypeScript code so you can read it in your favorite language 🙂</p><h3 id="What-we-are-going-to-create"><a href="#What-we-are-going-to-create" class="headerlink" title="What we are going to create"></a>What we are going to create</h3><p>In this article I chose to create a plugin which will get device information. This is based on the website <a href="http://mydevice.io/" target="_blank" rel="noopener">http://mydevice.io/</a> created by <a href="https://twitter.com/goetter" target="_blank" rel="noopener">Raphaël Goetter</a>. To keep it simple I will only get the data from the <strong>Sizes</strong> section of the <strong>My Screen</strong> category.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/2526.clip_image006_38E3E7AE.jpg" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="clip_image006" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/2330.clip_image006_thumb_339791AE.jpg" alt="clip_image006" width="579" height="456" border="0"></a></p><p>With this plugin activated, the vorlon.js Dashboard will display size information coming from the client.</p><p>Before going more into details, have a look at this quick video which show you what we will create.</p><p>In this video, I do a demo on a desktop browser but this obviously also works on a mobile phone or tablet.</p><h3 id="First-step-writing-your-code-outside-of-Vorlon-js"><a href="#First-step-writing-your-code-outside-of-Vorlon-js" class="headerlink" title="First step: writing your code outside of Vorlon.js"></a>First step: writing your code outside of Vorlon.js</h3><p>A vorlon.js plugin is nothing more than HTML, CSS and JavaScript code. Your plugin is getting data from the client and sending it to the server to display it on the Dashboard.</p><p>This means that you can first do it without Vorlon.js, write everything on a simple web project and then include it in the Vorlon.js plugin architecture.</p><p>Our plugin will get some information related to the client size and display it on an HTML list. It will also refresh the data when resizing the browser. You can see the full sample running here: <a href="http://meultasamples.azurewebsites.net/vorlonpluginsample/control.html" target="_blank" rel="noopener">http://meultasamples.azurewebsites.net/vorlonpluginsample/control.html</a> (it is not pretty, but does the job! ;-)).</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/5621.clip_image008_782274F7.jpg" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="clip_image008" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/7823.clip_image008_thumb_406FBAC7.jpg" alt="clip_image008" width="353" height="222" border="0"></a></p><p>The HTML code is pretty light:</p><div id="tabset1" class="tabset"><br>  <ul class="tabnavs"><br>    <li><br>      <a class="activeTab" href="#one1">HTML</a><br>    </li><br>  </ul><br><br>  <div id="one1" class="tabpane activePane"><br>    <div style="overflow: auto; white-space: nowrap; color: #000000; background-color: #ffffff; padding: 2px 5px 2px 5px;"><br>      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">!DOCTYPE</span> <span style="color: #ff0000;">html</span><span style="color: #0000ff;">&gt;</span><br> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">html</span> <span style="color: #ff0000;">xmlns</span><span style="color: #0000ff;">=&#8221;<a href="http://www.w3.org/1999/xhtml&#8221;&gt;" target="_blank" rel="noopener">http://www.w3.org/1999/xhtml&#8221;&gt;</a></span><br> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span><br> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;</span><br> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">link</span> <span style="color: #ff0000;">href</span><span style="color: #0000ff;">=&#8221;control.css&#8221;</span> <span style="color: #ff0000;">rel</span><span style="color: #0000ff;">=&#8221;stylesheet&#8221;</span> <span style="color: #0000ff;">/&gt;</span><br> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">script</span> <span style="color: #ff0000;">src</span><span style="color: #0000ff;">=&#8221;vorlon.deviceinfo.js&#8221;&gt;&lt;/</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;</span><br> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span><br> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span><br> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div</span> <span style="color: #ff0000;">id</span><span style="color: #0000ff;">=&#8221;deviceinfo&#8221;</span> <span style="color: #ff0000;">class</span><span style="color: #0000ff;">=&#8221;deviceinfo-container&#8221;&gt;</span><br> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">h2</span><span style="color: #0000ff;">&gt;</span>My Screen<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">h2</span><span style="color: #0000ff;">&gt;</span><br> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ul</span><span style="color: #0000ff;">&gt;</span><br> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>CSS device-width: <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span> <span style="color: #ff0000;">id</span><span style="color: #0000ff;">=&#8221;devicewidth&#8221;&gt;&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>CSS device-height: <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span> <span style="color: #ff0000;">id</span><span style="color: #0000ff;">=&#8221;deviceheight&#8221;&gt;&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>JS screen.width: <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span> <span style="color: #ff0000;">id</span><span style="color: #0000ff;">=&#8221;screenwidth&#8221;&gt;&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>JS window.innerWidth: <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span> <span style="color: #ff0000;">id</span><span style="color: #0000ff;">=&#8221;windowinnerwidth&#8221;&gt;&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>JS body.clientWidth: <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span> <span style="color: #ff0000;">id</span><span style="color: #0000ff;">=&#8221;bodyclientwidth&#8221;&gt;&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>JS screen.availWidth: <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span> <span style="color: #ff0000;">id</span><span style="color: #0000ff;">=&#8221;screenavailwidth&#8221;&gt;&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ul</span><span style="color: #0000ff;">&gt;</span><br> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span><br> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span><br> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">html</span><span style="color: #0000ff;">&gt;</span><br>    </div><br>  </div><br></div><p>It is using the following control.css file:</p><div id="tabset2" class="tabset"><br>  <ul class="tabnavs"><br>    <li><br>      <a class="activeTab" href="#one2">CSS</a><br>    </li><br>  </ul><br><br>  <div id="one2" class="tabpane activePane"><br>    <div style="overflow: auto; white-space: nowrap; color: #000000; background-color: #ffffff; padding: 2px 5px 2px 5px;"><br>      <p><br>        <span style="color: #800000;">.deviceinfo-container</span> {<br> <span style="color: #ff0000;">font-family</span>: <span style="color: #0000ff;">&#8220;Verdana&#8221;</span>, <span style="color: #0000ff;">&#8220;Comic Sans MS&#8221;</span>;<br> }<br>      </p><br><br>      <p><br>        <span style="color: #800000;">.deviceinfo-container</span> <span style="color: #800000;">h2</span> {<br> <span style="color: #ff0000;">font-weight</span>: <span style="color: #0000ff;">normal</span>;<br> }<br>      </p><br><br>      <p><br>        <span style="color: #800000;">.deviceinfo-container</span> <span style="color: #800000;">ul</span> <span style="color: #800000;">li</span> {<br> <span style="color: #ff0000;">font-weight</span>: <span style="color: #0000ff;">bold</span>;<br> }<br>      </p><br><br>      <p><br>        <span style="color: #800000;">.deviceinfo-container</span> <span style="color: #800000;">ul</span> <span style="color: #800000;">span</span> {<br> <span style="color: #ff0000;">font-weight</span>: <span style="color: #0000ff;">normal</span>;<br> }<br>      </p><br>    </div><br>  </div><br></div><p>And the JavaScript code gets the data once the page is loaded and each time the window is resized and updates the list:</p><div id="tabset3" class="tabset"><br>  <ul class="tabnavs"><br>    <li><br>      <a class="activeTab" href="#one3">JavaScript</a><br>    </li><br>  </ul><br><br>  <div id="one3" class="tabpane activePane"><br>    <div style="overflow: auto; white-space: nowrap; color: #000000; background-color: #ffffff; padding: 2px 5px 2px 5px;"><br>      <p><br>        (<span style="color: #0000ff;">function</span>(){<br> <span style="color: #0000ff;">var</span> compute = <span style="color: #0000ff;">function</span>() {<br> document.getElementById(<span style="color: #a31515;">&#8216;devicewidth&#8217;</span>).innerText = document.documentElement.clientWidth + <span style="color: #a31515;">&#8216;px&#8217;</span>;<br> document.getElementById(<span style="color: #a31515;">&#8216;deviceheight&#8217;</span>).innerText = document.documentElement.clientHeight + <span style="color: #a31515;">&#8216;px&#8217;</span>;<br> document.getElementById(<span style="color: #a31515;">&#8216;screenwidth&#8217;</span>).innerText =  screen.width + <span style="color: #a31515;">&#8216;px&#8217;</span>;;<br> document.getElementById(<span style="color: #a31515;">&#8216;windowinnerwidth&#8217;</span>).innerText = window.innerWidth + <span style="color: #a31515;">&#8216;px&#8217;</span>;<br> document.getElementById(<span style="color: #a31515;">&#8216;bodyclientwidth&#8217;</span>).innerText = document.body.clientWidth + <span style="color: #a31515;">&#8216;px&#8217;</span>;<br> document.getElementById(<span style="color: #a31515;">&#8216;screenavailwidth&#8217;</span>).innerText = screen.availWidth + <span style="color: #a31515;">&#8216;px&#8217;</span>;<br> };<br>      </p><br><br>      <p><br>        window.onresize = <span style="color: #0000ff;">function</span>(event) {<br> compute();<br> };<br>      </p><br><br>      <p><br>        document.addEventListener(<span style="color: #a31515;">&#8220;DOMContentLoaded&#8221;</span>, compute);<br>      </p><br><br>      <p><br>        })();<br>      </p><br>    </div><br>  </div><br></div><p>So, until now we are only writing simple classic web code 🙂</p><p>Let’s now have a look at how to transform that into a Vorlon.js plugin!</p><h3 id="Create-the-basic-JavaScript-TypeScript-code-for-the-plugin"><a href="#Create-the-basic-JavaScript-TypeScript-code-for-the-plugin" class="headerlink" title="Create the basic JavaScript/TypeScript code for the plugin"></a>Create the basic JavaScript/TypeScript code for the plugin</h3><p>In Vorlon.js, a plugin is composed of 2 JavaScript classes. The minimum code contains a <strong>constructor</strong> and the <strong>getID</strong> function.</p><p>The first one is the Client side code which inherits the ClientPlugin class. Its name should end by <em>.client.js/ts</em>:</p><div id="tabset4" class="tabset"><br>  <ul class="tabnavs"><br>    <li><br>      <a class="activeTab" href="#one4">JavaScript</a><br>    </li><br>    <li><br>      <a href="#two4">TypeScript</a><br>    </li><br>  </ul><br><br>  <div id="one4" class="tabpane activePane"><br>    <pre style="font-family: consolas; background: white; color: black;"><span style="color: blue;">var</span> <strong>extends = <span style="color: blue;">this</span>.</strong>extends || <span style="color: blue;">function</span> (d, b)<br>{<br>    <span style="color: blue;">for</span> (<span style="color: blue;">var</span> p <span style="color: blue;">in</span> b)<br>        <span style="color: blue;">if</span> (b.hasOwnProperty(p)) d[p] = b[p];<br>     <span style="color: blue;">function</span> <strong>() { <span style="color: blue;">this</span>.constructor = d; }     </strong>.prototype = b.prototype;<br>     d.prototype = <span style="color: blue;">new</span> <strong>();<br>};<br><br><span style="color: blue;">var</span> VORLON;<br><br>(<span style="color: blue;">function</span> (VORLON) {<br>     <span style="color: blue;">var</span> MyDeviceInfoClient = (<span style="color: blue;">function</span> (_super) {         </strong>extends(MyDeviceInfoClient, _super);<br>         <span style="color: blue;">function</span> MyDeviceInfoClient() {<br>             _super.call(<span style="color: blue;">this</span>, <span style="color: #a31515;">“mydeviceinfo”</span>);<br>             <span style="color: blue;">this</span>._ready = <span style="color: blue;">true</span>;<br>         }<br>         MyDeviceInfoClient.prototype.getID = <span style="color: blue;">function</span> () {<br>             <span style="color: blue;">return</span> <span style="color: #a31515;">“MYDEVICEINFO”</span>;<br>         };<br>         <span style="color: blue;">return</span> MyDeviceInfoClient;<br>     })(VORLON.ClientPlugin);<br>     VORLON.MyDeviceInfoClient = MyDeviceInfoClient;<br>     <span style="color: green;">//Register the plugin with vorlon core</span><br>     VORLON.Core.RegisterClientPlugin(<span style="color: blue;">new</span> MyDeviceInfoClient());<br>})(VORLON || (VORLON = {}));</pre><br>  </div>  <div id="two4" class="tabpane"><br>    <pre style="font-family: consolas; background: white; color: black;"><span style="color: blue;">module</span><br> <span style="color: #2b91af;">VORLON</span> {<br>    <span style="color: blue;">export</span> <span style="color: blue;">class</span> <span style="color: #2b91af;">MyDeviceInfoClient</span> <span style="color: blue;">extends</span> ClientPlugin {         <span style="color: blue;">constructor</span>() {<br>             <span style="color: blue;">super</span>(<span style="color: #a31515;">“mydeviceinfo”</span>);<br>             <span style="color: blue;">this</span>._ready = <span style="color: blue;">true</span>;<br>         }<br>         <span style="color: blue;">public</span> getID(): <span style="color: blue;">string</span> {<br>             <span style="color: blue;">return</span> <span style="color: #a31515;">“MYDEVICEINFO”</span>;<br>         }<br>     }<br>             <span style="color: green;">//Register the plugin with vorlon core</span><br>     Core.RegisterClientPlugin(<span style="color: blue;">new</span> <span style="color: #2b91af;">MyDeviceInfoClient</span>());<br>}</pre><br>  </div><br></div><p>The second one is the Dashboard side code and inherits from the DashboardPlugin class. Its name should finish by <em>.dashboard.ts/js</em>:</p><div id="tabset42" class="tabset"><br>  <ul class="tabnavs"><br>    <li><br>      <a class="activeTab" href="#one42">JavaScript</a><br>    </li><br>    <li><br>      <a href="#two42">TypeScript</a><br>    </li><br>  </ul><br><br>  <div id="one42" class="tabpane activePane"><br>    <pre style="font-family: consolas; background: white; color: black;"><span style="color: blue;">var</span> <strong>extends = <span style="color: blue;">this</span>.</strong>extends || <span style="color: blue;">function</span> (d, b) {<br>     <span style="color: blue;">for</span> (<span style="color: blue;">var</span> p <span style="color: blue;">in</span> b) <span style="color: blue;">if</span> (b.hasOwnProperty(p)) d[p] = b[p];<br>     <span style="color: blue;">function</span> <strong>() { <span style="color: blue;">this</span>.constructor = d; }     </strong>.prototype = b.prototype;<br>     d.prototype = <span style="color: blue;">new</span> <strong>();<br>};<br><span style="color: blue;">var</span> VORLON;<br>(<span style="color: blue;">function</span> (VORLON) {<br>     <span style="color: blue;">var</span> MyDeviceInfoDashboard = (<span style="color: blue;">function</span> (_super) {         </strong>extends(MyDeviceInfoDashboard, _super);<br>         <span style="color: blue;">function</span> MyDeviceInfoDashboard() {<br>             _super.call(<span style="color: blue;">this</span>, <span style="color: #a31515;">“mydeviceinfo”</span>, <span style="color: #a31515;">“control.html”</span>, <span style="color: #a31515;">“control.css”</span>);<br>             <span style="color: blue;">this</span>._ready = <span style="color: blue;">true</span>;<br>         }<br>         MyDeviceInfoDashboard.prototype.getID = <span style="color: blue;">function</span> () {<br>             <span style="color: blue;">return</span> <span style="color: #a31515;">“MYDEVICEINFO”</span>;<br>         };<br>         <span style="color: blue;">return</span> MyDeviceInfoDashboard;<br>     })(VORLON.DashboardPlugin);<br>     VORLON.MyDeviceInfoDashboard = MyDeviceInfoDashboard;<br>     <span style="color: green;">//Register the plugin with vorlon core</span><br>     VORLON.Core.RegisterDashboardPlugin(<span style="color: blue;">new</span> MyDeviceInfoDashboard());<br>})(VORLON || (VORLON = {}));</pre><br>  </div>  <div id="two42" class="tabpane"><br>    <pre style="font-family: consolas; background: white; color: black;"><span style="color: blue;">module</span> <span style="color: #2b91af;">VORLON</span> {<br>     <span style="color: blue;">export</span> <span style="color: blue;">class</span> <span style="color: #2b91af;">MyDeviceInfoDashboard</span> <span style="color: blue;">extends</span> DashboardPlugin {<br>         <span style="color: blue;">constructor</span>() {<br>             <span style="color: blue;">super</span>(<span style="color: #a31515;">“mydeviceinfo”</span>, <span style="color: #a31515;">“control.html”</span>, <span style="color: #a31515;">“control.css”</span>);<br>             <span style="color: blue;">this</span>._ready = <span style="color: blue;">true</span>;<br>         }         <span style="color: blue;">public</span> getID(): <span style="color: blue;">string</span> {<br>             <span style="color: blue;">return</span> <span style="color: #a31515;">“MYDEVICEINFO”</span>;<br>         }<br>     }<br>     <span style="color: green;">//Register the plugin with vorlon core</span><br>     Core.RegisterDashboardPlugin(<span style="color: blue;">new</span> <span style="color: #2b91af;">MyDeviceInfoDashboard</span>());<br>}</pre><br>  </div><br></div><p>The ID is simply a string which you can choose. You will need it when you will add your plugin to the dashboard.</p><p>The constructor calls the <strong>super</strong> function and gives it its name. In the Dashboard side class, you also have the control.html and control.css files. This is a prerequisite for it to know these files and load them when necessary.</p><p>The last line of code is registering the plugin to the list managed by the Core (either for the Dasbhoard or the Client side of the plugin). The Core role is to handle all the communication and data exchange between the client and the dashboard.</p><h3 id="Rendering-on-the-dashboard"><a href="#Rendering-on-the-dashboard" class="headerlink" title="Rendering on the dashboard"></a>Rendering on the dashboard</h3><p>Each time it is loading a plugin, the dashboard creates a new tab in its right pane. This is a space for your plugin to render.</p><p>The layout part for a Vorlon.js plugin is contained in an HTML file. In the sample we are going to create, it is called control.html which is a convention in Vorlon.js plugins. It is not displayed by default, you have to manage it in you plugin code. This is done using <strong>_insertHtmlContentAsync</strong> and generally in the <strong>startDashboardSide</strong> function.</p><p><strong>startDashboardSide</strong> is called when the dashboard is instantiating your plugin on the server side. It only has one parameter which is the HTML div where you can render your control. Basically, it is the div that is displayed on your plugin tab.</p><p><strong>_insertHtmlContentAsync</strong> is a helper that loads asynchronously all the files you gave during the plugin construction. The first argument is the render div and the second is a callback function giving you the loaded div once everything is done.</p><p>On the Dashboard side plugin class, add the following code:</p><div id="tabset5" class="tabset"><br>  <ul class="tabnavs"><br>    <li><br>      <a class="activeTab" href="#one5">JavaScript</a><br>    </li><br>    <li><br>      <a href="#two5">TypeScript</a><br>    </li><br>  </ul><br><br>  <div id="one5" class="tabpane activePane"><br>    <div style="overflow: auto; white-space: nowrap; color: #000000; background-color: #ffffff; padding: 2px 5px 2px 5px;"><br>      MyDeviceInfoDashboard.prototype.startDashboardSide = <span style="color: #0000ff;">function</span> (div) {<br>    </div><br>  </div><br></div><p><span style="color: #0000ff;">if</span> (div === <span style="color: #0000ff;">void</span> 0) { div = <span style="color: #0000ff;">null</span>; }</p><p><span style="color: #0000ff;">this</span>._insertHtmlContentAsync(div, <span style="color: #0000ff;">function</span> (filledDiv) {</p><p><span style="color: #008000;">//load data</span></p><p>});</p><p>};</p><div id="two5" class="tabpane"><br>  <div style="overflow: auto; white-space: nowrap; color: #000000; background-color: #ffffff; padding: 2px 5px 2px 5px;"><br>    <span style="color: #0000ff;">public</span> startDashboardSide(div: HTMLDivElement = <span style="color: #0000ff;">null</span>): <span style="color: #0000ff;">void</span> {<br>  </div><br></div><p><span style="color: #0000ff;">this</span>._insertHtmlContentAsync(div, (filledDiv) =&gt; {</p><p><span style="color: #008000;">//load data</span></p><p>})</p><p>}</p><p>On the control.html part, you only have to remove the JavaScript reference which results in the following code:</p><div id="tabset6" class="tabset"><br>  <ul class="tabnavs"><br>    <li><br>      <a class="activeTab" href="#one6">HTML</a><br>    </li><br>  </ul><br><br>  <div id="one6" class="tabpane activePane"><br>    <div style="overflow: auto; white-space: nowrap; color: #000000; background-color: #ffffff; padding: 2px 5px 2px 5px;"><br>      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">!DOCTYPE</span> <span style="color: #ff0000;">html</span><span style="color: #0000ff;">&gt;</span><br>    </div><br>  </div><br></div><p><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">html</span> <span style="color: #ff0000;">xmlns</span><span style="color: #0000ff;">=&#8221;<a href="http://www.w3.org/1999/xhtml&#8221;&gt;" target="_blank" rel="noopener">http://www.w3.org/1999/xhtml&#8221;&gt;</a></span></p><p><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span></p><p><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;</span></p><p><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">link</span> <span style="color: #ff0000;">href</span><span style="color: #0000ff;">=&#8221;control.css&#8221;</span> <span style="color: #ff0000;">rel</span><span style="color: #0000ff;">=&#8221;stylesheet&#8221;</span> <span style="color: #0000ff;">/&gt;</span></p><p><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span></p><p><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span></p><p><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div</span> <span style="color: #ff0000;">id</span><span style="color: #0000ff;">=&#8221;mydeviceinfocontainer&#8221;</span> <span style="color: #ff0000;">class</span><span style="color: #0000ff;">=&#8221;deviceinfo-container&#8221;&gt;</span></p><p><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">h2</span><span style="color: #0000ff;">&gt;</span>My Screen<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">h2</span><span style="color: #0000ff;">&gt;</span></p><p><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ul</span><span style="color: #0000ff;">&gt;</span></p><p><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>CSS device-width: <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span> <span style="color: #ff0000;">id</span><span style="color: #0000ff;">=&#8221;devicewidth&#8221;&gt;&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span></p><p><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>CSS device-height: <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span> <span style="color: #ff0000;">id</span><span style="color: #0000ff;">=&#8221;deviceheight&#8221;&gt;&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span></p><p><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>JS screen.width: <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span> <span style="color: #ff0000;">id</span><span style="color: #0000ff;">=&#8221;screenwidth&#8221;&gt;&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span></p><p><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>JS window.innerWidth: <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span> <span style="color: #ff0000;">id</span><span style="color: #0000ff;">=&#8221;windowinnerwidth&#8221;&gt;&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span></p><p><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>JS body.clientWidth: <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span> <span style="color: #ff0000;">id</span><span style="color: #0000ff;">=&#8221;bodyclientwidth&#8221;&gt;&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span></p><p><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>JS screen.availWidth: <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span> <span style="color: #ff0000;">id</span><span style="color: #0000ff;">=&#8221;screenavailwidth&#8221;&gt;&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span></p><p><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ul</span><span style="color: #0000ff;">&gt;</span></p><p><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span></p><p><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span></p><p><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">html</span><span style="color: #0000ff;">&gt;</span></p><h3 id="Sending-Data-from-the-client-to-the-plugin"><a href="#Sending-Data-from-the-client-to-the-plugin" class="headerlink" title="Sending Data from the client to the plugin"></a>Sending Data from the client to the plugin</h3><p>So, now that you are rendering your control template in the dashboard you need to send it the data from the client. On the initial code it was done on the same page. Now you need to package everything and send it.</p><p>All the communication process is handle for you. You only have to create an object with data in it and call the correct function. It is a helper available in <strong>Core.Messenger</strong> named <strong>sendRealTimeMessage</strong>.</p><p>In the Client side plugin class we add a custom function named sendClientData. It will get all the current size information and send it.</p><div id="tabset61" class="tabset"><br>  <ul class="tabnavs"><br>    <li><br>      <a class="activeTab" href="#one61">JavaScript</a><br>    </li><br>    <li><br>      <a href="#two61">TypeScript</a><br>    </li><br>  </ul><br><br>  <div id="one61" class="tabpane activePane"><br>    <div style="overflow: auto; white-space: nowrap; color: #000000; background-color: #ffffff; padding: 2px 5px 2px 5px;"><br>      MyDeviceInfoClient.prototype.sendClientData = <span style="color: #0000ff;">function</span> () {<br>    </div><br>  </div><br></div><p><span style="color: #0000ff;">var</span> data = {</p><p><span style="color: #a31515;">&#8220;devicewidth&#8221;</span>: document.documentElement.clientWidth,</p><p><span style="color: #a31515;">&#8220;deviceheight&#8221;</span>: document.documentElement.clientHeight,</p><p><span style="color: #a31515;">&#8220;screenwidth&#8221;</span>: screen.width,</p><p><span style="color: #a31515;">&#8220;windowinnerwidth&#8221;</span>: window.innerWidth,</p><p><span style="color: #a31515;">&#8220;bodyclientwidth&#8221;</span>: document.body.clientWidth,</p><p><span style="color: #a31515;">&#8220;screenavailwidth&#8221;</span>: screen.availWidth</p><p>};</p><p>VORLON.Core.Messenger.sendRealtimeMessage(<span style="color: #0000ff;">this</span>.getID(), data, 0 <span style="color: #008000;">/<em> Client </em>/</span>);</p><p>};</p><div id="two61" class="tabpane"><br>  <div style="overflow: auto; white-space: nowrap; color: #000000; background-color: #ffffff; padding: 2px 5px 2px 5px;"><br>    <span style="color: #0000ff;">public</span> sendClientData(): <span style="color: #0000ff;">void</span> {<br>  </div><br></div><p><span style="color: #0000ff;">var</span> data = {</p><p><span style="color: #a31515;">&#8220;devicewidth&#8221;</span> : document.documentElement.clientWidth,</p><p><span style="color: #a31515;">&#8220;deviceheight&#8221;</span> : document.documentElement.clientHeight,</p><p><span style="color: #a31515;">&#8220;screenwidth&#8221;</span> :  screen.width,</p><p><span style="color: #a31515;">&#8220;windowinnerwidth&#8221;</span> : window.innerWidth,</p><p><span style="color: #a31515;">&#8220;bodyclientwidth&#8221;</span> : document.body.clientWidth,</p><p><span style="color: #a31515;">&#8220;screenavailwidth&#8221;</span> : screen.availWidth</p><p>};</p><p>Core.Messenger.sendRealtimeMessage(<span style="color: #0000ff;">this</span>.getID(), data, RuntimeSide.Client);</p><p>}</p><p>sendRealtimeMessage have 3 mandatory parameters :</p><ul><li>The plugin ID (which is the string you return on the getID function)</li><li>The object you want to send (here containing the sizes information)</li><li>The tenant were the request comes from. (Client or Dashboard)</li></ul><p>This function needs to be called each time the dashboard asks for it (when the user switch to this client for instance) and each time the browser size changes.</p><p>Still in the Client side plugin class, we add the <strong>startClientSide</strong> function which will be called at client initialization to register to the window.onresize event:</p><div id="tabset7" class="tabset"><br>  <ul class="tabnavs"><br>    <li><br>      <a class="activeTab" href="#one7">JavaScript</a><br>    </li><br>    <li><br>      <a href="#two7">TypeScript</a><br>    </li><br>  </ul><br><br>  <div id="one7" class="tabpane activePane"><br>    <div style="overflow: auto; white-space: nowrap; color: #000000; background-color: #ffffff; padding: 2px 5px 2px 5px;"><br>      MyDeviceInfoClient.prototype.startClientSide = <span style="color: #0000ff;">function</span> () {<br>    </div><br>  </div><br></div><p><span style="color: #0000ff;">var</span> that = <span style="color: #0000ff;">this</span>;</p><p>window.onresize = <span style="color: #0000ff;">function</span> (event) {</p><p>that.sendClientData();</p><p>};</p><p>};</p><div id="two7" class="tabpane"><br>  <div style="overflow: auto; white-space: nowrap; color: #000000; background-color: #ffffff; padding: 2px 5px 2px 5px;"><br>    <span style="color: #0000ff;">public</span> startClientSide(): <span style="color: #0000ff;">void</span> {<br>  </div><br></div><p><span style="color: #0000ff;">var</span> that = <span style="color: #0000ff;">this</span>;</p><p>window.onresize = (event) =&gt; {</p><p>that.sendClientData();</p><p>};</p><p>}</p><p>Each time the user changes the size of the browser, this code will send the new information to the dashboard.</p><p>And finally we need to add the <strong>refresh</strong> function. It will be called each time the dashboard need the current information from the client.</p><div id="tabset8" class="tabset"><br>  <ul class="tabnavs"><br>    <li><br>      <a class="activeTab" href="#one8">JavaScript</a><br>    </li><br>    <li><br>      <a href="#two8">TypeScript</a><br>    </li><br>  </ul><br><br>  <div id="one8" class="tabpane activePane"><br>    <div style="overflow: auto; white-space: nowrap; color: #000000; background-color: #ffffff; padding: 2px 5px 2px 5px;"><br>      MyDeviceInfoClient.prototype.refresh = <span style="color: #0000ff;">function</span> () {<br>    </div><br>  </div><br></div><p><span style="color: #0000ff;">this</span>.sendClientData();</p><p>};</p><div id="two8" class="tabpane"><br>  <div style="overflow: auto; white-space: nowrap; color: #000000; background-color: #ffffff; padding: 2px 5px 2px 5px;"><br>    <span style="color: #0000ff;">public</span> refresh(): <span style="color: #0000ff;">void</span> {<br>  </div><br></div><p><span style="color: #0000ff;">this</span>.sendClientData();</p><p>}</p><p>And that is all ! 🙂</p><h3 id="Displaying-data-on-the-dashboard"><a href="#Displaying-data-on-the-dashboard" class="headerlink" title="Displaying data on the dashboard"></a>Displaying data on the dashboard</h3><p>Now that the data are sent from the client to the dashboard, you still need to handle them on the other side.</p><p>To do this, you can use the <strong>onRealtimeMessageReceivedFromClientSide</strong> function. It is called each time the client send a message through the Core.Messenger. It only have 1 parameter in which you get the object that you sent.</p><p>In this sample, we only have to use each value and set the correct DOM element to update the list with the new values.</p><p>The following code obviously goes on the Dashboard plugin side classe.</p><div id="tabset9" class="tabset"><br>  <ul class="tabnavs"><br>    <li><br>      <a class="activeTab" href="#one9">JavaScript</a><br>    </li><br>    <li><br>      <a href="#two9">TypeScript</a><br>    </li><br>  </ul><br><br>  <div id="one9" class="tabpane activePane"><br>    <div style="overflow: auto; white-space: nowrap; color: #000000; background-color: #ffffff; padding: 2px 5px 2px 5px;"><br>      MyDeviceInfoDashboard.prototype.onRealtimeMessageReceivedFromClientSide = <span style="color: #0000ff;">function</span> (receivedObject) {<br>    </div><br>  </div><br></div><p>document.getElementById(<span style="color: #a31515;">&#8216;devicewidth&#8217;</span>).innerText = receivedObject.devicewidth + <span style="color: #a31515;">&#8216;px&#8217;</span>;</p><p>document.getElementById(<span style="color: #a31515;">&#8216;deviceheight&#8217;</span>).innerText = receivedObject.deviceheight + <span style="color: #a31515;">&#8216;px&#8217;</span>;</p><p>document.getElementById(<span style="color: #a31515;">&#8216;screenwidth&#8217;</span>).innerText = receivedObject.screenwidth + <span style="color: #a31515;">&#8216;px&#8217;</span>;</p><p>;</p><p>document.getElementById(<span style="color: #a31515;">&#8216;windowinnerwidth&#8217;</span>).innerText = receivedObject.windowinnerwidth + <span style="color: #a31515;">&#8216;px&#8217;</span>;</p><p>document.getElementById(<span style="color: #a31515;">&#8216;bodyclientwidth&#8217;</span>).innerText = receivedObject.bodyclientwidth + <span style="color: #a31515;">&#8216;px&#8217;</span>;</p><p>document.getElementById(<span style="color: #a31515;">&#8216;screenavailwidth&#8217;</span>).innerText = receivedObject.screenavailwidth + <span style="color: #a31515;">&#8216;px&#8217;</span>;</p><p>};</p><div id="two9" class="tabpane"><br>  <div style="overflow: auto; white-space: nowrap; color: #000000; background-color: #ffffff; padding: 2px 5px 2px 5px;"><br>    <span style="color: #0000ff;">public</span> onRealtimeMessageReceivedFromClientSide(receivedObject: <span style="color: #0000ff;">any</span>): <span style="color: #0000ff;">void</span> {<br>  </div><br></div><p>document.getElementById(<span style="color: #a31515;">&#8216;devicewidth&#8217;</span>).innerText = receivedObject.devicewidth + <span style="color: #a31515;">&#8216;px&#8217;</span>;</p><p>document.getElementById(<span style="color: #a31515;">&#8216;deviceheight&#8217;</span>).innerText = receivedObject.deviceheight + <span style="color: #a31515;">&#8216;px&#8217;</span>;</p><p>document.getElementById(<span style="color: #a31515;">&#8216;screenwidth&#8217;</span>).innerText =  receivedObject.screenwidth + <span style="color: #a31515;">&#8216;px&#8217;</span>;;</p><p>document.getElementById(<span style="color: #a31515;">&#8216;windowinnerwidth&#8217;</span>).innerText = receivedObject.windowinnerwidth + <span style="color: #a31515;">&#8216;px&#8217;</span>;</p><p>document.getElementById(<span style="color: #a31515;">&#8216;bodyclientwidth&#8217;</span>).innerText = receivedObject.bodyclientwidth + <span style="color: #a31515;">&#8216;px&#8217;</span>;</p><p>document.getElementById(<span style="color: #a31515;">&#8216;screenavailwidth&#8217;</span>).innerText = receivedObject.screenavailwidth + <span style="color: #a31515;">&#8216;px&#8217;</span>;</p><p>}</p><h3 id="Let’s-test-this"><a href="#Let’s-test-this" class="headerlink" title="Let’s test this!"></a>Let’s test this!</h3><p>To be able to test this plugin, you need to go through some simples steps.</p><p><strong>Compile and minify</strong></p><p>If you chose TypeScript you will need to use a tool such as the TypeScript compiler available on <strong>npm</strong> or integrate yourself in the gulp process by modifying the gulpfile.js available in the /Plugins folder.</p><p>After the compilation from TypeScript to JavaScript is done you need to minify your JS file. It is important that you use this convention:</p><ul><li>vorlon.yourPluginName.client.js (for the maximized version)</li><li>vorlon.yourPluginName.client.min.js (for the minified version)</li><li>vorlon.yourPluginName.dashboard.js (for the maximize²d version)</li><li>vorlon.yourPluginName.dashboard.min.js (for the minified version)</li></ul><p><strong>Copy everthing in the server</strong></p><p>The second step is to copy all your files in the /Server/public/vorlon/plugins folder. There you have to create a folder using your plugin name and put everything under it. This include your html, css and js files.</p><p>Here is how it is done for the plugin we are creating in this article:</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6560.clip_image010_51311EC0.jpg" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="clip_image010" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/7506.clip_image010_thumb_27BCDD80.jpg" alt="clip_image010" width="347" height="202" border="0"></a></p><p><strong>Add your plugin to the catalog.json file</strong></p><p>The next step is to register your plugin in the server. To do this, add a line in the Server/config.json file:</p><div id="tabset10" class="tabset"><br>  <ul class="tabnavs"><br>    <li><br>      <a class="activeTab" href="#one10">JSON</a><br>    </li><br>  </ul><br><br>  <div id="one10" class="tabpane activePane"><br>    <div style="overflow: auto; white-space: nowrap; color: #000000; background-color: #ffffff; padding: 2px 5px 2px 5px;"><br>      <p><br>        {<br>      </p><br><br>      <p><br>        <span style="color: #2e75b6;">&#8220;IncludeSocketIO&#8221;</span>: <span style="color: #0000ff;">true</span>,<br>      </p><br>    </div><br>  </div><br></div><p><span style="color: #2e75b6;">&#8220;plugins&#8221;</span>: [</p><p>{ <span style="color: #2e75b6;">&#8220;id&#8221;</span>: <span style="color: #a31515;">&#8220;CONSOLE&#8221;</span>, <span style="color: #2e75b6;">&#8220;name&#8221;</span>: <span style="color: #a31515;">&#8220;Interactive Console&#8221;</span>, <span style="color: #2e75b6;">&#8220;panel&#8221;</span>: <span style="color: #a31515;">&#8220;bottom&#8221;</span>, <span style="color: #2e75b6;">&#8220;foldername&#8221;</span> : <span style="color: #a31515;">&#8220;interactiveConsole&#8221;}</span>,</p><p>{ <span style="color: #2e75b6;">&#8220;id&#8221;</span>: <span style="color: #a31515;">&#8220;DOM&#8221;</span>, <span style="color: #2e75b6;">&#8220;name&#8221;</span>: <span style="color: #a31515;">&#8220;Dom Explorer&#8221;</span>, <span style="color: #2e75b6;">&#8220;panel&#8221;</span>: <span style="color: #a31515;">&#8220;top&#8221;</span>, <span style="color: #2e75b6;">&#8220;foldername&#8221;</span> : <span style="color: #a31515;">&#8220;domExplorer&#8221;</span> },</p><p>{ <span style="color: #2e75b6;">&#8220;id&#8221;</span>: <span style="color: #a31515;">&#8220;MODERNIZR&#8221;</span>, <span style="color: #2e75b6;">&#8220;name&#8221;</span>: <span style="color: #a31515;">&#8220;Modernizr&#8221;</span>,<span style="color: #2e75b6;">&#8220;panel&#8221;</span>: <span style="color: #a31515;">&#8220;bottom&#8221;</span>, <span style="color: #2e75b6;">&#8220;foldername&#8221;</span> : <span style="color: #a31515;">&#8220;modernizrReport&#8221;</span> },</p><p>{ <span style="color: #2e75b6;">&#8220;id&#8221;</span> : <span style="color: #a31515;">&#8220;OBJEXPLORER&#8221;</span>, <span style="color: #2e75b6;">&#8220;name&#8221;</span> : <span style="color: #a31515;">&#8220;Obj. Explorer&#8221;</span>,<span style="color: #2e75b6;">&#8220;panel&#8221;</span>: <span style="color: #a31515;">&#8220;top&#8221;</span>, <span style="color: #2e75b6;">&#8220;foldername&#8221;</span> : <span style="color: #a31515;">&#8220;objectExplorer&#8221;</span> },</p><p>{ <span style="color: #2e75b6;">&#8220;id&#8221;</span> : <span style="color: #a31515;">&#8220;MYDEVICEINFO&#8221;</span>, <span style="color: #2e75b6;">&#8220;name&#8221;</span> : <span style="color: #a31515;">&#8220;My Device Info&#8221;</span>,<span style="color: #2e75b6;">&#8220;panel&#8221;</span>: <span style="color: #a31515;">&#8220;top&#8221;</span>, <span style="color: #2e75b6;">&#8220;foldername&#8221;</span> : <span style="color: #a31515;">&#8220;mydeviceinfo&#8221;</span> }</p><p>]</p><p>}</p><p>You can find more information about this here: <a href="http://vorlonjs.io/documentation/#vorlonjs-server-advanced-topics" target="_blank" rel="noopener">http://vorlonjs.io/documentation/#vorlonjs-server-advanced-topics</a></p><p><strong>Start the server</strong></p><p>Open a command line on the /Server folder and run the following command:</p><pre class="code">node server.js</pre><p><strong>Launch a client</strong></p><p>Finally, launch a client referencing your vorlon.js local instance. You can use the sample provided in the /Plugins/samples folder.</p><p>Browse the dashboard using <a href="http://localhost:1337/dashboard/default" target="_blank" rel="noopener">http://localhost:1337/dashboard/default</a></p><p>And… rock’n’roll ! 🙂</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/7331.clip_image012_3B6C57C5.jpg" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="clip_image012" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6840.clip_image012_thumb_7A606911.jpg" alt="clip_image012" width="557" height="392" border="0"></a></p><p>You can try to change the size of the browser in which you display your client code, you will see it change live on the dashboard.</p><p>Easy, isn’t it? 🙂</p><h3 id="What-to-do-now"><a href="#What-to-do-now" class="headerlink" title="What to do now?"></a>What to do now?</h3><p>I hope I illustrated here how easy we want the plugin creation to be. You really have to see it like writing classic web code and just split it in two parts:</p><ul><li>The one collecting data on the client</li><li>The one displaying it on the dashboard</li></ul><p>Vorlon.js is not only our project, it is yours also. I am pretty sure that you will have plenty of plugin ideas and we will be happy to integrate them in the project.</p><p>Do not hesitate to fork <a href="https://github.com/MicrosoftDX/Vorlonjs" target="_blank" rel="noopener">https://github.com/MicrosoftDX/Vorlonjs</a> and send us pull request with your creations!</p><p>You can find the full sample here : <a href="https://github.com/meulta/meultasamples/tree/master/vorlonpluginsample" target="_blank" rel="noopener">https://github.com/meulta/meultasamples/tree/master/vorlonpluginsample</a></p><blockquote><p><em>If you have any question about this article or Vorlon.js, feel free to contact me on twitter:</em> <a href="http://twitter.com/meulta" target="_blank" rel="noopener"><em>http://twitter.com/meulta</em></a></p></blockquote><p><strong><em>Etienne Margraff &#8211; HTML5 Evangelist</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you have any question about this article or Vorlon.js, feel free to contact me on twitter:&lt;/em&gt; &lt;a href=&quot;http://twitt
      
    
    </summary>
    
      <category term="Vorlon.js" scheme="http://yoursite.com/categories/Vorlon-js/"/>
    
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
      <category term="Mobile" scheme="http://yoursite.com/tags/Mobile/"/>
    
      <category term="Vorlon.js" scheme="http://yoursite.com/tags/Vorlon-js/"/>
    
  </entry>
  
  <entry>
    <title>Procedural textures in WebGL with Babylon.JS</title>
    <link href="http://yoursite.com/2015/02/22/procedural-textures-in-webgl-with-babylon-js/"/>
    <id>http://yoursite.com/2015/02/22/procedural-textures-in-webgl-with-babylon-js/</id>
    <published>2015-02-22T21:49:51.000Z</published>
    <updated>2019-01-15T23:13:55.487Z</updated>
    
    <content type="html"><![CDATA[<p>This article talks about procedural textures in WebGL and how <a href="http://babylonjs.com/" target="_blank" rel="noopener">Babylon.JS</a> can help you using and creating them.</p><p>This feature is part of the Babylon.JS v2.0 release. Read more about it here : <a href="http://blogs.msdn.com/b/eternalcoding/archive/2015/02/18/what-s-new-in-babylon-js-v2-0.aspx" title="http://blogs.msdn.com/b/eternalcoding/archive/2015/02/18/what-s-new-in-babylon-js-v2-0.aspx" target="_blank" rel="noopener">http://blogs.msdn.com/b/eternalcoding/archive/2015/02/18/what-s-new-in-babylon-js-v2-0.aspx</a></p><blockquote><p><em>Feel free to contact me on twitter (<a href="https://twitter.com/meulta" target="_blank" rel="noopener">@meulta</a>) to ask me any question about this article.</em></p></blockquote><h2 id="What-are-Procedural-Textures"><a href="#What-are-Procedural-Textures" class="headerlink" title="What are Procedural Textures ?"></a>What are Procedural Textures ?</h2><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0116.clip_image002_2.jpg" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="clip_image002" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/2438.clip_image002_thumb.jpg" alt="clip_image002" width="538" height="377" border="0"></a></p><p>In classic texturing, we use 2D images, often pictures that have been shaped specifically to match an object. Let’s imagine you are creating a medieval fantasy game, working on a dwarf pub, where there are multiple, big, &#8220;old school&#8221; wooden tables.</p><p>With classic 2D texturing, you have 3 choices:</p><ul><li>Create a single texture and use it on all of the tables (but every table is going to look the same)</li><li>Create a collection of various wood textures and apply them randomly to each table</li><li>Create a separate texture for each table, insuring that they each look different</li></ul><p>No choice seems to be a good one. Enter <strong>procedural textures</strong>.</p><blockquote><p>Procedural texturing is a way to programmatically create a texture.</p></blockquote><p>There are 2 types of procedural textures: <strong>code-only</strong>, and <strong>code that references some classic 2D images</strong>, sometimes called &#8216;refMaps&#8217; or &#8216;sampler&#8217; images.</p><p>One main advantage of procedural textures is that they are written using a <strong>fragment shader</strong> (using GLSL in the case of Babylon.js). That means that the code generating the texture is executed by the GPU and not the CPU (that is to say, NOT executed in JavaScript code). This has a huge performance impact in a positive way because in WebGL, JavaScript/CPU time is a critical resource: the more is done by the GPU, the better.</p><p>Procedural textures can be generated only once to create the texture which is put into cache <strong>or</strong> every 1, 2, 3, or 4, or more frames to be able to create an animated texture (like fire).</p><p>You can get more information about procedural textures here : <a href="http://en.wikipedia.org/wiki/Procedural_texture" title="http://en.wikipedia.org/wiki/Procedural_texture" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/Procedural_texture</a></p><p>&nbsp;</p><h2 id="How-to-use-standard-procedural-textures-in-Babylon-JS"><a href="#How-to-use-standard-procedural-textures-in-Babylon-JS" class="headerlink" title="How to use standard procedural textures in Babylon.JS ?"></a><strong>How to use standard procedural textures in Babylon.JS ?</strong></h2><p>Like any other feature in Babylon.JS, the best way to test procedural textures (PT) is to use our playground (<a href="http://www.babylonjs-playground.com" target="_blank" rel="noopener">http://www.babylonjs-playground.com</a>).</p><p>You can find a full sample using all standard procedural textures under the <strong>Custom</strong> menu :</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0246.clip_image003_2.png" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="clip_image003" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0285.clip_image003_thumb.png" alt="clip_image003" width="337" height="184" border="0"></a></p><p>Using a procedural texture is done the exact same way it is done for classic textures.</p><p>You first have to create a Material object, attached to the current scene :</p><pre class="code">var marbleMaterial = new BABYLON.StandardMaterial("marbleMat", scene);</pre><p>Then you create the PT using one provided by default, or one you created yourself :</p><pre class="code">var marbleTexture = new BABYLON.MarbleProceduralTexture("marbleText", 512, scene);</pre><p>Finally, you have to set the material associated to the mesh you want to apply the texture to :</p><pre class="code">square.material = marbleMaterial;</pre><p>The result in this case is a random marble texture :</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/2388.clip_image005_2.jpg" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="clip_image005" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/3731.clip_image005_thumb.jpg" alt="clip_image005" width="425" height="241" border="0"></a></p><p>If you want to see the whole code and play with it, you can go there : <a href="http://www.babylonjs-playground.com/#1XPCZC#3" target="_blank" rel="noopener">http://www.babylonjs-playground.com/#1XPCZC#3</a></p><p>You will also see that some procedural textures have additionnal custom properties. For the marble PT, you can set the number of tiles you want to generate in height and width. Default is 3 but you can go far more than that :</p><pre class="code">marbleTexture.numberOfTilesHeight = 6;marbleTexture.numberOfTilesWidth = 6;</pre><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6087.clip_image007_2.jpg" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="clip_image007" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6443.clip_image007_thumb.jpg" alt="clip_image007" width="428" height="234" border="0"></a></p><p>There are a lot more standard PT available by default with Babylon.JS like Fire, Wood or Road.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/8308.clip_image009_2.png" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="clip_image009" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0827.clip_image009_thumb.png" alt="clip_image009" width="240" height="178" border="0"></a> <a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/5050.clip_image011_2.png" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="clip_image011" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/3821.clip_image011_thumb.png" alt="clip_image011" width="361" height="178" border="0"></a></p><p>&nbsp;</p><h2 id="How-to-create-a-custom-procedural-texture-in-Babylon-JS"><a href="#How-to-create-a-custom-procedural-texture-in-Babylon-JS" class="headerlink" title="How to create a custom procedural texture in Babylon.JS ?"></a>How to create a custom procedural texture in Babylon.JS ?</h2><p>As I told you earlier, a procedural texture is an image generated by the GPU using a pixel shader.</p><p>If you do not know what a <strong>Pixel Shader</strong> is I recommend you read this great article by my friend David Catuhe : <a href="http://blogs.msdn.com/b/eternalcoding/archive/2014/04/17/learning-shaders-create-your-own-shaders-with-babylon-js.aspx" target="_blank" rel="noopener">http://blogs.msdn.com/b/eternalcoding/archive/2014/04/17/learning-shaders-create-your-own-shaders-with-babylon-js.aspx</a></p><p>Basically : it is a piece of code that will be called for each pixel the GPU need to render on a specific surface. The syntax is close to C and it always contains at least the <strong>main</strong> function. The role of this function is to define the color for the current pixel using the <strong>gl_FragColor</strong> variable.</p><p>Here is a really simple sample where we use the pixel position in the texture (vUV.x / vUV.y) to define the pixel color :</p><pre class="code">#ifdef GL_ES    precision highp float;#endifvarying vec2 vUV;void main(void) {    gl_FragColor = vec4(vUV.x,vUV.y,-vUV.x, 1.0);}</pre><p>This will result in a beautiful gradient :</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0636.clip_image013_2.jpg" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="clip_image013" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/1157.clip_image013_thumb.jpg" alt="clip_image013" width="444" height="274" border="0"></a></p><p>The main difficulty when creating PTs is that in the pixel shader code, you only know the current pixel you need to choose a color for. You do not have access to the other pixel colors. So you need to use simple and complex algorithm to generate what you want such as the FBM one : <a href="http://en.wikipedia.org/wiki/Fractional_Brownian_motion" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/Fractional_Brownian_motion</a>.</p><p>You can find a lot of samples on <a href="https://www.shadertoy.com/" target="_blank" rel="noopener">https://www.shadertoy.com/</a></p><blockquote><p><strong>So now</strong> : How can you create a custom procedural texture that use this Pixel Shader ?</p></blockquote><p>You have to 3 solutions :</p><ul><li>Embed this pixel shader in the JavaScript code using the ShaderStore</li><li>Store the shader as a Dom Element in your HTML code</li><li>Use a file based custom PT</li></ul><h2 id="How-to-embed-the-pixel-shader-in-the-store"><a href="#How-to-embed-the-pixel-shader-in-the-store" class="headerlink" title="How to embed the pixel shader in the store ?"></a>How to embed the pixel shader in the store ?</h2><p>This can be done easily using the BABYLON.Effect.ShaderStore array :</p><pre class="code">BABYLON.Effect.ShadersStore["LinesPixelShader"] =    "#ifdef GL_ESn" +   "precision highp float;n" +    "#endifnn" +    "varying vec2 vUV; n" +   "void main(void) {n" +    " gl_FragColor = vec4(vUV.x,vUV.y,-vUV.x, 1.0);n" +    "}n" +  "";</pre><p>Note that your shader name should be suffixed with <strong>PixelShader</strong> as the procedural texture shader is always a pixel shader. <strong>Babylon.JS</strong> will automatically understand it is a pixel shader.</p><p>To use this shader, you just have to create a <strong>CustomProceduralTexture</strong> and put the name of your shader in the store. Note that the name of the Shader does not contains the &#8220;<em>PixelShader</em>&#8221; part as when defined in the store.</p><pre class="code">var customProcText = new BABYLON.CustomProceduralTexture(    "customtext",     "Lines",     1024, scene);</pre><p>You can find and play with a full sample in the playground : <a href="http://www.babylonjs-playground.com/#1XPCZC#5" target="_blank" rel="noopener">http://www.babylonjs-playground.com/#1XPCZC#5</a>.</p><h2 id="What-is-a-file-based-Procedural-Texture-and-why-to-use-it"><a href="#What-is-a-file-based-Procedural-Texture-and-why-to-use-it" class="headerlink" title="What is a file based Procedural Texture and why to use it ?"></a>What is a file based Procedural Texture and why to use it ?</h2><p>Until now we only used code generated textures. All standards PTs are done this way so you do not have to get images or some other resources for it to work.</p><p>When you want to create a PT which is using one or more images and/or you want to package this PT to share it with the community, it is a good idea to create a file based one.</p><p>A file based PT is a folder containing at least two files :</p><ul><li><strong>config.json</strong></li><li><strong>custom.fragment.fx</strong></li></ul><p>The config.json file reference the files needed by the texture and the parameters if any. The fragment file contains the shader code.</p><p>To use it, specify the folder path instead of the Pixel Shader name :</p><pre class="code">var customProcText = new BABYLON.CustomProceduralTexture(    "customtext",     "./textures/customProceduralTextures/land",     1024, scene);</pre><p><strong>Find the full code here : <a href="http://www.babylonjs-playground.com/#1XPCZC#4" target="_blank" rel="noopener">http://www.babylonjs-playground.com/#1XPCZC#4</a></strong></p><p>In this sample we use to textures (dirt and grass) and mix them using an FBM algorithm to create a random ground.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/3755.clip_image015_2.jpg" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="clip_image015" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/4505.clip_image015_thumb.jpg" alt="clip_image015" width="544" height="286" border="0"></a><em>**</em></p><h2 id="Want-to-go-further"><a href="#Want-to-go-further" class="headerlink" title="Want to go further ?"></a>Want to go further ?</h2><p>Now that you know the basics, the next step is to read the whole procedural texture documentation on the Babylon.JS wiki : <a href="https://github.com/BabylonJS/Babylon.js/wiki/How-to-use-procedural-textures%3F" target="_blank" rel="noopener">https://github.com/BabylonJS/Babylon.js/wiki/How-to-use-procedural-textures%3F</a></p><p>Then, play with it on the playground or on your own code. I would love to hear feedback from you !</p><p>And do not hesitate to share your creation on the forum : <a href="http://www.html5gamedevs.com/forum/16-babylonjs/" target="_blank" rel="noopener">http://www.html5gamedevs.com/forum/16-babylonjs/</a>.</p><p>A lot of people will be happy to use your textures !</p><blockquote><p><em>Feel free to contact me on twitter (<a href="https://twitter.com/meulta" target="_blank" rel="noopener">@meulta</a>) to ask me any question about this article.</em></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This article talks about procedural textures in WebGL and how &lt;a href=&quot;http://babylonjs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Babylon.JS&lt;/
      
    
    </summary>
    
      <category term="Babylon.js" scheme="http://yoursite.com/categories/Babylon-js/"/>
    
    
      <category term="BabylonJS" scheme="http://yoursite.com/tags/BabylonJS/"/>
    
      <category term="Game" scheme="http://yoursite.com/tags/Game/"/>
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
      <category term="WebGL" scheme="http://yoursite.com/tags/WebGL/"/>
    
  </entry>
  
  <entry>
    <title>7 raisons pour lesquelles Visual Studio 2015 est le meilleur outil pour développer une application Cordova</title>
    <link href="http://yoursite.com/2014/11/17/7-raisons-pour-lesquelles-visual-studio-2015-est-le-meilleur-outil-pour-dvelopper-une-application-cordova/"/>
    <id>http://yoursite.com/2014/11/17/7-raisons-pour-lesquelles-visual-studio-2015-est-le-meilleur-outil-pour-dvelopper-une-application-cordova/</id>
    <published>2014-11-17T23:10:00.000Z</published>
    <updated>2019-01-15T23:13:55.581Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>N’hésitez pas à me contacter sur twitter (@emargraff) pour échanger à propos de cet article</p></blockquote><p>Il y a quelque temps, je vous donnais <a href="http://blogs.msdn.com/b/emargraff/archive/2014/09/11/3-approches-pour-cr-233-er-son-application-mobile-sur-toutes-les-plateformes.aspx" target="_blank" rel="noopener">mon point de vue</a> quant aux différentes possibilités qui s’offrent à vous pour créer une application multi-plateformes. Dans cet article, je vous propose de creuser un peu l’approche web avec <a href="http://cordova.apache.org/" target="_blank" rel="noopener">Apache Cordova</a>.</p><p>Je ne vais pas revenir en détails sur ce qu’est Cordova. Je vous invite à lire l’article que je cite plus haut pour en comprendre les tenants et aboutissants. Pour le décrire en une phrase, il s’agit d’un framework qui vous permet d’utiliser les technologies web HTML5 et Javascript pour :</p><ul><li>Créer une application mobile (i.e. packager un ensemble de pages html dans une application native grâce à un composant de type WebView)</li><li>Donner accès au développeur aux fonctionnalités du téléphone à l’aide d’une librairie Javascript commune à toutes les plateformes</li></ul><p>&nbsp;</p><p><strong>Cordova : fonctionnement standard.</strong></p><p>Comme je l’explique dans mon précédent article concernant la création de jeux avec <a href="http://blogs.msdn.com/b/emargraff/archive/2014/11/12/easy-way-to-create-a-crossplatform-mobile-game-with-webgl-using-babylonjs-and-apache-cordova.aspx" target="_blank" rel="noopener">WebGL, BabylonJS et Cordova (en anglais)</a> : il y a un certain nombre d’étapes à réaliser pour configurer une plateforme qui permettra de compiler des applications <strong>Windows</strong>, <strong>Android</strong> et <strong>iOS</strong> avec Cordova. Il faut installer Android SDK, les outils iOS sur Mac, le JDK Java, les émulateurs, Cordova lui même avec NodeJS par exemple. Bref, c’est complexe et long. Une fois que c’est fait cependant, Cordova est relativement simple à utiliser. Quelques lignes de commandes permettent de réaliser les opérations classiques.</p><pre class="code">cordova create myprojet</pre><p>Créé un projet Cordova.</p><pre class="code">cordova platform add windows</pre><p>Ajoute la plateforme Windows.</p><pre class="code">cordova platform add android</pre><p>Ajoute la plateforme Android.</p><pre class="code">cordova build windows</pre><p>Build la version windows</p><pre class="code">cordova run windows</pre><p>Exécute la version Windows sur un périphérique connecté.</p><p>C’est simple, n’est-ce pas ? Simple oui: mais naviguer entre l’éditeur de code et la ligne de commande ne plait pas à tout le monde. Et surtout: comment faire pour déboguer l’application? Comment faire pour la tester sur iOS alors qu’on est sur Windows et qu’il faut le faire sur un Mac? Même si on a un mac à côté de soi, il faut transférer le code, relancer les lignes de commandes, et même là: comment déboguer ? Et le débug sur Android se fait systématiquement sur un vrai téléphone car l’émulateur est tellement lent…</p><p><strong>Des outils pour Cordova dans Visual Studio 2015?</strong></p><p>Les outils pour Cordova ne sont pas neufs dans Visual Studio. Il existe une extension qui s’appelle <strong>Multi Devices Hybrid Apps</strong> disponible depuis quelques temps pour la version 2013. La version 2015 apporte un grand nombre de nouveautés pour <a href="http://blogs.msdn.com/b/somasegar/archive/2014/11/12/opening-up-visual-studio-and-net-to-every-developer-any-application-net-server-core-open-source-and-cross-platform-visual-studio-community-2013-and-preview-of-visual-studio-2015-and-net-2015.aspx" target="_blank" rel="noopener">le développement dans l’univers Windows</a>, notamment pour .NET. Mais ce n’est pas tout puisqu’un effort considérable est fait pour rendre les développeurs multi-plateformes plus productifs, notamment dans le cas de Cordova.</p><p>L’outil Multi Device Hybrid apps est renommé en <strong>Cordova Tools for Visual Studio.</strong> Il est téléchargeable en tant qu’extension pour Visual Studio 2013 et inclus en standard pour Visual Studio 2015. Parmi la longue liste d’intérêts que vous allez découvrir dans cet article, le premier n’est pas le moindre: l’installation de tous les éléments nécessaires au développement et à la compilation de projets avec Cordova.</p><p>Voici une capture d’écran de l’installeur qui vous donne une idée des outils automatiquement téléchargés et configurés pour vous :</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/7774.Capture_7B3EF51E.png" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="Capture" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/4118.Capture_thumb_587DBD61.png" alt="Capture" width="447" height="628" border="0"></a></p><h1 id="Raison-1-Les-fonctionnalites-d’un-editeur-de-logiciels-moderne"><a href="#Raison-1-Les-fonctionnalites-d’un-editeur-de-logiciels-moderne" class="headerlink" title="Raison 1. Les fonctionnalités d’un éditeur de logiciels moderne"></a>Raison 1. Les fonctionnalités d’un éditeur de logiciels moderne</h1><p>Une fois les outils installés, Visual Studio vous permet de créer un nouveau projet de type <strong>Apache Cordova Apps</strong>.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/2577.image_717685D8.png" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/3225.image_thumb_01A76F34.png" alt="image" width="626" height="456" border="0"></a></p><p>Ce template est disponible en deux langages:</p><ul><li><strong>Javascript</strong>: pour les personnes qui souhaitent rester avec un langage familier et qui maîtrise déjà</li><li><a href="http://www.typescriptlang.org/" target="_blank" rel="noopener">TypeScript</a>: pour les personnes qui veulent conserver une syntaxe d’un langage typé tout en créant du Javascript standard et propre</li></ul><blockquote><p>TypeScript n’est pas le sujet de cet article. Si vous voulez comprendre les avantages de ce langage, je vous invite à lire l’article de <strong>David Catuhe</strong> : <a href="http://blogs.msdn.com/b/eternalcoding/archive/2014/04/28/why-we-decided-to-move-from-plain-javascript-to-typescript-for-babylon-js.aspx" title="http://blogs.msdn.com/b/eternalcoding/archive/2014/04/28/why-we-decided-to-move-from-plain-javascript-to-typescript-for-babylon-js.aspx" target="_blank" rel="noopener">http://blogs.msdn.com/b/eternalcoding/archive/2014/04/28/why-we-decided-to-move-from-plain-javascript-to-typescript-for-babylon-js.aspx</a></p></blockquote><p>Une fois le projet créé, vous disposez d’une arborescence de fichiers claire et de la puissance de Visual Studio pour l’édition avec l’intelliSense dans le code CSS, Javascript et HTML.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/4214.image_5999E176.png" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/2860.image_thumb_2D15D2F2.png" alt="image" width="645" height="366" border="0"></a></p><h1 id="Raison-2-Compiler-pour-la-plateforme-qu’on-veut-rapidement"><a href="#Raison-2-Compiler-pour-la-plateforme-qu’on-veut-rapidement" class="headerlink" title="Raison 2. Compiler pour la plateforme qu’on veut, rapidement"></a>Raison 2. Compiler pour la plateforme qu’on veut, rapidement</h1><p>Le contenu du projet correspond grosso modo à ce que vous retrouvez normalement dans le répertoire <strong>www</strong> d’un projet Cordova. Le fichier index.html est le fichier principal qui sera exécuté au lancement de l’application.</p><p>Pour compiler vers la plateforme de notre choix, plus de lignes de commandes mais un choix dans une simple liste déroulante:</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/1817.image_70806505.png" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/2783.image_thumb_6007F40A.png" alt="image" width="453" height="257" border="0"></a></p><p>Dès lors qu’on compile, la plateforme est ajoutée, préparée et compilée. Rien de magique là dedans, tout est disponible dans le répertoire <strong>bldDebug</strong> (où ‘debug’ est à remplacer par la cible de compilation).</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6445.image_0F5BFA46.png" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/5482.image_thumb_5815730A.png" alt="image" width="510" height="206" border="0"></a></p><blockquote><p>Dans le cas d’une application Windows, il est possible de choisir <strong>Windows Phone (Universal).</strong> Ce qui génère une application universelle Windows <strong>Javascript</strong>. Ceci signifie que dans le cas de la plateforme Windows, l’application générée tourne directement dans le téléphone et non pas dans une WebView. Javascript et HTML sont compris par le système comme langages “natifs”. Les applications Cordova sont donc plus rapides par définition sur ces environnements.</p></blockquote><h1 id="Raison-3-Un-emulateur-Android-ultra-performant-est-disponible-par-defaut"><a href="#Raison-3-Un-emulateur-Android-ultra-performant-est-disponible-par-defaut" class="headerlink" title="Raison 3. Un émulateur Android ultra performant est disponible par défaut"></a>Raison 3. Un émulateur Android ultra performant est disponible par défaut</h1><p>Et quand je dis <strong>ultra performant</strong>, je pèse mes mots. Il boot en quelques secondes, comme c’est le cas pour celui de Windows Phone depuis plusieurs années. La principale raison de cette rapidité c’est qu’il tourne sous <strong>Hyper-V</strong>.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/3108.image_10C2ADC9.png" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/2364.image_thumb_5CB32FD7.png" alt="image" width="645" height="491" border="0"></a></p><p>Il permet entre autres de simuler un mouvement du téléphone pour tester l’usage de l’accéléromètre :</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6740.image_468235E7.png" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6663.image_thumb_3BE989E7.png" alt="image" width="653" height="370" border="0"></a></p><p>Si vous travaillez sur une application qui utilise la géolocalisation, vous pouvez facilement changer celle de l’émulateur :</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/2022.image_1F058674.png" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/7875.image_thumb_101B0502.png" alt="image" width="444" height="397" border="0"></a></p><h1 id="Raison-4-Les-outils-de-debogage"><a href="#Raison-4-Les-outils-de-debogage" class="headerlink" title="Raison 4. Les outils de débogage"></a>Raison 4. Les outils de débogage</h1><p>Un des points cruciaux quand on fait du développement c’est de pouvoir comprendre les problèmes qui surviennent lors de l’exécution de son code. Cela évite de faire des suppositions fausses, ou d’ajouter de la trace inutile partout dans son code au risque de créer un bruit inutile.</p><p>Pour pouvoir déboguer, on attache un débogueur à son code de manière à être prévenu quand une erreur survient, de faire du pas à pas, ou encore de positionner des points d’arrêt pour inspecter certaines variables.</p><p>Dans le cas du développement Web, on utilise l’explorateur de Dom et le débogueur de son navigateur préféré. Par exemple les outils accessibles en appuyant sur F12 dans IE 11 permettent de parcourir l’arborescence HTML, de visualiser le code Javascript, et comprendre les problèmes de performance, de tester en simulant un autre navigateur, etc.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6131.image_57B9B19E.png" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/2248.image_thumb_5D997699.png" alt="image" width="613" height="332" border="0"></a></p><p>Les outils de Visual Studio 2015 pour Cordova offrent la même expérience dans le cas d’une application qui tourne dans un émulateur ou sur un périphérique physique.</p><p>Quand on lance l’application par défaut dans l’émulateur Android, deux outils sont utilisables :</p><ul><li>Le débogueur Javascript qui permet de positionner des points d’arrêt et voir l’état des variables</li></ul><p>&nbsp;</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/2671.image_2510E730.png" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/3716.image_thumb_62A0D5AA.png" alt="image" width="468" height="142" border="0"></a></p><ul><li>Le DOM explorer qui permet de visualiser le code HTML, de comprendre les styles CSS qui s’appliquent à chaque balise et de <strong><span style="text-decoration: underline;">modifier</span></strong> le code et les styles CSS avec un aperçu <strong><span style="text-decoration: underline;">en direct sans avoir besoin de relancer l’application</span></strong></li></ul><p>&nbsp;</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6505.image_2D2AA436.png" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/5125.image_thumb_3AB7F342.png" alt="image" width="785" height="445" border="0"></a></p><blockquote><p>Pour avoir un bon exemple pour tester les outils, vous pouvez télécharger les samples officiels avec 3 versions proposées:</p><ul><li><a href="http://go.microsoft.com/fwlink/?LinkID=398516" target="_blank" rel="noopener">Exemple avec AngularJS</a></li><li><a href="http://go.microsoft.com/fwlink/?LinkID=398517" target="_blank" rel="noopener">Exemple avec BackboneJS</a></li><li><a href="http://go.microsoft.com/fwlink/?LinkID=398518" target="_blank" rel="noopener">Exemple avec WinJS</a></li></ul></blockquote><h1 id="Raison-5-La-gestion-simplifiee-des-parametres-et-des-plugins"><a href="#Raison-5-La-gestion-simplifiee-des-parametres-et-des-plugins" class="headerlink" title="Raison 5. La gestion simplifiée des paramètres et des plugins"></a>Raison 5. La gestion simplifiée des paramètres et des plugins</h1><p>Visual Studio 2015 propose un fichier <strong>config.xml</strong> qui contient la liste des paramètres de configuration de l’application en cours de développement et la liste des plugins à installer à chaque fois que le développeur demande de compiler pour une plateforme donnée.</p><p>Les paramètres sont notamment : le nom de l’application, la page de démarrage (pour changer si vous ne voulez pas que ce soit index.html), la version de l’application, l’orientation possible, etc. Quand on ouvre le fichier <strong>config.xml</strong>, c’est un éditeur graphique qui est proposé par défaut, pour simplifier notre vie 🙂</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6661.image_032C7518.png" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/4300.image_thumb_79699E50.png" alt="image" width="680" height="482" border="0"></a></p><p>Certains paramètres sont également disponibles par plateforme pour <strong>Windows</strong>, <strong>Android</strong> et <strong>iOS</strong>. Il est possible par exemple d’indiquer la version de Windows à cibler :</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/7838.image_3E3AE3E7.png" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/5635.image_thumb_40776CA3.png" alt="image" width="368" height="110" border="0"></a></p><p>la version minimum et maximum du SDK android supportée:</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/1537.image_650B8AD8.png" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/2541.image_thumb_4B3754A9.png" alt="image" width="367" height="161" border="0"></a></p><p>ou encore les informations relatives à iOS  (type d’application, version de l’OS, etc.):</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6523.image_01A806AC.png" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/1263.image_thumb_41747DE2.png" alt="image" width="490" height="165" border="0"></a></p><p>Le fonctionnement classique de Cordova pour donner accès aux fonctionnalités du téléphone est de proposer d’ajouter le plugin correspondant. Il existe un plugin pour l’accéléromètre, un pour la géolocalisation, un autre pour l’accès à l’appareil photo, un pour les contacts du téléphone, etc.</p><blockquote><p><span style="background-color: #ffffff;">La liste complète des plugins officiels est disponible ici : <a title="http://plugins.cordova.io/" href="http://plugins.cordova.io/" target="_blank" rel="noopener">http://plugins.cordova.io/</a></span></p></blockquote><p>Il est possible d’ajouter des plugins officiels ou à partir de git avec la ligne de commande:</p><pre class="code">cordova plugin add {nom du plugin ou url git}</pre><p>Cela demande de connaître les noms des plugins et surtout de les ajouter manuellement, chacun en ligne de commande.</p><p>Visual Studio 2015 permet de modifier cette liste de plugins à partir du fichier de configuration, à l’aide de l’éditeur graphique. On a accès à la liste complète des plugins standards, à l’ajout de plugins personnalisés stockés localement ou à partir de Git et à la liste des plugins déjà installés dans le projet:</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/4073.image_42D8A0B4.png" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/1220.image_thumb_302637AE.png" alt="image" width="710" height="234" border="0"></a></p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/8030.image_3D22A870.png" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6747.image_thumb_5C67DFF4.png" alt="image" width="720" height="243" border="0"></a></p><h1 id="Raison-6-Le-debogage-iOS-a-partir-de-Visual-Studio"><a href="#Raison-6-Le-debogage-iOS-a-partir-de-Visual-Studio" class="headerlink" title="Raison 6. Le débogage iOS à partir de Visual Studio"></a>Raison 6. Le débogage iOS à partir de Visual Studio</h1><p>Rien de tel pour un développeur que de tout faire à partir de son poste et à partir de son éditeur de code préféré. Avec Visual Studio, c’était déjà possible pour les plateformes Android et Windows. Depuis Visual Studio 2015, c’est possible pour iOS également.</p><p>Le principe est très simple : il faut installer sur votre Mac le logiciel <strong>vs-mda-remote</strong> développé par l’équipe qui créé les outils Cordova pour Visual Studio. Il est <a href="https://www.npmjs.org/package/vs-mda-remote" target="_blank" rel="noopener">disponible sur NPM</a> donc l’installation se fait avec une seule ligne de commande :</p><pre class="code">sudo npm install –g vs-mda-remote</pre><p>Une fois que c’est fait, vous avez besoin de configurer Visual Studio pour indiquer le service auquel se connecter. Cela se passe dans les Options (Tools &gt; Options).</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0880.image_3457C186.png" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/3225.image_thumb_63ABC7C1.png" alt="image" width="588" height="343" border="0"></a></p><p>Et voilà ! Vous n’avez plus qu’à lancer en débug, en choisissant l’émulateur cible :</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6888.image_254894BF.png" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/3630.image_thumb_626C5044.png" alt="image" width="563" height="397" border="0"></a></p><h1 id="Raison-7-Visual-Studio-2013-Community-Edition-est-gratuit"><a href="#Raison-7-Visual-Studio-2013-Community-Edition-est-gratuit" class="headerlink" title="Raison 7. Visual Studio 2013 Community Edition est gratuit !"></a>Raison 7. Visual Studio 2013 Community Edition est gratuit !</h1><p>Si vous êtes développeur Open Source ou étudiant, la version Community Edition est gratuite pour vous ! C’est également le cas si vous travaillez dans une société de moins de 250 personnes, 5 licences sont offertes. (plus d’infos : <a href="http://www.microsoft.com/fr-fr/download/details.aspx?id=13350" title="http://www.microsoft.com/fr-fr/download/details.aspx?id=13350" target="_blank" rel="noopener">http://www.microsoft.com/fr-fr/download/details.aspx?id=13350</a>)</p><p>Vous pouvez installer les outils pour Cordova aussi sur cette version 2013 : <a href="http://www.visualstudio.com/en-us/explore/cordova-vs.aspx" title="http://www.visualstudio.com/en-us/explore/cordova-vs.aspx" target="_blank" rel="noopener">http://www.visualstudio.com/en-us/explore/cordova-vs.aspx</a></p><p>Pour Visual Studio 2015, pour l’instant c’est en preview, donc gratuit. Aucune raison de ne pas essayer 🙂</p><p>A télécharger ici : <a href="http://www.visualstudio.com/news/vs2015-preview-vs" title="http://www.visualstudio.com/news/vs2015-preview-vs" target="_blank" rel="noopener">http://www.visualstudio.com/news/vs2015-preview-vs</a></p><p>Visual Studio 2013 community edition: <a href="http://www.visualstudio.com/news/vs2013-community-vs" title="http://www.visualstudio.com/news/vs2013-community-vs" target="_blank" rel="noopener">http://www.visualstudio.com/news/vs2013-community-vs</a></p><blockquote><p><span style="background-color: #ffffff;">N’hésitez pas à me contacter sur twitter (@emargraff) pour échanger à propos de cet article</span></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;N’hésitez pas à me contacter sur twitter (@emargraff) pour échanger à propos de cet article&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Il y a quel
      
    
    </summary>
    
      <category term="Uncategorized" scheme="http://yoursite.com/categories/Uncategorized/"/>
    
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
      <category term="Cordova" scheme="http://yoursite.com/tags/Cordova/"/>
    
      <category term="Visual Studio 2015" scheme="http://yoursite.com/tags/Visual-Studio-2015/"/>
    
  </entry>
  
  <entry>
    <title>Easy way to create a crossplatform mobile game with WebGL using BabylonJS and Apache Cordova</title>
    <link href="http://yoursite.com/2014/11/12/easy-way-to-create-a-crossplatform-mobile-game-with-webgl-using-babylonjs-and-apache-cordova/"/>
    <id>http://yoursite.com/2014/11/12/easy-way-to-create-a-crossplatform-mobile-game-with-webgl-using-babylonjs-and-apache-cordova/</id>
    <published>2014-11-12T22:29:00.000Z</published>
    <updated>2019-01-15T19:30:55.803Z</updated>
    
    <content type="html"><![CDATA[<p>As <a href="http://www.twitter.com/davrous" target="_blank" rel="noopener">David Rousset</a> says in his blog (<a href="http://blogs.msdn.com/b/davrous/archive/2014/06/20/the-web-the-next-game-frontier.aspx" target="_blank" rel="noopener">http://blogs.msdn.com/b/davrous/archive/2014/06/20/the-web-the-next-game-frontier.aspx</a>), the web is <a href="http://blogs.msdn.com/b/davrous/archive/2014/03/20/next-game-frontier-2014-videos-amp-content.aspx" target="_blank" rel="noopener">the next game frontier</a>. I totally agree with him.</p><p align="center"><br>  <i><strong><span style="font-size: large;">The web is everywhere.</span></strong> </i><br></p><p>When you create a responsive website, you eventually get to all the connected devices in the world, with just a URL. That is why there is so much effort and work going on around WebGL and all the frameworks available to help developers creating new gaming experiences on the web.</p><p>Just by giving a look at the <a href="http://babylonjs.com/" target="_blank" rel="noopener">BabylonJS</a> website, you can see how incredible “3D in web” can be.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/3362.image_08308AD5.png" target="_blank" rel="noopener"><img style="float: none; margin-left: auto; display: block; margin-right: auto; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/8765.image_thumb_565D959F.png" alt="image" width="679" height="492" border="0"></a></p><p>When talking about distribution though the web may not be always the best channel. Do people have to search for your game url or run into it by chance? How can you tell the world that your game is really great on mobile and they need to test it?</p><p>Mobile has long time been a great opportunity for game developers. In this world, one did not wait for WebGL to appear to create and distribute applications and games. The application stores of each of the 3 main platforms (iOS, Android, Windows) are a really great way to do this. People go there to search and find games. You want to be there.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0045.image_1AC538F2.png" target="_blank" rel="noopener"><img style="float: none; margin-left: auto; display: block; margin-right: auto; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6786.image_thumb_08A11D85.png" alt="image" width="703" height="381" border="0"></a></p><p>And that is only one of many reasons that having your game available as an application is a good strategy. When you are hosted in an application, many features are available easily: phone contacts to find friends to play with, mobile orientation, storage, push notifications, etc. Moreover, you do not need internet to be playable.</p><p>That being said, what if it could be easy to create a game playable in a full browser experience from a web URL and also as an application with enhanced features? Your game will really be available <strong>every</strong>where, wouldn’t it?</p><p>Well… the good news is that since a few month (and the support of WebGL on every mobile browsers), this dream finally come true!</p><p>Here is a quick video showing you the exact same code running inside an application on iOS, Android and Windows Phone.</p><blockquote><p>You can download the full sample here : <a href="https://meulta.blob.core.windows.net/samples/BabylonJsSample.zip" title="https://meulta.blob.core.windows.net/samples/BabylonJsSample.zip" target="_blank" rel="noopener">https://meulta.blob.core.windows.net/samples/BabylonJsSample.zip</a></p></blockquote><p>In this article, I will explain you how to do this in a really simple way using <strong>Apache Cordova</strong>, <strong>CocoonJS</strong> and the incredibly powerful and simple to use WebGL framework: <strong>BabylonJS</strong>. 🙂</p><blockquote><p><em>Feel free to get in touch with me on twitter to talk about this:</em> <a href="http://twitter.com/emargraff" target="_blank" rel="noopener"><em>http://twitter.com/emargraff</em></a>__</p></blockquote><blockquote><p><em>This article is not going into detail about how to use BabylonJS to create great 3D scenes. To learn more about this, you can follow the MVA course done by <a href="http://channel9.msdn.com/Series/Introduction-to-WebGL-3D-with-HTML5-and-Babylonjs" target="_blank" rel="noopener">David Catuhe</a> and David Rousset</em> <strong>:</strong> <a href="http://channel9.msdn.com/Series/Introduction-to-WebGL-3D-with-HTML5-and-Babylonjs" target="_blank" rel="noopener">http://channel9.msdn.com/Series/Introduction-to-WebGL-3D-with-HTML5-and-Babylonjs</a><em>**</em></p></blockquote><p><strong>To be able to do this, you need to follow some easy steps. Let’s go!</strong></p><h1 id="1-Install-Cordova"><a href="#1-Install-Cordova" class="headerlink" title="1. Install Cordova"></a>1. Install Cordova</h1><p>The easiest way to install Cordova is to use NodeJS Package Manager (npm) that you can get from the <a href="http://www.nodejs.com" target="_blank" rel="noopener">www.nodejs.com</a> website. Once installed, you just have to run the following command line:</p><pre class="code"><b><i>  npm install –g cordova</i></b></pre><p><em>Note: on iOS, you need to prefix all your commands (npm and later Cordova) with <strong>sudo</strong> to run it as an administrator.</em></p><h1 id="2-Install-frameworks"><a href="#2-Install-frameworks" class="headerlink" title="2. Install frameworks"></a>2. Install frameworks</h1><p>Cordova works in a really simple way: you put all your HTML/Javascript code inside a <strong>www</strong> folder and Cordova manage for you the creation of a project for each platform containing your code. On iOS and Android, this code is running inside a WebView even if the HTML code is stored inside the app and not get from an online server. On Windows (Phone and Tablet) this is a bit different as this platform is able to run HTML/Javascript as a first class language to create native apps. That is why there is no WebView on the Windows platform project generated by Cordova and why any Cordova app will be faster on Windows.</p><p>Anyway, you need to install and configure the build tools and frameworks Cordova will be using to compile for each platform:</p><ul><li><a href="http://cordova.apache.org/docs/en/4.0.0/guide_platforms_win8_index.md.html#Windows%20Platform%20Guide" target="_blank" rel="noopener">Tools for Windows</a></li><li><a href="http://cordova.apache.org/docs/en/4.0.0/guide_platforms_android_config.md.html#Android%20Configuration" target="_blank" rel="noopener">Tools for Android</a></li><li><a href="http://cordova.apache.org/docs/en/4.0.0/guide_platforms_ios_config.md.html#iOS%20Configuration" target="_blank" rel="noopener">Tools for iOS</a></li></ul><h1 id="3-Create-the-cordova-project"><a href="#3-Create-the-cordova-project" class="headerlink" title="3. Create the cordova project"></a>3. Create the cordova project</h1><p>This is a really simple step as you only need to run the following command line:</p><pre class="code"><b><i>  cordova create myproject</i></b></pre><p>Where <strong>myproject</strong> have to be replaced with your project name.</p><blockquote><p><em>We usually use a reverse domain name notation to name cordova project such as <strong>com.mycompany.myproject.</strong> This is not mandatory.</em></p></blockquote><p>This command line initialize a directory containing some folders such as <strong>www</strong> which will contain your code and <strong>plugins</strong> where Cordova store the code for each plugin you add.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/1854.image_395BD743.png" target="_blank" rel="noopener"><img style="display: inline; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/7587.image_thumb_61FA434A.png" alt="image" width="437" height="349" border="0"></a></p><blockquote><p><em>A plugin is a Cordova extension generally used to access a specific feature on the phone. There is one for the camera, another one for accelerometer, etc.</em></p></blockquote><h1 id="4-Add-the-BabylonJS-3D-scene"><a href="#4-Add-the-BabylonJS-3D-scene" class="headerlink" title="4. Add the BabylonJS 3D scene"></a>4. Add the BabylonJS 3D scene</h1><p>For this example, we are going to create a really simple scene containing a cube.</p><p>Open the index.html file in an HTML editor such as Visual Studio and delete all its content. From there, you can add any BabylonJS code you want. You can find great samples on the <a href="http://www.babylonjs.com" target="_blank" rel="noopener">www.babylonjs.com</a> website.</p><p>To create a simple 3D scene, copy the following code in you index.html file:</p><p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>  <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">&lt;</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: maroon;">html</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;"><span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: red;">xmlns</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">=&#8221;<a href="http://www.w3.org/1999/xhtml&#8221;&gt;" target="_blank" rel="noopener">http://www.w3.org/1999/xhtml&#8221;&gt;</a></span><br></p><p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>  <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">&lt;</span><span class="GramE"><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: maroon;">head</span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">&gt;</span><br></p><p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>  </p><p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">   <span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">&lt;</span><span class="GramE"><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: maroon;">meta</span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;"><span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: red;">http-equiv</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">=&#8221;Content-Type&#8221;</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;"><span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: red;">content</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">=&#8221;text/html; charset=utf-8&#8243;</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;"><span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">/&gt;</span><br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">   <span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">&lt;</span><span class="GramE"><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: maroon;">title</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">&gt;</span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">Babylon &#8211; Basic scene</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">&lt;/</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: maroon;">title</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">&gt;</span><!--?xml namespace=namespace prefix="o" ?--><br>  </p>  <p><br>    &nbsp;<br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">   <span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">&lt;</span><span class="GramE"><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: maroon;">style</span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">&gt;</span><br>  </p>  <p><br>    &nbsp;<br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">       <span class="Apple-converted-space"> </span></span><span class="GramE"><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: maroon;">html</span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">,<span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: maroon;">body</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;"><span class="Apple-converted-space"> </span>{</span><br>  </p>  <p><br>    &nbsp;<br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">           <span class="Apple-converted-space"> </span></span><span class="GramE"><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: red;">overflow</span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">:<span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">hidden</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">;</span><br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">           <span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: red;">width</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">:<span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">100%</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">;</span><br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">           <span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: red;">height</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">:<span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">100%</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">;</span><br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">           <span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: red;">margin</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">:<span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;"></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">;</span><br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">           <span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: red;">padding</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">:<span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;"></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">;</span><br>  </p>  <p><br>    &nbsp;<br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">       <span class="Apple-converted-space"> </span>}</span><br>  </p>  <p><br>    &nbsp;<br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">       <span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: maroon;">#renderCanvas</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;"><span class="Apple-converted-space"> </span>{</span><br>  </p>  <p><br>    &nbsp;<br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">           <span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: red;">width</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">:<span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">100%</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">;</span><br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">           <span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: red;">height</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">:<span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">100%</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">;</span><br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">           <span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: red;">touch-action</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">:<span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">none</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">;</span><br>  </p>  <p><br>    &nbsp;<br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">       <span class="Apple-converted-space"> </span>}</span><br>  </p>  <p><br>    &nbsp;<br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">   <span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">&lt;/</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: maroon;">style</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">&gt;</span><br>  </p>  <p><br>    &nbsp;<br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">   <span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">&lt;</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: maroon;">script</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;"><span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: red;">src</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">=&#8221;babylon.js&#8221;&gt;&lt;/</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: maroon;">script</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">&gt;</span><br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">   <span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">&lt;</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: maroon;">script</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;"><span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: red;">src</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">=&#8221;hand.js&#8221;&gt;&lt;/</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: maroon;">script</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">&gt;</span><br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">   <span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">&lt;</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: maroon;">script</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;"><span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: red;">src</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">=&#8221;cordova.max.js&#8221;&gt;&lt;/</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: maroon;">script</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">&gt;</span><br>  </p>  <p><br>    &nbsp;<br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">&lt;/</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: maroon;">head</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">&gt;</span><br>  </p>  <p><br>    &nbsp;<br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">&lt;</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: maroon;">body</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">&gt;</span><br>  </p>  <p><br>    &nbsp;<br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">   <span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">&lt;</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: maroon;">canvas</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;"><span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: red;">id</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">=&#8221;renderCanvas&#8221;&gt;&lt;/</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: maroon;">canvas</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">&gt;</span><br>  </p>  <p><br>    &nbsp;<br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">   <span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">&lt;</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: maroon;">script</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;"><span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: red;">type</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">=&#8221;text/javascript&#8221;&gt;</span><br>  </p>  <p><br>    &nbsp;<br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">       <span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: green;">// Get the canvas element from our HTML below</span><br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">       <span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">var</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;"><span class="Apple-converted-space"> </span>canvas = document.getElementById(</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: #a31515;">&#8220;renderCanvas&#8221;</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">);</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;"> </span><br>  </p>  <p><br>    &nbsp;<br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">       <span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: green;">// Load the BABYLON 3D engine</span><br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">       <span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">var</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;"><span class="Apple-converted-space"> </span>engine =<span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">new</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;"><span class="Apple-converted-space"> </span>BABYLON.Engine(canvas,<span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">true</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">);</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;"> </span><br>  </p>  <p><br>    &nbsp;<br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">       <span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: blue;">var</span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;"><span class="Apple-converted-space"> </span>cube;</span><br>  </p>  <p><br>    &nbsp;<br>  </p>  <p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>    </p><p class="MsoNormal" style="white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;"><br>      <span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: black;">       <span class="Apple-converted-space"> </span></span><span lang="EN-US" style="font-size: 9.5pt; font-family: consolas; background: white; color: green;">// &#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-</span><br>    </p><pre><code>&lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;  &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;       &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: green;&quot;&gt;// Here begins a function that we will &amp;#8216;call&amp;#8217; just after it&amp;#8217;s built&lt;/span&gt;&lt;/p&gt;&lt;p&gt;  &amp;nbsp;&lt;/p&gt;&lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;  &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;       &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: blue;&quot;&gt;var&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;createScene =&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: blue;&quot;&gt;function&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;() {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;  &amp;nbsp;&lt;/p&gt;&lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;  &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;           &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: green;&quot;&gt;// Now create a basic Babylon Scene object&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;  &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;           &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: blue;&quot;&gt;var&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;scene =&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: blue;&quot;&gt;new&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;BABYLON.Scene(engine);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;  &amp;nbsp;&lt;/p&gt;&lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;  &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;  &amp;nbsp;&lt;/p&gt;&lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;  &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;           &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: green;&quot;&gt;// This creates and positions a free camera&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;  &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;           &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;GramE&quot;&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: blue;&quot;&gt;var&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;camera =&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: blue;&quot;&gt;new&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;BABYLON.TouchCamera(&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: #a31515;&quot;&gt;&amp;#8220;camerarotate&amp;#8221;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;, &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: blue;&quot;&gt;new&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;BABYLON.Vector3(0, 0, 10), scene);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;  &amp;nbsp;&lt;/p&gt;&lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;  &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;           &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;camera.rotation =&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: blue;&quot;&gt;new&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;BABYLON.Vector3(0, Math.PI, 0);&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;  &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;  &amp;nbsp;&lt;/p&gt;&lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;  &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;           &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: green;&quot;&gt;// This attaches the camera to the canvas&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;  &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;           &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;camera.attachControl(canvas,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: blue;&quot;&gt;false&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;);&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;  &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;  &amp;nbsp;&lt;/p&gt;&lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;  &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;           &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: green;&quot;&gt;// This creates a light, aiming 0,1,0 &amp;#8211; to the sky.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;  &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;           &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: blue;&quot;&gt;var&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;light =&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: blue;&quot;&gt;new&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;BABYLON.HemisphericLight(&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: #a31515;&quot;&gt;&amp;#8220;light1&amp;#8221;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: blue;&quot;&gt;new&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;BABYLON.Vector3(0, 1, 0), scene);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;  &amp;nbsp;&lt;/p&gt;&lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;  &lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;    &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;           &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: green;&quot;&gt;// Dim the light a small amount&lt;/span&gt;  &lt;/p&gt;  &lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;    &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;           &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;light.intensity = .5;&lt;/span&gt;  &lt;/p&gt;  &lt;p&gt;    &amp;nbsp;  &lt;/p&gt;  &lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;    &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;           &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;cube =&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: blue;&quot;&gt;new&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;BABYLON.Mesh.CreateBox(&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: #a31515;&quot;&gt;&amp;#8220;box&amp;#8221;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;, 2, scene);&lt;/span&gt;  &lt;/p&gt;  &lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;    &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;           &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;cube.material =&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: blue;&quot;&gt;new&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;BABYLON.StandardMaterial(&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: #a31515;&quot;&gt;&amp;#8220;Mat&amp;#8221;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;, scene);&lt;/span&gt;  &lt;/p&gt;  &lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;    &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;cube.rotation.z = 100;&lt;/span&gt;  &lt;/p&gt;  &lt;p&gt;    &amp;nbsp;  &lt;/p&gt;  &lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;    &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;           &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;cube.rotation.y = 100;&lt;/span&gt;  &lt;/p&gt;  &lt;p&gt;    &amp;nbsp;  &lt;/p&gt;  &lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;    &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;           &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: green;&quot;&gt;// Register a render loop to repeatedly render the scene&lt;/span&gt;  &lt;/p&gt;  &lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;    &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;           &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;engine.runRenderLoop(&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: blue;&quot;&gt;function&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;() {&lt;/span&gt;  &lt;/p&gt;  &lt;p&gt;    &amp;nbsp;  &lt;/p&gt;  &lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;    &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;               &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;scene.render();&lt;/span&gt;  &lt;/p&gt;  &lt;p&gt;    &amp;nbsp;  &lt;/p&gt;  &lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;    &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;           &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;});&lt;/span&gt;  &lt;/p&gt;  &lt;p&gt;    &amp;nbsp;  &lt;/p&gt;  &lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;    &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;           &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: green;&quot;&gt;// Leave this function&lt;/span&gt;  &lt;/p&gt;  &lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;    &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;           &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: blue;&quot;&gt;return&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;scene;&lt;/span&gt;  &lt;/p&gt;  &lt;p&gt;    &amp;nbsp;  &lt;/p&gt;  &lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;    &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;       &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;}; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: green;&quot;&gt;// End of createScene function&lt;/span&gt;  &lt;/p&gt;  &lt;p&gt;    &amp;nbsp;  &lt;/p&gt;  &lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;    &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;       &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: green;&quot;&gt;// &amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;-&lt;/span&gt;  &lt;/p&gt;  &lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;    &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;       &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: green;&quot;&gt;// Now, call the createScene function that you just finished creating&lt;/span&gt;  &lt;/p&gt;  &lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;    &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;       &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: blue;&quot;&gt;var&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;scene = createScene();&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt; &lt;/span&gt;  &lt;/p&gt;  &lt;p&gt;    &amp;nbsp;  &lt;/p&gt;  &lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;    &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt;   &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: blue;&quot;&gt;&lt;/&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: maroon;&quot;&gt;script&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: blue;&quot;&gt;&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: black;&quot;&gt; &lt;/span&gt;  &lt;/p&gt;  &lt;p&gt;    &amp;nbsp;  &lt;/p&gt;  &lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;    &lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: blue;&quot;&gt;&lt;/&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: maroon;&quot;&gt;body&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: blue;&quot;&gt;&gt;&lt;/span&gt;  &lt;/p&gt;  &lt;p class=&quot;MsoNormal&quot; style=&quot;white-space: normal; word-spacing: 0px; text-transform: none; color: #000000; font: 11pt calibri, sans-serif; margin: 0cm 0cm 0pt; letter-spacing: normal; text-indent: 0px; -webkit-text-stroke-width: 0px;&quot;&gt;    &lt;span style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: blue;&quot;&gt;&lt;/&lt;/span&gt;&lt;span class=&quot;GramE&quot;&gt;&lt;span style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: maroon;&quot;&gt;html&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 9.5pt; font-family: consolas; background: white; color: blue;&quot;&gt;&gt;&lt;/span&gt;  &lt;/p&gt;  &lt;p&gt;    You also need to download the Babylon.js and hand.js files that are available here: &lt;a href=&quot;https://github.com/BabylonJS/Babylon.js&quot;&gt;https://github.com/BabylonJS/Babylon.js&lt;/a&gt; and here: &lt;a href=&quot;http://handjs.codeplex.com/&quot;&gt;http://handjs.codeplex.com/&lt;/a&gt;.  &lt;/p&gt;  &lt;p&gt;    You can test the result in a web browser, here is how this simple cube looks in IE.  &lt;/p&gt;  &lt;p&gt;    &lt;a href=&quot;https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/2335.image_73D967C8.png&quot;&gt;&lt;img style=&quot;display: inline; border-width: 0px;&quot; title=&quot;image&quot; src=&quot;https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/5482.image_thumb_1C77D3D0.png&quot; alt=&quot;image&quot; width=&quot;568&quot; height=&quot;395&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;  &lt;/p&gt;  &lt;h1&gt;    5. Add the Windows platform  &lt;/h1&gt;  &lt;p&gt;    Now that all our web code is ready and available in the&lt;b&gt; www&lt;/b&gt; folder, all we have to do is add the project to deploy on each platform. This is done using Cordova command line tool.  &lt;/p&gt;  &lt;pre class=&quot;code&quot;&gt;&lt;b&gt;&lt;i&gt;  cordova platform add Windows&lt;/i&gt;&lt;/b&gt;&lt;/pre&gt;  &lt;p&gt;    This command “simply” create a Visual Studio solution and some projects in it which are hosting the files from the &lt;b&gt;www&lt;/b&gt; folder. As I said earlier in this article, the Windows project generated by Cordova take advantage of the Windows platform and generate a native html/javascript app. That is why you will not find a WebView in the Visual Studio projects.  &lt;/p&gt;  &lt;p&gt;    You can use the Microsoft tooling to build, deploy and debug the files generated by cordova but this is only mandatory for the debug part. Building and deploying can be done directly from the command line.  &lt;/p&gt;  &lt;p&gt;    For instance, building is done through this line:  &lt;/p&gt;  &lt;pre class=&quot;code&quot;&gt;&lt;b&gt;&lt;i&gt;  cordova build windows&lt;/i&gt;&lt;/b&gt;&lt;/pre&gt;  &lt;p&gt;    The build instruction is a shortcut for 2 successive commands which are: &lt;b&gt;prepare&lt;/b&gt; and &lt;b&gt;compile&lt;/b&gt;. You can use them independently to respectively: update the platform generated project with any change done in the cordova project files and compile the platform.  &lt;/p&gt;  &lt;p&gt;    You can run your app on a specific platform using the &lt;b&gt;run&lt;/b&gt; command. It is possible to run it in a local emulator or a physical device connecting through USB.  &lt;/p&gt;  &lt;p&gt;    This will run on the phone emulator  &lt;/p&gt;  &lt;pre class=&quot;code&quot;&gt;&lt;b&gt;&lt;i&gt;  cordova run windows --emulator -- --phone &lt;/i&gt;&lt;/b&gt;&lt;/pre&gt;  &lt;p&gt;    This will run on a physical phone:  &lt;/p&gt;  &lt;pre class=&quot;code&quot;&gt;&lt;b&gt;&lt;i&gt;  cordova run windows --device -- --phone&lt;/i&gt;&lt;/b&gt;&lt;/pre&gt;  &lt;blockquote&gt;    &lt;p&gt;      &lt;i&gt;Please note the double dashes ‘&amp;#8211;‘ which are not a typing mistake I made here but a required command in the line.&lt;/i&gt;    &lt;/p&gt;  &lt;/blockquote&gt;  &lt;p&gt;    And here is the result on the Windows Phone emulator:  &lt;/p&gt;  &lt;p&gt;    &lt;a href=&quot;https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/8078.image_2C1A6F92.png&quot;&gt;&lt;img style=&quot;display: inline; border-width: 0px;&quot; title=&quot;image&quot; src=&quot;https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0160.image_thumb_22C13B0F.png&quot; alt=&quot;image&quot; width=&quot;275&quot; height=&quot;504&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;  &lt;/p&gt;  &lt;h1&gt;    6. Going crossplatform  &lt;/h1&gt;  &lt;p&gt;    The good part is that all of these steps are working exactly the same on iOS. All you need is having a mac somewhere, copy your folder on it and run the following command:  &lt;/p&gt;  &lt;pre class=&quot;code&quot;&gt;&lt;b&gt;&lt;i&gt;  cordova platform add ios&lt;/i&gt;&lt;/b&gt;&lt;/pre&gt;  &lt;p&gt;    Then running the &lt;b&gt;&lt;i&gt;run&lt;/i&gt;&lt;/b&gt; command for ios will deploy and run it on the emulator or the device connected.  &lt;/p&gt;  &lt;p&gt;    However, for this to work you need to configure your environment according to this documentation: &lt;a href=&quot;http://cordova.apache.org/docs/en/4.0.0/guide_platforms_ios_index.md.html#iOS%20Platform%20Guide&quot;&gt;http://cordova.apache.org/docs/en/4.0.0/guide_platforms_ios_index.md.html#iOS%20Platform%20Guide&lt;/a&gt; and you need to be on iOS 8 or higher because the iOS webview only support WebGL since this specific version.  &lt;/p&gt;  &lt;p&gt;    On Android, this is pretty much the same story. There is a problem though : the Android webview only support WebGL from the 36.0.0.0 version which is going to be shipped with Android L and not available at the moment I am writing this article.  &lt;/p&gt;  &lt;p&gt;    So: what can you do to get a crossplatform game using WebGL? There is a really simple solution provided by &lt;a href=&quot;https://www.ludei.com/cocoonjs/&quot;&gt;CocoonJS.&lt;/a&gt;  &lt;/p&gt;  &lt;p&gt;    CocoonJS is a solution to create multiplatform applications. It provides an extension to the cordova command line and give you a cordova plugin call &lt;i&gt;WebView+&lt;/i&gt;. This plugin is based on Chromium and enables WebGL even if you are on a version of Android where the webview does not support it by default. In other words, CocoonJS replaces the default WebView used by Cordova by this WebView+.  &lt;/p&gt;  &lt;p&gt;    To do it, you need to install CocoonJS using the following command line:  &lt;/p&gt;  &lt;pre class=&quot;code&quot;&gt;&lt;b&gt;&lt;i&gt;  npm install -g cocoonjs&lt;/i&gt;&lt;/b&gt;&lt;/pre&gt;  &lt;p&gt;    This install a new command line tool which is working exactly the same cordova does. To add the android platform, run this:  &lt;/p&gt;  &lt;pre class=&quot;code&quot;&gt;&lt;b&gt;&lt;i&gt;  Cocoonjs platform add android&lt;/i&gt;&lt;/b&gt;&lt;/pre&gt;  &lt;p&gt;    Then, to force cordova to use the WebView+ instead of the classic one:  &lt;/p&gt;  &lt;pre class=&quot;code&quot;&gt;&lt;b&gt;&lt;i&gt;  Cocoonjs plugin add com.ludei.webview.plus&lt;/i&gt;&lt;/b&gt;&lt;/pre&gt;  &lt;p&gt;    &amp;nbsp;  &lt;/p&gt;  &lt;p&gt;    &lt;a href=&quot;https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6886.image_04768419.png&quot;&gt;&lt;img style=&quot;display: inline; border-width: 0px;&quot; title=&quot;image&quot; src=&quot;https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/5265.image_thumb_0FA29F14.png&quot; alt=&quot;image&quot; width=&quot;636&quot; height=&quot;111&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;  &lt;/p&gt;  &lt;p&gt;    Build it, run it, and there you go: it just works! 🙂  &lt;/p&gt;  &lt;blockquote&gt;    &lt;p&gt;      &lt;i&gt;Be aware that when you do this, the &lt;strong&gt;WebView+&lt;/strong&gt; is using chrome, which cannot be used in emulators. When you add it to your project you are stuck with real device debugging. &lt;/i&gt;    &lt;/p&gt;  &lt;/blockquote&gt;  &lt;h1&gt;    7. Getting the most of each platform  &lt;/h1&gt;  &lt;p&gt;    We now have a multiplatform HTML5 game that is distributed as an application and can be discovered from each application store. That is great but we can do more.  &lt;/p&gt;  &lt;p&gt;    As I told you, the second Cordova goal is to make us capable of easily using the phone features from Javascript in a uniform way across platforms. This is done through plugins. You can find the whole plugin list on the Apache Cordova website: &lt;a href=&quot;http://cordova.apache.org/docs/en/3.6.0/cordova_plugins_pluginapis.md.html#Plugin%20APIs&quot;&gt;http://cordova.apache.org/docs/en/3.6.0/cordova_plugins_pluginapis.md.html#Plugin%20APIs&lt;/a&gt;  &lt;/p&gt;  &lt;p&gt;    I am pretty sure you will find a lot of great ideas on what plugins to use and be creative about it 🙂  &lt;/p&gt;  &lt;h1&gt;    8. Working with great tools : Visual Studio 2015  &lt;/h1&gt;  &lt;p&gt;    This is not new that &lt;strong&gt;Microsoft&lt;/strong&gt; is deeply involved in the Open Source community and working a lot with open source projets. With Visual Studio 2015, a new step is being taken mainly because this important things:  &lt;/p&gt;  &lt;ul&gt;    &lt;li&gt;      Visual Studio 2015 is going to be FREE for students and open source developers (yes &lt;b&gt;FREE&lt;/b&gt;).    &lt;/li&gt;    &lt;li&gt;      Visual Studio 2015 comes by default with Cordova tooling for create, improving and debugging cordova projects.    &lt;/li&gt;    &lt;li&gt;      Visual Studio 2015 comes with a really really really fast android emulator you can use to debug your android apps (created using Xamarin, C++ or Cordova technologies)    &lt;/li&gt;    &lt;li&gt;      Cordova tooling will help you get plug and play iOS debugging through network    &lt;/li&gt;  &lt;/ul&gt;  &lt;p&gt;    &amp;nbsp;  &lt;/p&gt;  &lt;p&gt;    A real advantage is also that it is going to install all the tools you need to compile on Android as you can see on this screenshot from the installer.  &lt;/p&gt;  &lt;p&gt;    &lt;a href=&quot;https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0714.Capture_593862AB.png&quot;&gt;&lt;img style=&quot;display: inline; border-width: 0px;&quot; title=&quot;Capture&quot; src=&quot;https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/7838.Capture_thumb_68715C29.png&quot; alt=&quot;Capture&quot; width=&quot;412&quot; height=&quot;578&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;  &lt;/p&gt;  &lt;p&gt;    Why am I talking about this here? Obviously because this can be a great tool for you to create crossplatform WebGL games. Run it, attach Visual Studio 2015 to it and let the debug begin 🙂  &lt;/p&gt;  &lt;p&gt;    You can learn more about this here:  &lt;/p&gt;  &lt;ul&gt;    &lt;li&gt;      Visual Studio tools for Apache Cordova : &lt;a href=&quot;http://www.visualstudio.com/en-us/explore/cordova-vs.aspx&quot;&gt;http://www.visualstudio.com/en-us/explore/cordova-vs.aspx&lt;/a&gt;    &lt;/li&gt;    &lt;li&gt;      Android emulator : &lt;a href=&quot;http://channel9.msdn.com/events/Visual-Studio/Connect-event-2014/516&quot;&gt;http://channel9.msdn.com/events/Visual-Studio/Connect-event-2014/516&lt;/a&gt;    &lt;/li&gt;    &lt;li&gt;      More information about Visual Studio 2015 and the open source world : &lt;a href=&quot;http://www.hanselman.com/blog/AnnouncingNET2015NETasOpenSourceNETonMacandLinuxandVisualStudioCommunity.aspx&quot;&gt;http://www.hanselman.com/blog/AnnouncingNET2015NETasOpenSourceNETonMacandLinuxandVisualStudioCommunity.aspx&lt;/a&gt;    &lt;/li&gt;  &lt;/ul&gt;  &lt;h1&gt;    Conclusion  &lt;/h1&gt;  &lt;p&gt;    You just get through really simple steps to create you app using web languages. In a near future I really hope that every platform is going to understand HTML and Javascript as first class languages to create apps. Windows does it in Windows RT apps since a lot a time and Windows Phone is there since the last version (8.1). That could be a great advance for the future of mobile apps and games.  &lt;/p&gt;  &lt;blockquote&gt;    &lt;p&gt;      &lt;i&gt;Do not hesitate to share your thoughts and tests on the comments or on twitter! (&lt;a href=&quot;http://twitter.com/emargraff&quot;&gt;@emargraff&lt;/a&gt;)&lt;/i&gt;    &lt;/p&gt;  &lt;/blockquote&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;As &lt;a href=&quot;http://www.twitter.com/davrous&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;David Rousset&lt;/a&gt; says in his blog (&lt;a href=&quot;http://blogs.msdn
      
    
    </summary>
    
      <category term="Uncategorized" scheme="http://yoursite.com/categories/Uncategorized/"/>
    
    
      <category term="BabylonJS" scheme="http://yoursite.com/tags/BabylonJS/"/>
    
      <category term="Game" scheme="http://yoursite.com/tags/Game/"/>
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
      <category term="Mobile" scheme="http://yoursite.com/tags/Mobile/"/>
    
      <category term="Cordova" scheme="http://yoursite.com/tags/Cordova/"/>
    
  </entry>
  
  <entry>
    <title>3 approches pour créer son application mobile sur toutes les plateformes</title>
    <link href="http://yoursite.com/2014/09/11/3-approches-pour-crer-son-application-mobile-sur-toutes-les-plateformes/"/>
    <id>http://yoursite.com/2014/09/11/3-approches-pour-crer-son-application-mobile-sur-toutes-les-plateformes/</id>
    <published>2014-09-11T07:11:40.000Z</published>
    <updated>2019-01-15T19:31:02.597Z</updated>
    
    <content type="html"><![CDATA[<p><em>N’hésitez pas à me contacter sur</em> <a href="https://twitter.com/emargraff" target="_blank" rel="noopener"><em>twitter</em></a> <em>pour échanger à propos de cet article !</em></p><p>C’est un sujet très à la mode et qui anime pas mal de mes discussions au quotidien : quelle est la meilleure stratégie pour développer une application mobile ?</p><p>Même si j’aimerais évidemment vivre dans un monde idéal où tout le monde utiliserait des Windows Phone, il faut accepter la réalité : les gens ont accès à 3 plateformes majeures en terme de mobilité. Si je décide de créer une application et que j’ai pour objectif d’être le prochain <strong>Yo</strong> ou <strong>Instagram,</strong> je n’ai pas d’autres choix que d’adresser ces 3 cibles pour ne pas me couper d’une partie du monde.</p><p>C’est là que la prise de décision importante a lieu : <strong>quelle stratégie adopter pour rendre mon application multiplateformes ?</strong></p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/1778.image_6FC0B5DB.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/8233.image_thumb_58953B5D.png" alt="image" width="321" height="322" border="0"></a></p><p>Ce qu’on voit le plus souvent, notamment dans l’univers des startups, c’est l’impression que le choix a été écarté très rapidement pour se concentrer sur une seule plateforme pendant les premiers mois (et parfois années). Je pense que c’est une erreur et qu’il faut choisir avec soin l’approche que l’on va avoir en ayant toujours pour objectif d’être disponible sur toutes les cibles <strong>le plus tôt possible</strong>.</p><p>Chaque système d’exploitation mobile à ses propres conventions, ses propres règles de design et d’ergonomie. Les utilisateurs s’attendent à retrouver ses codes familiers. La difficulté est là : <strong>on doit penser générique dans le développement mais spécifique dans le résultat</strong>. Il faut donner à l’utilisateur l’impression qu’on a créé l’application pour lui et uniquement pour lui.</p><p>Pour ça, 3 approches : le <strong>natif</strong>, le <strong>quasi-natif</strong> permettant de partager du code et le <strong>web</strong> embarqué dans une application native.</p><p>Contrairement à ce que j’entend parfois, le choix n’est pas si évident et il faut prendre un peu de recul pour faire celui qui répondra au mieux à ses propres objectifs (et moyens).</p><h1 id="1-Le-natif"><a href="#1-Le-natif" class="headerlink" title="1. Le natif"></a>1. Le natif</h1><p>C’est l’approche la plus naturelle. On développe séparément pour chacune des plateformes dans le langage prévu pour elles.</p><p>Cette technique permet d’obtenir le résultat le plus proche du système ciblé. On utilise les outils dédiés à chacun des environnements et on dispose des meilleures conditions pour la réalisation et les tests de notre application.</p><p>Dans le cas de Windows Phone par exemple, on utilisera la <a href="http://msdn.microsoft.com/en-us/library/windows/apps/ff431813(v=vs.105" target="_blank" rel="noopener">barre d’application</a>.aspx) alors que cette fonctionnalité est représentée différemment sur Android. Sur Windows Phone toujours, on utilisera le <a href="http://msdn.microsoft.com/en-us/library/windows/apps/ff941098(v=vs.105" target="_blank" rel="noopener">principe du pivot</a>.aspx) alors que la tendance sur iOS est de présenter des onglets plus classiques.</p><p>Faire du natif, c’est faire 3 développements distincts. Très peu de choses sont mutualisées (peut-être la créa graphique ?) et chaque mise à jour ou correctif devra être réalisé 3 fois.</p><p>Cependant, cela offre :</p><ul><li>La souplesse nécessaire à la réalisation d’une application qui colle parfaitement à l’écosystème de chaque téléphone</li><li>Des performances qui <em>peuvent</em> êtres excellentes (relatif à la qualité du développement, évidemment !)</li></ul><p>&nbsp;</p><p>C’est l’approche la plus chère et qui nécessite le plus de compétences et de connaissances mais c’est celle qui donne souvent la meilleure garantie de qualité.</p><p>A noter cependant que C++ peut être une alternative aux langages classiques de chaque plateforme. On retrouve même des outils comme ceux fournis par <a href="http://www.embarcadero.com/fr/products/cbuilder/ios-development" target="_blank" rel="noopener">embarcadero</a> pour partager ce code. C++ a par exemple été adopté par <a href="http://oleb.net/blog/2014/05/how-dropbox-uses-cplusplus-cross-platform-development/" target="_blank" rel="noopener">dropbox</a> pour partager le code métier (i.e. non lié à l’interface graphique) entre iOS et Android. Même si l’expérience n’a pas été poussée jusqu’à Windows Phone pour l’instant, c’est tout à fait possible car les plateformes Windows supportent C++ comme langage de développement mobile.</p><p>Pour faire du natif dans l’univers Microsoft, vous utilisez <a href="http://www.visualstudio.com/" target="_blank" rel="noopener">Visual Studio</a> et vous avez le choix entre plusieurs technos comme le C#, C++ ou HTML/Javascript (qui sera interprétée nativement par le système).</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/5037.image_286DF09A.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/8117.image_thumb_25C7C59A.png" alt="image" width="481" height="395" border="0"></a></p><p><em><strong>Note</strong> : dans certains cas particuliers où il est acceptable de ne développer que pour une plateforme, on peut développer (nativement) une seule fois pour deux environnements si on reste dans le même univers. Par exemple, si la société ‘’A’’ développe une application pour ses commerciaux à la fois sur tablette et sur téléphone, elle peut choisir uniquement l’écosystème Microsoft car elle maitrise le parc matériel. Il est alors possible de partager une très grande partie du code entre la version Windows 8 (tablette) et Windows Phone (téléphone) avec le principe des</em> <a href="http://msdn.microsoft.com/fr-fr/library/windows/apps/dn609832.aspx" target="_blank" rel="noopener"><em>applications universelles</em></a> <em>tout en restant sur une version native</em>.</p><h1 id="2-Le-quasi-natif"><a href="#2-Le-quasi-natif" class="headerlink" title="2. Le quasi-natif"></a><strong>2. Le quasi-natif</strong></h1><p>Si on écarte la solution native pour des raisons de coût et de réactivité lors des mises à jour et des correctifs, il faut se diriger vers une approche qui permet de partager le maximum de code possible.</p><p>Une des manières d’arriver à ce résultat est ce qu’on va appeler le ‘’quasi-natif’’. Le principe est simple : on utilise un seul langage de programmation et on développe une seule fois mais on utilise un ensemble d’outils pour compiler et packager une version de l’application adaptée à chaque cible. Pour cela, soit le code ‘’générique’’ est traduit dans le langage compris par la plateforme puis compilé nativement, soit il est compris et exécuté par une <a href="http://fr.wikipedia.org/wiki/Machine_virtuelle#Machine_virtuelle_de_haut_niveau_2" target="_blank" rel="noopener">machine virtuelle</a> lors de l’exécution.</p><p>Deux frameworks/outils sortent du lot pour atteindre cet objectif : <strong>Xamarin</strong> et <strong>Titanium</strong>.</p><p><a href="http://xamarin.com/" target="_blank" rel="noopener"><strong>Xamarin</strong></a>, permet de développer une application pour iOS, Android et Windows/Windows Phone en utilisant le <a href="http://msdn.microsoft.com/fr-fr/library/kx37x362.aspx" target="_blank" rel="noopener">langage de programmation C</a>#. Le développement de l’interface graphique se fait dans le langage de chaque plateforme ce qui permet de se caler sur l’ergonomie attendue par les utilisateurs. Depuis quelques temps, il est également possible d’utiliser des contrôles graphiques communs avec <a href="http://xamarin.com/forms" target="_blank" rel="noopener">Xamarin.Forms</a>. Les contrôles seront adaptés à chaque plateforme lui donner le look and feel adapté.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/5342.example-app_2E4B24E4.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="example-app" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/0160.example-app_thumb_006062DD.png" alt="example-app" width="569" height="374" border="0"></a></p><p>Même si ces composants Xamarin.Forms sont assez jeunes, ça laisse supposer qu’on pourra bientôt partager le code entre différentes plateformes sans pour autant trop lisser l’ergonomie.</p><p><em>Bonus ultime :</em> on utilise l’environnement de développement <a href="http://visualstudio.com/" target="_blank" rel="noopener">Visual Studio</a> qui permet d’avoir accès notamment à des éditeurs <a href="http://fr.wikipedia.org/wiki/What_you_see_is_what_you_get" target="_blank" rel="noopener">WYSIWYG</a> pour la création de l’interface graphique. On profite également de tous les outils puissants qui nous assistent dans la création d’applications dans cet outil (<a href="http://msdn.microsoft.com/fr-fr/library/hcw1s69b.aspx" target="_blank" rel="noopener">IntelliSense</a> et <a href="http://msdn.microsoft.com/fr-fr/library/sc65sadd.aspx" target="_blank" rel="noopener">Debug</a> notamment).</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/1018.image_36D114DF.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6646.image_thumb_2D77E05C.png" alt="image" width="569" height="339" border="0"></a></p><p><a href="http://www.appcelerator.com/titanium/" target="_blank" rel="noopener"><strong>Titanium</strong></a> quant à lui repose sur un concept proche de Xamarin mais qui s’appuie sur le langage Javascript. Le code est traduit en partie lors de l’exécution et en partie à la génération de l’application dans l’équivalent en langage natif, donc très proche de ce qui est compris par le téléphone. On imagine donc un avantage en termes de performances.</p><p>Ce qu’on constate en premier lieu, quand on aborde Titanium, c’est que l’interface graphique est définie en créant des objets Javascript et non pas en utilisant un langage de description comme c’est le cas notamment pour Android et Windows Phone. C’est à mon sens un peu fastidieux et complexe à maintenir. On peut cependant le coupler à <a href="http://docs.appcelerator.com/titanium/3.0/#!/guide/Alloy_XML_Markup" target="_blank" rel="noopener">Alloy</a> qui permet de définir l’interface graphique en XML.</p><p>Un autre aspect important à noter est que Titanium n’offre pour l’instant pas le support quasi-natif sur Windows Phone, puisque dans ce cas c’est une webview qui est utilisée (sur le même principe que la stratégie 3.).</p><p>Si l’équipe de développement ne maîtrise que Javascript, c’est une alternative intéressante. Si vous maîtrisez C# ou ne craignez pas un léger apprentissage je ne peux que vous conseiller Xamarin.</p><p><strong>Par où commencer</strong> si vous ne connaissez pas C# mais vous voulez vous lancer dans Xamarin ? Je vous invite à suivre la très bonne introduction proposée par <a href="https://twitter.com/sebastienpertus" target="_blank" rel="noopener">Sébastien</a> à travers ce cours gratuit : <a href="http://www.microsoftvirtualacademy.com/training-courses/les-fondamentaux-du-developpement-en-c-sharp" title="http://www.microsoftvirtualacademy.com/training-courses/les-fondamentaux-du-developpement-en-c-sharp" target="_blank" rel="noopener">http://www.microsoftvirtualacademy.com/training-courses/les-fondamentaux-du-developpement-en-c-sharp</a> et pour découvrir les bases de Xamarin, <a href="https://twitter.com/thomas_lebrun" target="_blank" rel="noopener">Thomas</a> et <a href="https://twitter.com/stepheup/" target="_blank" rel="noopener">Stéphanie</a> vous proposent ce cours : <a href="http://www.microsoftvirtualacademy.com/training-courses/developper-une-application-cross-plateformes-avec-xamarin" title="http://www.microsoftvirtualacademy.com/training-courses/developper-une-application-cross-plateformes-avec-xamarin" target="_blank" rel="noopener">http://www.microsoftvirtualacademy.com/training-courses/developper-une-application-cross-plateformes-avec-xamarin</a></p><h1 id="3-Le-web"><a href="#3-Le-web" class="headerlink" title="3. Le web"></a>3. Le web</h1><p>La 3ème approche est une extension naturelle d’une des fonctions premières des smartphones depuis leur apparition : l’accès au world wide web. Accéder au web à partir d’un mobile signifie notamment une chose : il y a un navigateur web sur le téléphone et on peut y exécuter de l’HTML et du Javascript.</p><p>Depuis toujours, on essaye de rendre nos sites web accessibles sur les mobiles. On a commencé en développant une version Mobile distincte puis en appliquant tous les principes qu’on regroupe derrière le terme <strong>responsive</strong>.</p><p>En partant de ces deux constats (le web marche sur tous les mobiles et on sait faire des sites qui s’affichent correctement sur un mobile) on peut se demander : pourquoi ne pas packager nos sites dans une application ? Cela aurait plein d’avantages : elle serait disponible sur les stores, en jouant un peu avec le CSS on peut donner l’impression que c’est une application classique et comme c’est de l’HTML c’est multiplateforme par définition.</p><p>Créer une application web/mobile c’est très simple : on créé une application native vide, qui contient un composant ‘’<em>navigateur web</em>’’ et on y affiche les fichiers HTML/Javascript qui correspondent à l’application. Une fois qu’on a cette <strong>coquille native</strong>, il suffit de mettre à jour les fichiers web dans l’application pour la faire évoluer. On crée cette coquille pour chaque plateforme, on utilise le même code HTML à l’intérieur et on a notre application multi-devices. Très simple, et très rapide à mettre en œuvre !</p><p>Là où l’idée se corse, c’est quand on veut utiliser des fonctionnalités du téléphone. La sauvegarde de fichier en local par exemple, l’utilisation de l’appareil photo ou encore l’accès aux contacts. C’est possible, mais complexe à réaliser. C’est là qu’entrent en jeu les frameworks comme <strong>PhoneGap</strong>.</p><p>PhoneGap est à l’origine une technologie créée par une société indépendante, puis rachetée par <strong>Adobe</strong>. Quand Adobe acquiert PhoneGap, elle décide de ne conserver que les services payants et confie le cœur de la technologie à la fondation Apache. C’est là qu’est né <strong>Cordova</strong>. Au final, PhoneGap s’appuie sur une version de Cordova et c’est donc exactement la même chose (modulo les offres proposées par Adobe, notamment de compilation et packaging automatisés).</p><p>A quoi sert PhoneGap/Cordova ? C’est ce qui va nous permettre de passer d’un mode “je bricole mon application web à la main” à un mode industriel ou “Cordova génère la coquille pour chaque plateforme”. Et en plus de générer la coquille, Cordova fourni un framework Javascript qui nous permet de communiquer avec les fonctionnalités du téléphone.</p><p><a href="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/1300.image_35FB3FA6.png" target="_blank" rel="noopener"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/66/21/metablogapi/6201.image_thumb_2CA20B23.png" alt="image" width="327" height="429" border="0"></a></p><p>J’apprécie particulièrement cette approche car elle permet de rendre possible des scénarios où on partage un code quasi-identique entre un site web responsive et une application mobile qui apporte des fonctionnalités supplémentaires (le push, la géoloc, etc.).</p><p><a href="http://msopentech.com/" target="_blank" rel="noopener">Microsoft OpenTech</a> propose un plugin à Visual Studio (<a href="http://msdn.microsoft.com/en-us/vstudio/dn722381.aspx" target="_blank" rel="noopener">Multi-Device Hybrid Apps</a>) qui simplifie la création d’applications Cordova. Cela permet entre autre de pouvoir faire du debugging pas à pas dans votre émulateur Android par exemple. Pour le débug dans l’émulateur de Windows Phone, je vous invite à lire l’article de <a href="https://twitter.com/davrous/" target="_blank" rel="noopener">David</a> : <a href="http://blogs.msdn.com/b/davrous/archive/2014/07/21/how-to-remotely-debug-and-profile-the-performance-of-your-html5-websites-amp-apps-on-windows-phone.aspx" title="http://blogs.msdn.com/b/davrous/archive/2014/07/21/how-to-remotely-debug-and-profile-the-performance-of-your-html5-websites-amp-apps-on-windows-phone.aspx" target="_blank" rel="noopener">http://blogs.msdn.com/b/davrous/archive/2014/07/21/how-to-remotely-debug-and-profile-the-performance-of-your-html5-websites-amp-apps-on-windows-phone.aspx</a></p><p>Cependant, même si c’est une stratégie que j’affectionne, il faut avouer qu’elle n’est pas adaptée à tous les cas de figure et qu’elle a l’inconvénient de demander un travail d’intégration et de CSS particulièrement poussé pour obtenir un résultat qui ne ‘’fait pas site web’’.</p><p>Si vous voulez apprendre un peu plus en détail comment créer une application multi plateformes en vous basant sur Cordova (et AngularJS et BootStrap), je vous propose de suivre ce cours gratuit : <a href="http://www.microsoftvirtualacademy.com/training-courses/creer-une-application-mobile-avec-cordova-phonegap-angularjs-et-bootstrap" title="http://www.microsoftvirtualacademy.com/training-courses/creer-une-application-mobile-avec-cordova-phonegap-angularjs-et-bootstrap" target="_blank" rel="noopener">http://www.microsoftvirtualacademy.com/training-courses/creer-une-application-mobile-avec-cordova-phonegap-angularjs-et-bootstrap</a></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>L’objectif de cet article est avant tout de donner mon point de vue sur les approches majeures pour créer une application multiplateformes. Ce que je veux mettre en avant, c’est que le choix n’est pas si évident et qu’il est à faire en prenant en compte tous les aspects du contexte dans lequel on se trouve. Quand on maitrise les technos web, c’est très probable qu’on arrive à générer un résultat excellent avec la 3ème approche alors que des développeurs .NET seront certainement plus à l’aise avec Xamarin. Si on a déjà une application développée en natif dans le langage d’une des plateformes, il est tout à fait légitime de ne pas se lancer dans un redéveloppement complet avec Xamarin ou Titanium.</p><p>Une alternative qui transparait légèrement dans ce billet est de ne pas réaliser d’application mais un site web complètement responsive. Dans de nombreux cas, les seuls réels besoins sont : donner accès à l’information sur toutes les tailles d’écrans, et utiliser certaines fonctionnalités comme le partage vers les réseaux sociaux ou la géolocalisation. C’est possible en web pur, directement à partir d’un site web et c’est un choix adopté notamment par <a href="http://www.theverge.com/2014/9/2/6096609/welcome-to-verge-2-0" target="_blank" rel="noopener">The Verge</a> très récemment.</p><p>Permettre de donner accès aux fonctionnalités du matériel est d’ailleurs un sujet pris très au sérieux par les organismes qui travaillent sur les standards. Un tour rapide sur la page qui fait un état des lieu de ces travaux (<a href="http://www.w3.org/2012/05/mobile-web-app-state/" title="http://www.w3.org/2012/05/mobile-web-app-state/" target="_blank" rel="noopener">http://www.w3.org/2012/05/mobile-web-app-state/</a>) permet de comprendre ce qu’on peut faire dans le monde du mobile avec le web. Dans cette mouvance, on peut noter l’approche super intéressante de <a href="https://www.mozilla.org/" target="_blank" rel="noopener">Mozilla</a> avec <a href="https://www.mozilla.org/fr/firefox/os/" target="_blank" rel="noopener">Firefox OS</a> qui est construit pour le web en s’appuyant sur ces standards destinés au mobile.</p><p>Ce qui est vraiment très intéressant c’est qu’il y a une solution pour tout le monde. Et qu’on arrive à un stade ou chacune est viable et permet d’obtenir quelque chose d’excellent.</p><p>Bien entendu, nous n’avons parlé que du côté client mais il faut garder à l’esprit que pour que tout cela tienne la route, il est nécessaire d’avoir un backend bien construit et qui soit utilisable partout. Cela signifie qu’il doit être consommable facilement à partir de chaque plateforme et pour ça, adopter une architecture REST est une bonne idée. Je vous conseille d’aller jeter un œil du côté des <a href="http://www.asp.net/web-api" target="_blank" rel="noopener">Web API</a> et / ou d’<a href="http://azure.microsoft.com/en-us/documentation/services/mobile-services/" target="_blank" rel="noopener">Azure Mobile Services</a> qui génère pour vous un backend prêt à consommer 🙂</p><p>&#8212;</p><p>A bientôt,</p><p>Etienne</p><p><em>Nb :</em> C_ertaines images utilisées dans ce billet sont tirées du site de Xamarin ou de certaines de leurs présentations._</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;N’hésitez pas à me contacter sur&lt;/em&gt; &lt;a href=&quot;https://twitter.com/emargraff&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;em&gt;twitter&lt;/em&gt;&lt;/a&gt; &lt;em
      
    
    </summary>
    
      <category term="Uncategorized" scheme="http://yoursite.com/categories/Uncategorized/"/>
    
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
      <category term="Mobile" scheme="http://yoursite.com/tags/Mobile/"/>
    
      <category term="Responsive" scheme="http://yoursite.com/tags/Responsive/"/>
    
      <category term="Cordova" scheme="http://yoursite.com/tags/Cordova/"/>
    
      <category term="Titanium" scheme="http://yoursite.com/tags/Titanium/"/>
    
      <category term="Xamarin" scheme="http://yoursite.com/tags/Xamarin/"/>
    
  </entry>
  
</feed>
